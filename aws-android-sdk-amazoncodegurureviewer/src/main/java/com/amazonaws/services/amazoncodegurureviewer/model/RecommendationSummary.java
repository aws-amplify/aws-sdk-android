/*
 * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amazonaws.services.amazoncodegurureviewer.model;

import java.io.Serializable;

/**
 * <p>
 * Information about recommendations.
 * </p>
 */
public class RecommendationSummary implements Serializable {
    /**
     * <p>
     * Name of the file on which a recommendation is provided.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 1024<br/>
     */
    private String filePath;

    /**
     * <p>
     * The recommendation ID that can be used to track the provided
     * recommendations. Later on it can be used to collect the feedback.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 64<br/>
     */
    private String recommendationId;

    /**
     * <p>
     * Start line from where the recommendation is applicable in the source
     * commit or source branch.
     * </p>
     */
    private Integer startLine;

    /**
     * <p>
     * Last line where the recommendation is applicable in the source commit or
     * source branch. For a single line comment the start line and end line
     * values will be the same.
     * </p>
     */
    private Integer endLine;

    /**
     * <p>
     * A description of the recommendation generated by CodeGuru Reviewer for
     * the lines of code between the start line and the end line.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 2048<br/>
     */
    private String description;

    /**
     * <p>
     * Name of the file on which a recommendation is provided.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 1024<br/>
     *
     * @return <p>
     *         Name of the file on which a recommendation is provided.
     *         </p>
     */
    public String getFilePath() {
        return filePath;
    }

    /**
     * <p>
     * Name of the file on which a recommendation is provided.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 1024<br/>
     *
     * @param filePath <p>
     *            Name of the file on which a recommendation is provided.
     *            </p>
     */
    public void setFilePath(String filePath) {
        this.filePath = filePath;
    }

    /**
     * <p>
     * Name of the file on which a recommendation is provided.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 1024<br/>
     *
     * @param filePath <p>
     *            Name of the file on which a recommendation is provided.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public RecommendationSummary withFilePath(String filePath) {
        this.filePath = filePath;
        return this;
    }

    /**
     * <p>
     * The recommendation ID that can be used to track the provided
     * recommendations. Later on it can be used to collect the feedback.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 64<br/>
     *
     * @return <p>
     *         The recommendation ID that can be used to track the provided
     *         recommendations. Later on it can be used to collect the feedback.
     *         </p>
     */
    public String getRecommendationId() {
        return recommendationId;
    }

    /**
     * <p>
     * The recommendation ID that can be used to track the provided
     * recommendations. Later on it can be used to collect the feedback.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 64<br/>
     *
     * @param recommendationId <p>
     *            The recommendation ID that can be used to track the provided
     *            recommendations. Later on it can be used to collect the
     *            feedback.
     *            </p>
     */
    public void setRecommendationId(String recommendationId) {
        this.recommendationId = recommendationId;
    }

    /**
     * <p>
     * The recommendation ID that can be used to track the provided
     * recommendations. Later on it can be used to collect the feedback.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 64<br/>
     *
     * @param recommendationId <p>
     *            The recommendation ID that can be used to track the provided
     *            recommendations. Later on it can be used to collect the
     *            feedback.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public RecommendationSummary withRecommendationId(String recommendationId) {
        this.recommendationId = recommendationId;
        return this;
    }

    /**
     * <p>
     * Start line from where the recommendation is applicable in the source
     * commit or source branch.
     * </p>
     *
     * @return <p>
     *         Start line from where the recommendation is applicable in the
     *         source commit or source branch.
     *         </p>
     */
    public Integer getStartLine() {
        return startLine;
    }

    /**
     * <p>
     * Start line from where the recommendation is applicable in the source
     * commit or source branch.
     * </p>
     *
     * @param startLine <p>
     *            Start line from where the recommendation is applicable in the
     *            source commit or source branch.
     *            </p>
     */
    public void setStartLine(Integer startLine) {
        this.startLine = startLine;
    }

    /**
     * <p>
     * Start line from where the recommendation is applicable in the source
     * commit or source branch.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param startLine <p>
     *            Start line from where the recommendation is applicable in the
     *            source commit or source branch.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public RecommendationSummary withStartLine(Integer startLine) {
        this.startLine = startLine;
        return this;
    }

    /**
     * <p>
     * Last line where the recommendation is applicable in the source commit or
     * source branch. For a single line comment the start line and end line
     * values will be the same.
     * </p>
     *
     * @return <p>
     *         Last line where the recommendation is applicable in the source
     *         commit or source branch. For a single line comment the start line
     *         and end line values will be the same.
     *         </p>
     */
    public Integer getEndLine() {
        return endLine;
    }

    /**
     * <p>
     * Last line where the recommendation is applicable in the source commit or
     * source branch. For a single line comment the start line and end line
     * values will be the same.
     * </p>
     *
     * @param endLine <p>
     *            Last line where the recommendation is applicable in the source
     *            commit or source branch. For a single line comment the start
     *            line and end line values will be the same.
     *            </p>
     */
    public void setEndLine(Integer endLine) {
        this.endLine = endLine;
    }

    /**
     * <p>
     * Last line where the recommendation is applicable in the source commit or
     * source branch. For a single line comment the start line and end line
     * values will be the same.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param endLine <p>
     *            Last line where the recommendation is applicable in the source
     *            commit or source branch. For a single line comment the start
     *            line and end line values will be the same.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public RecommendationSummary withEndLine(Integer endLine) {
        this.endLine = endLine;
        return this;
    }

    /**
     * <p>
     * A description of the recommendation generated by CodeGuru Reviewer for
     * the lines of code between the start line and the end line.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 2048<br/>
     *
     * @return <p>
     *         A description of the recommendation generated by CodeGuru
     *         Reviewer for the lines of code between the start line and the end
     *         line.
     *         </p>
     */
    public String getDescription() {
        return description;
    }

    /**
     * <p>
     * A description of the recommendation generated by CodeGuru Reviewer for
     * the lines of code between the start line and the end line.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 2048<br/>
     *
     * @param description <p>
     *            A description of the recommendation generated by CodeGuru
     *            Reviewer for the lines of code between the start line and the
     *            end line.
     *            </p>
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * <p>
     * A description of the recommendation generated by CodeGuru Reviewer for
     * the lines of code between the start line and the end line.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 2048<br/>
     *
     * @param description <p>
     *            A description of the recommendation generated by CodeGuru
     *            Reviewer for the lines of code between the start line and the
     *            end line.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public RecommendationSummary withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and
     * debugging.
     *
     * @return A string representation of this object.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getFilePath() != null)
            sb.append("FilePath: " + getFilePath() + ",");
        if (getRecommendationId() != null)
            sb.append("RecommendationId: " + getRecommendationId() + ",");
        if (getStartLine() != null)
            sb.append("StartLine: " + getStartLine() + ",");
        if (getEndLine() != null)
            sb.append("EndLine: " + getEndLine() + ",");
        if (getDescription() != null)
            sb.append("Description: " + getDescription());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getFilePath() == null) ? 0 : getFilePath().hashCode());
        hashCode = prime * hashCode
                + ((getRecommendationId() == null) ? 0 : getRecommendationId().hashCode());
        hashCode = prime * hashCode + ((getStartLine() == null) ? 0 : getStartLine().hashCode());
        hashCode = prime * hashCode + ((getEndLine() == null) ? 0 : getEndLine().hashCode());
        hashCode = prime * hashCode
                + ((getDescription() == null) ? 0 : getDescription().hashCode());
        return hashCode;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof RecommendationSummary == false)
            return false;
        RecommendationSummary other = (RecommendationSummary) obj;

        if (other.getFilePath() == null ^ this.getFilePath() == null)
            return false;
        if (other.getFilePath() != null && other.getFilePath().equals(this.getFilePath()) == false)
            return false;
        if (other.getRecommendationId() == null ^ this.getRecommendationId() == null)
            return false;
        if (other.getRecommendationId() != null
                && other.getRecommendationId().equals(this.getRecommendationId()) == false)
            return false;
        if (other.getStartLine() == null ^ this.getStartLine() == null)
            return false;
        if (other.getStartLine() != null
                && other.getStartLine().equals(this.getStartLine()) == false)
            return false;
        if (other.getEndLine() == null ^ this.getEndLine() == null)
            return false;
        if (other.getEndLine() != null && other.getEndLine().equals(this.getEndLine()) == false)
            return false;
        if (other.getDescription() == null ^ this.getDescription() == null)
            return false;
        if (other.getDescription() != null
                && other.getDescription().equals(this.getDescription()) == false)
            return false;
        return true;
    }
}
