/*
 * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amazonaws.services.amazonrelationaldatabaseservice.model;

import java.io.Serializable;

import com.amazonaws.AmazonWebServiceRequest;

/**
 * <p>
 * Creates an RDS event notification subscription. This action requires a topic
 * Amazon Resource Name (ARN) created by either the RDS console, the SNS
 * console, or the SNS API. To obtain an ARN with SNS, you must create a topic
 * in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS
 * console.
 * </p>
 * <p>
 * You can specify the type of source (SourceType) you want to be notified of,
 * provide a list of RDS sources (SourceIds) that triggers the events, and
 * provide a list of event categories (EventCategories) for events you want to
 * be notified of. For example, you can specify SourceType = db-instance,
 * SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability,
 * Backup.
 * </p>
 * <p>
 * If you specify both the SourceType and SourceIds, such as SourceType =
 * db-instance and SourceIdentifier = myDBInstance1, you are notified of all the
 * db-instance events for the specified source. If you specify a SourceType but
 * do not specify a SourceIdentifier, you receive notice of the events for that
 * source type for all your RDS sources. If you don't specify either the
 * SourceType or the SourceIdentifier, you are notified of events generated from
 * all RDS sources belonging to your customer account.
 * </p>
 * <note>
 * <p>
 * RDS event notification is only available for unencrypted SNS topics. If you
 * specify an encrypted SNS topic, event notifications aren't sent for the
 * topic.
 * </p>
 * </note>
 */
public class CreateEventSubscriptionRequest extends AmazonWebServiceRequest implements Serializable {
    /**
     * <p>
     * The name of the subscription.
     * </p>
     * <p>
     * Constraints: The name must be less than 255 characters.
     * </p>
     */
    private String subscriptionName;

    /**
     * <p>
     * The Amazon Resource Name (ARN) of the SNS topic created for event
     * notification. The ARN is created by Amazon SNS when you create a topic
     * and subscribe to it.
     * </p>
     */
    private String snsTopicArn;

    /**
     * <p>
     * The type of source that is generating the events. For example, if you
     * want to be notified of events generated by a DB instance, you would set
     * this parameter to db-instance. if this value isn't specified, all events
     * are returned.
     * </p>
     * <p>
     * Valid values: <code>db-instance</code> | <code>db-cluster</code> |
     * <code>db-parameter-group</code> | <code>db-security-group</code> |
     * <code>db-snapshot</code> | <code>db-cluster-snapshot</code>
     * </p>
     */
    private String sourceType;

    /**
     * <p>
     * A list of event categories for a SourceType that you want to subscribe
     * to. You can see a list of the categories for a given SourceType in the <a
     * href=
     * "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"
     * >Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the
     * <b>DescribeEventCategories</b> action.
     * </p>
     */
    private java.util.List<String> eventCategories;

    /**
     * <p>
     * The list of identifiers of the event sources for which events are
     * returned. If not specified, then all sources are included in the
     * response. An identifier must begin with a letter and must contain only
     * ASCII letters, digits, and hyphens. It can't end with a hyphen or contain
     * two consecutive hyphens.
     * </p>
     * <p>
     * Constraints:
     * </p>
     * <ul>
     * <li>
     * <p>
     * If SourceIds are supplied, SourceType must also be provided.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB instance, then a
     * <code>DBInstanceIdentifier</code> must be supplied.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB security group, a
     * <code>DBSecurityGroupName</code> must be supplied.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB parameter group, a
     * <code>DBParameterGroupName</code> must be supplied.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code>
     * must be supplied.
     * </p>
     * </li>
     * </ul>
     */
    private java.util.List<String> sourceIds;

    /**
     * <p>
     * A value that indicates whether to activate the subscription. If the event
     * notification subscription isn't activated, the subscription is created
     * but not active.
     * </p>
     */
    private Boolean enabled;

    /**
     * <p>
     * A list of tags. For more information, see <a href=
     * "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html"
     * >Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
     * </p>
     */
    private java.util.List<Tag> tags;

    /**
     * <p>
     * The name of the subscription.
     * </p>
     * <p>
     * Constraints: The name must be less than 255 characters.
     * </p>
     *
     * @return <p>
     *         The name of the subscription.
     *         </p>
     *         <p>
     *         Constraints: The name must be less than 255 characters.
     *         </p>
     */
    public String getSubscriptionName() {
        return subscriptionName;
    }

    /**
     * <p>
     * The name of the subscription.
     * </p>
     * <p>
     * Constraints: The name must be less than 255 characters.
     * </p>
     *
     * @param subscriptionName <p>
     *            The name of the subscription.
     *            </p>
     *            <p>
     *            Constraints: The name must be less than 255 characters.
     *            </p>
     */
    public void setSubscriptionName(String subscriptionName) {
        this.subscriptionName = subscriptionName;
    }

    /**
     * <p>
     * The name of the subscription.
     * </p>
     * <p>
     * Constraints: The name must be less than 255 characters.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param subscriptionName <p>
     *            The name of the subscription.
     *            </p>
     *            <p>
     *            Constraints: The name must be less than 255 characters.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateEventSubscriptionRequest withSubscriptionName(String subscriptionName) {
        this.subscriptionName = subscriptionName;
        return this;
    }

    /**
     * <p>
     * The Amazon Resource Name (ARN) of the SNS topic created for event
     * notification. The ARN is created by Amazon SNS when you create a topic
     * and subscribe to it.
     * </p>
     *
     * @return <p>
     *         The Amazon Resource Name (ARN) of the SNS topic created for event
     *         notification. The ARN is created by Amazon SNS when you create a
     *         topic and subscribe to it.
     *         </p>
     */
    public String getSnsTopicArn() {
        return snsTopicArn;
    }

    /**
     * <p>
     * The Amazon Resource Name (ARN) of the SNS topic created for event
     * notification. The ARN is created by Amazon SNS when you create a topic
     * and subscribe to it.
     * </p>
     *
     * @param snsTopicArn <p>
     *            The Amazon Resource Name (ARN) of the SNS topic created for
     *            event notification. The ARN is created by Amazon SNS when you
     *            create a topic and subscribe to it.
     *            </p>
     */
    public void setSnsTopicArn(String snsTopicArn) {
        this.snsTopicArn = snsTopicArn;
    }

    /**
     * <p>
     * The Amazon Resource Name (ARN) of the SNS topic created for event
     * notification. The ARN is created by Amazon SNS when you create a topic
     * and subscribe to it.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param snsTopicArn <p>
     *            The Amazon Resource Name (ARN) of the SNS topic created for
     *            event notification. The ARN is created by Amazon SNS when you
     *            create a topic and subscribe to it.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateEventSubscriptionRequest withSnsTopicArn(String snsTopicArn) {
        this.snsTopicArn = snsTopicArn;
        return this;
    }

    /**
     * <p>
     * The type of source that is generating the events. For example, if you
     * want to be notified of events generated by a DB instance, you would set
     * this parameter to db-instance. if this value isn't specified, all events
     * are returned.
     * </p>
     * <p>
     * Valid values: <code>db-instance</code> | <code>db-cluster</code> |
     * <code>db-parameter-group</code> | <code>db-security-group</code> |
     * <code>db-snapshot</code> | <code>db-cluster-snapshot</code>
     * </p>
     *
     * @return <p>
     *         The type of source that is generating the events. For example, if
     *         you want to be notified of events generated by a DB instance, you
     *         would set this parameter to db-instance. if this value isn't
     *         specified, all events are returned.
     *         </p>
     *         <p>
     *         Valid values: <code>db-instance</code> | <code>db-cluster</code>
     *         | <code>db-parameter-group</code> |
     *         <code>db-security-group</code> | <code>db-snapshot</code> |
     *         <code>db-cluster-snapshot</code>
     *         </p>
     */
    public String getSourceType() {
        return sourceType;
    }

    /**
     * <p>
     * The type of source that is generating the events. For example, if you
     * want to be notified of events generated by a DB instance, you would set
     * this parameter to db-instance. if this value isn't specified, all events
     * are returned.
     * </p>
     * <p>
     * Valid values: <code>db-instance</code> | <code>db-cluster</code> |
     * <code>db-parameter-group</code> | <code>db-security-group</code> |
     * <code>db-snapshot</code> | <code>db-cluster-snapshot</code>
     * </p>
     *
     * @param sourceType <p>
     *            The type of source that is generating the events. For example,
     *            if you want to be notified of events generated by a DB
     *            instance, you would set this parameter to db-instance. if this
     *            value isn't specified, all events are returned.
     *            </p>
     *            <p>
     *            Valid values: <code>db-instance</code> |
     *            <code>db-cluster</code> | <code>db-parameter-group</code> |
     *            <code>db-security-group</code> | <code>db-snapshot</code> |
     *            <code>db-cluster-snapshot</code>
     *            </p>
     */
    public void setSourceType(String sourceType) {
        this.sourceType = sourceType;
    }

    /**
     * <p>
     * The type of source that is generating the events. For example, if you
     * want to be notified of events generated by a DB instance, you would set
     * this parameter to db-instance. if this value isn't specified, all events
     * are returned.
     * </p>
     * <p>
     * Valid values: <code>db-instance</code> | <code>db-cluster</code> |
     * <code>db-parameter-group</code> | <code>db-security-group</code> |
     * <code>db-snapshot</code> | <code>db-cluster-snapshot</code>
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param sourceType <p>
     *            The type of source that is generating the events. For example,
     *            if you want to be notified of events generated by a DB
     *            instance, you would set this parameter to db-instance. if this
     *            value isn't specified, all events are returned.
     *            </p>
     *            <p>
     *            Valid values: <code>db-instance</code> |
     *            <code>db-cluster</code> | <code>db-parameter-group</code> |
     *            <code>db-security-group</code> | <code>db-snapshot</code> |
     *            <code>db-cluster-snapshot</code>
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateEventSubscriptionRequest withSourceType(String sourceType) {
        this.sourceType = sourceType;
        return this;
    }

    /**
     * <p>
     * A list of event categories for a SourceType that you want to subscribe
     * to. You can see a list of the categories for a given SourceType in the <a
     * href=
     * "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"
     * >Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the
     * <b>DescribeEventCategories</b> action.
     * </p>
     *
     * @return <p>
     *         A list of event categories for a SourceType that you want to
     *         subscribe to. You can see a list of the categories for a given
     *         SourceType in the <a href=
     *         "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"
     *         >Events</a> topic in the <i>Amazon RDS User Guide</i> or by using
     *         the <b>DescribeEventCategories</b> action.
     *         </p>
     */
    public java.util.List<String> getEventCategories() {
        return eventCategories;
    }

    /**
     * <p>
     * A list of event categories for a SourceType that you want to subscribe
     * to. You can see a list of the categories for a given SourceType in the <a
     * href=
     * "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"
     * >Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the
     * <b>DescribeEventCategories</b> action.
     * </p>
     *
     * @param eventCategories <p>
     *            A list of event categories for a SourceType that you want to
     *            subscribe to. You can see a list of the categories for a given
     *            SourceType in the <a href=
     *            "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"
     *            >Events</a> topic in the <i>Amazon RDS User Guide</i> or by
     *            using the <b>DescribeEventCategories</b> action.
     *            </p>
     */
    public void setEventCategories(java.util.Collection<String> eventCategories) {
        if (eventCategories == null) {
            this.eventCategories = null;
            return;
        }

        this.eventCategories = new java.util.ArrayList<String>(eventCategories);
    }

    /**
     * <p>
     * A list of event categories for a SourceType that you want to subscribe
     * to. You can see a list of the categories for a given SourceType in the <a
     * href=
     * "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"
     * >Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the
     * <b>DescribeEventCategories</b> action.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param eventCategories <p>
     *            A list of event categories for a SourceType that you want to
     *            subscribe to. You can see a list of the categories for a given
     *            SourceType in the <a href=
     *            "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"
     *            >Events</a> topic in the <i>Amazon RDS User Guide</i> or by
     *            using the <b>DescribeEventCategories</b> action.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateEventSubscriptionRequest withEventCategories(String... eventCategories) {
        if (getEventCategories() == null) {
            this.eventCategories = new java.util.ArrayList<String>(eventCategories.length);
        }
        for (String value : eventCategories) {
            this.eventCategories.add(value);
        }
        return this;
    }

    /**
     * <p>
     * A list of event categories for a SourceType that you want to subscribe
     * to. You can see a list of the categories for a given SourceType in the <a
     * href=
     * "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"
     * >Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the
     * <b>DescribeEventCategories</b> action.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param eventCategories <p>
     *            A list of event categories for a SourceType that you want to
     *            subscribe to. You can see a list of the categories for a given
     *            SourceType in the <a href=
     *            "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"
     *            >Events</a> topic in the <i>Amazon RDS User Guide</i> or by
     *            using the <b>DescribeEventCategories</b> action.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateEventSubscriptionRequest withEventCategories(
            java.util.Collection<String> eventCategories) {
        setEventCategories(eventCategories);
        return this;
    }

    /**
     * <p>
     * The list of identifiers of the event sources for which events are
     * returned. If not specified, then all sources are included in the
     * response. An identifier must begin with a letter and must contain only
     * ASCII letters, digits, and hyphens. It can't end with a hyphen or contain
     * two consecutive hyphens.
     * </p>
     * <p>
     * Constraints:
     * </p>
     * <ul>
     * <li>
     * <p>
     * If SourceIds are supplied, SourceType must also be provided.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB instance, then a
     * <code>DBInstanceIdentifier</code> must be supplied.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB security group, a
     * <code>DBSecurityGroupName</code> must be supplied.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB parameter group, a
     * <code>DBParameterGroupName</code> must be supplied.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code>
     * must be supplied.
     * </p>
     * </li>
     * </ul>
     *
     * @return <p>
     *         The list of identifiers of the event sources for which events are
     *         returned. If not specified, then all sources are included in the
     *         response. An identifier must begin with a letter and must contain
     *         only ASCII letters, digits, and hyphens. It can't end with a
     *         hyphen or contain two consecutive hyphens.
     *         </p>
     *         <p>
     *         Constraints:
     *         </p>
     *         <ul>
     *         <li>
     *         <p>
     *         If SourceIds are supplied, SourceType must also be provided.
     *         </p>
     *         </li>
     *         <li>
     *         <p>
     *         If the source type is a DB instance, then a
     *         <code>DBInstanceIdentifier</code> must be supplied.
     *         </p>
     *         </li>
     *         <li>
     *         <p>
     *         If the source type is a DB security group, a
     *         <code>DBSecurityGroupName</code> must be supplied.
     *         </p>
     *         </li>
     *         <li>
     *         <p>
     *         If the source type is a DB parameter group, a
     *         <code>DBParameterGroupName</code> must be supplied.
     *         </p>
     *         </li>
     *         <li>
     *         <p>
     *         If the source type is a DB snapshot, a
     *         <code>DBSnapshotIdentifier</code> must be supplied.
     *         </p>
     *         </li>
     *         </ul>
     */
    public java.util.List<String> getSourceIds() {
        return sourceIds;
    }

    /**
     * <p>
     * The list of identifiers of the event sources for which events are
     * returned. If not specified, then all sources are included in the
     * response. An identifier must begin with a letter and must contain only
     * ASCII letters, digits, and hyphens. It can't end with a hyphen or contain
     * two consecutive hyphens.
     * </p>
     * <p>
     * Constraints:
     * </p>
     * <ul>
     * <li>
     * <p>
     * If SourceIds are supplied, SourceType must also be provided.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB instance, then a
     * <code>DBInstanceIdentifier</code> must be supplied.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB security group, a
     * <code>DBSecurityGroupName</code> must be supplied.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB parameter group, a
     * <code>DBParameterGroupName</code> must be supplied.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code>
     * must be supplied.
     * </p>
     * </li>
     * </ul>
     *
     * @param sourceIds <p>
     *            The list of identifiers of the event sources for which events
     *            are returned. If not specified, then all sources are included
     *            in the response. An identifier must begin with a letter and
     *            must contain only ASCII letters, digits, and hyphens. It can't
     *            end with a hyphen or contain two consecutive hyphens.
     *            </p>
     *            <p>
     *            Constraints:
     *            </p>
     *            <ul>
     *            <li>
     *            <p>
     *            If SourceIds are supplied, SourceType must also be provided.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            If the source type is a DB instance, then a
     *            <code>DBInstanceIdentifier</code> must be supplied.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            If the source type is a DB security group, a
     *            <code>DBSecurityGroupName</code> must be supplied.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            If the source type is a DB parameter group, a
     *            <code>DBParameterGroupName</code> must be supplied.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            If the source type is a DB snapshot, a
     *            <code>DBSnapshotIdentifier</code> must be supplied.
     *            </p>
     *            </li>
     *            </ul>
     */
    public void setSourceIds(java.util.Collection<String> sourceIds) {
        if (sourceIds == null) {
            this.sourceIds = null;
            return;
        }

        this.sourceIds = new java.util.ArrayList<String>(sourceIds);
    }

    /**
     * <p>
     * The list of identifiers of the event sources for which events are
     * returned. If not specified, then all sources are included in the
     * response. An identifier must begin with a letter and must contain only
     * ASCII letters, digits, and hyphens. It can't end with a hyphen or contain
     * two consecutive hyphens.
     * </p>
     * <p>
     * Constraints:
     * </p>
     * <ul>
     * <li>
     * <p>
     * If SourceIds are supplied, SourceType must also be provided.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB instance, then a
     * <code>DBInstanceIdentifier</code> must be supplied.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB security group, a
     * <code>DBSecurityGroupName</code> must be supplied.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB parameter group, a
     * <code>DBParameterGroupName</code> must be supplied.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code>
     * must be supplied.
     * </p>
     * </li>
     * </ul>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param sourceIds <p>
     *            The list of identifiers of the event sources for which events
     *            are returned. If not specified, then all sources are included
     *            in the response. An identifier must begin with a letter and
     *            must contain only ASCII letters, digits, and hyphens. It can't
     *            end with a hyphen or contain two consecutive hyphens.
     *            </p>
     *            <p>
     *            Constraints:
     *            </p>
     *            <ul>
     *            <li>
     *            <p>
     *            If SourceIds are supplied, SourceType must also be provided.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            If the source type is a DB instance, then a
     *            <code>DBInstanceIdentifier</code> must be supplied.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            If the source type is a DB security group, a
     *            <code>DBSecurityGroupName</code> must be supplied.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            If the source type is a DB parameter group, a
     *            <code>DBParameterGroupName</code> must be supplied.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            If the source type is a DB snapshot, a
     *            <code>DBSnapshotIdentifier</code> must be supplied.
     *            </p>
     *            </li>
     *            </ul>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateEventSubscriptionRequest withSourceIds(String... sourceIds) {
        if (getSourceIds() == null) {
            this.sourceIds = new java.util.ArrayList<String>(sourceIds.length);
        }
        for (String value : sourceIds) {
            this.sourceIds.add(value);
        }
        return this;
    }

    /**
     * <p>
     * The list of identifiers of the event sources for which events are
     * returned. If not specified, then all sources are included in the
     * response. An identifier must begin with a letter and must contain only
     * ASCII letters, digits, and hyphens. It can't end with a hyphen or contain
     * two consecutive hyphens.
     * </p>
     * <p>
     * Constraints:
     * </p>
     * <ul>
     * <li>
     * <p>
     * If SourceIds are supplied, SourceType must also be provided.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB instance, then a
     * <code>DBInstanceIdentifier</code> must be supplied.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB security group, a
     * <code>DBSecurityGroupName</code> must be supplied.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB parameter group, a
     * <code>DBParameterGroupName</code> must be supplied.
     * </p>
     * </li>
     * <li>
     * <p>
     * If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code>
     * must be supplied.
     * </p>
     * </li>
     * </ul>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param sourceIds <p>
     *            The list of identifiers of the event sources for which events
     *            are returned. If not specified, then all sources are included
     *            in the response. An identifier must begin with a letter and
     *            must contain only ASCII letters, digits, and hyphens. It can't
     *            end with a hyphen or contain two consecutive hyphens.
     *            </p>
     *            <p>
     *            Constraints:
     *            </p>
     *            <ul>
     *            <li>
     *            <p>
     *            If SourceIds are supplied, SourceType must also be provided.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            If the source type is a DB instance, then a
     *            <code>DBInstanceIdentifier</code> must be supplied.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            If the source type is a DB security group, a
     *            <code>DBSecurityGroupName</code> must be supplied.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            If the source type is a DB parameter group, a
     *            <code>DBParameterGroupName</code> must be supplied.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            If the source type is a DB snapshot, a
     *            <code>DBSnapshotIdentifier</code> must be supplied.
     *            </p>
     *            </li>
     *            </ul>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateEventSubscriptionRequest withSourceIds(java.util.Collection<String> sourceIds) {
        setSourceIds(sourceIds);
        return this;
    }

    /**
     * <p>
     * A value that indicates whether to activate the subscription. If the event
     * notification subscription isn't activated, the subscription is created
     * but not active.
     * </p>
     *
     * @return <p>
     *         A value that indicates whether to activate the subscription. If
     *         the event notification subscription isn't activated, the
     *         subscription is created but not active.
     *         </p>
     */
    public Boolean isEnabled() {
        return enabled;
    }

    /**
     * <p>
     * A value that indicates whether to activate the subscription. If the event
     * notification subscription isn't activated, the subscription is created
     * but not active.
     * </p>
     *
     * @return <p>
     *         A value that indicates whether to activate the subscription. If
     *         the event notification subscription isn't activated, the
     *         subscription is created but not active.
     *         </p>
     */
    public Boolean getEnabled() {
        return enabled;
    }

    /**
     * <p>
     * A value that indicates whether to activate the subscription. If the event
     * notification subscription isn't activated, the subscription is created
     * but not active.
     * </p>
     *
     * @param enabled <p>
     *            A value that indicates whether to activate the subscription.
     *            If the event notification subscription isn't activated, the
     *            subscription is created but not active.
     *            </p>
     */
    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    /**
     * <p>
     * A value that indicates whether to activate the subscription. If the event
     * notification subscription isn't activated, the subscription is created
     * but not active.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param enabled <p>
     *            A value that indicates whether to activate the subscription.
     *            If the event notification subscription isn't activated, the
     *            subscription is created but not active.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateEventSubscriptionRequest withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * <p>
     * A list of tags. For more information, see <a href=
     * "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html"
     * >Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
     * </p>
     *
     * @return <p>
     *         A list of tags. For more information, see <a href=
     *         "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html"
     *         >Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User
     *         Guide.</i>
     *         </p>
     */
    public java.util.List<Tag> getTags() {
        return tags;
    }

    /**
     * <p>
     * A list of tags. For more information, see <a href=
     * "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html"
     * >Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
     * </p>
     *
     * @param tags <p>
     *            A list of tags. For more information, see <a href=
     *            "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html"
     *            >Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User
     *            Guide.</i>
     *            </p>
     */
    public void setTags(java.util.Collection<Tag> tags) {
        if (tags == null) {
            this.tags = null;
            return;
        }

        this.tags = new java.util.ArrayList<Tag>(tags);
    }

    /**
     * <p>
     * A list of tags. For more information, see <a href=
     * "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html"
     * >Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param tags <p>
     *            A list of tags. For more information, see <a href=
     *            "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html"
     *            >Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User
     *            Guide.</i>
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateEventSubscriptionRequest withTags(Tag... tags) {
        if (getTags() == null) {
            this.tags = new java.util.ArrayList<Tag>(tags.length);
        }
        for (Tag value : tags) {
            this.tags.add(value);
        }
        return this;
    }

    /**
     * <p>
     * A list of tags. For more information, see <a href=
     * "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html"
     * >Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param tags <p>
     *            A list of tags. For more information, see <a href=
     *            "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html"
     *            >Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User
     *            Guide.</i>
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateEventSubscriptionRequest withTags(java.util.Collection<Tag> tags) {
        setTags(tags);
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and
     * debugging.
     *
     * @return A string representation of this object.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getSubscriptionName() != null)
            sb.append("SubscriptionName: " + getSubscriptionName() + ",");
        if (getSnsTopicArn() != null)
            sb.append("SnsTopicArn: " + getSnsTopicArn() + ",");
        if (getSourceType() != null)
            sb.append("SourceType: " + getSourceType() + ",");
        if (getEventCategories() != null)
            sb.append("EventCategories: " + getEventCategories() + ",");
        if (getSourceIds() != null)
            sb.append("SourceIds: " + getSourceIds() + ",");
        if (getEnabled() != null)
            sb.append("Enabled: " + getEnabled() + ",");
        if (getTags() != null)
            sb.append("Tags: " + getTags());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode
                + ((getSubscriptionName() == null) ? 0 : getSubscriptionName().hashCode());
        hashCode = prime * hashCode
                + ((getSnsTopicArn() == null) ? 0 : getSnsTopicArn().hashCode());
        hashCode = prime * hashCode + ((getSourceType() == null) ? 0 : getSourceType().hashCode());
        hashCode = prime * hashCode
                + ((getEventCategories() == null) ? 0 : getEventCategories().hashCode());
        hashCode = prime * hashCode + ((getSourceIds() == null) ? 0 : getSourceIds().hashCode());
        hashCode = prime * hashCode + ((getEnabled() == null) ? 0 : getEnabled().hashCode());
        hashCode = prime * hashCode + ((getTags() == null) ? 0 : getTags().hashCode());
        return hashCode;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof CreateEventSubscriptionRequest == false)
            return false;
        CreateEventSubscriptionRequest other = (CreateEventSubscriptionRequest) obj;

        if (other.getSubscriptionName() == null ^ this.getSubscriptionName() == null)
            return false;
        if (other.getSubscriptionName() != null
                && other.getSubscriptionName().equals(this.getSubscriptionName()) == false)
            return false;
        if (other.getSnsTopicArn() == null ^ this.getSnsTopicArn() == null)
            return false;
        if (other.getSnsTopicArn() != null
                && other.getSnsTopicArn().equals(this.getSnsTopicArn()) == false)
            return false;
        if (other.getSourceType() == null ^ this.getSourceType() == null)
            return false;
        if (other.getSourceType() != null
                && other.getSourceType().equals(this.getSourceType()) == false)
            return false;
        if (other.getEventCategories() == null ^ this.getEventCategories() == null)
            return false;
        if (other.getEventCategories() != null
                && other.getEventCategories().equals(this.getEventCategories()) == false)
            return false;
        if (other.getSourceIds() == null ^ this.getSourceIds() == null)
            return false;
        if (other.getSourceIds() != null
                && other.getSourceIds().equals(this.getSourceIds()) == false)
            return false;
        if (other.getEnabled() == null ^ this.getEnabled() == null)
            return false;
        if (other.getEnabled() != null && other.getEnabled().equals(this.getEnabled()) == false)
            return false;
        if (other.getTags() == null ^ this.getTags() == null)
            return false;
        if (other.getTags() != null && other.getTags().equals(this.getTags()) == false)
            return false;
        return true;
    }
}
