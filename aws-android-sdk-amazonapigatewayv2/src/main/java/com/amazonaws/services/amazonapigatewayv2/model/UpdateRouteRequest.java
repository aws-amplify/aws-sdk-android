/*
 * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amazonaws.services.amazonapigatewayv2.model;

import java.io.Serializable;

import com.amazonaws.AmazonWebServiceRequest;

/**
 * <p>
 * Updates a Route.
 * </p>
 */
public class UpdateRouteRequest extends AmazonWebServiceRequest implements Serializable {
    /**
     * <p>
     * The API identifier.
     * </p>
     */
    private String apiId;

    /**
     * <p>
     * Specifies whether an API key is required for the route. Supported only
     * for WebSocket APIs.
     * </p>
     */
    private Boolean apiKeyRequired;

    /**
     * <p>
     * The authorization scopes supported by this route.
     * </p>
     */
    private java.util.List<String> authorizationScopes;

    /**
     * <p>
     * The authorization type for the route. For WebSocket APIs, valid values
     * are NONE for open access, AWS_IAM for using AWS IAM permissions, and
     * CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE
     * for open access, or JWT for using JSON Web Tokens.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>NONE, AWS_IAM, CUSTOM, JWT
     */
    private String authorizationType;

    /**
     * <p>
     * The identifier of the Authorizer resource to be associated with this
     * route. The authorizer identifier is generated by API Gateway when you
     * created the authorizer.
     * </p>
     */
    private String authorizerId;

    /**
     * <p>
     * The model selection expression for the route. Supported only for
     * WebSocket APIs.
     * </p>
     */
    private String modelSelectionExpression;

    /**
     * <p>
     * The operation name for the route.
     * </p>
     */
    private String operationName;

    /**
     * <p>
     * The request models for the route. Supported only for WebSocket APIs.
     * </p>
     */
    private java.util.Map<String, String> requestModels;

    /**
     * <p>
     * The request parameters for the route. Supported only for WebSocket APIs.
     * </p>
     */
    private java.util.Map<String, ParameterConstraints> requestParameters;

    /**
     * <p>
     * The route ID.
     * </p>
     */
    private String routeId;

    /**
     * <p>
     * The route key for the route.
     * </p>
     */
    private String routeKey;

    /**
     * <p>
     * The route response selection expression for the route. Supported only for
     * WebSocket APIs.
     * </p>
     */
    private String routeResponseSelectionExpression;

    /**
     * <p>
     * The target for the route.
     * </p>
     */
    private String target;

    /**
     * <p>
     * The API identifier.
     * </p>
     *
     * @return <p>
     *         The API identifier.
     *         </p>
     */
    public String getApiId() {
        return apiId;
    }

    /**
     * <p>
     * The API identifier.
     * </p>
     *
     * @param apiId <p>
     *            The API identifier.
     *            </p>
     */
    public void setApiId(String apiId) {
        this.apiId = apiId;
    }

    /**
     * <p>
     * The API identifier.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param apiId <p>
     *            The API identifier.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRouteRequest withApiId(String apiId) {
        this.apiId = apiId;
        return this;
    }

    /**
     * <p>
     * Specifies whether an API key is required for the route. Supported only
     * for WebSocket APIs.
     * </p>
     *
     * @return <p>
     *         Specifies whether an API key is required for the route. Supported
     *         only for WebSocket APIs.
     *         </p>
     */
    public Boolean isApiKeyRequired() {
        return apiKeyRequired;
    }

    /**
     * <p>
     * Specifies whether an API key is required for the route. Supported only
     * for WebSocket APIs.
     * </p>
     *
     * @return <p>
     *         Specifies whether an API key is required for the route. Supported
     *         only for WebSocket APIs.
     *         </p>
     */
    public Boolean getApiKeyRequired() {
        return apiKeyRequired;
    }

    /**
     * <p>
     * Specifies whether an API key is required for the route. Supported only
     * for WebSocket APIs.
     * </p>
     *
     * @param apiKeyRequired <p>
     *            Specifies whether an API key is required for the route.
     *            Supported only for WebSocket APIs.
     *            </p>
     */
    public void setApiKeyRequired(Boolean apiKeyRequired) {
        this.apiKeyRequired = apiKeyRequired;
    }

    /**
     * <p>
     * Specifies whether an API key is required for the route. Supported only
     * for WebSocket APIs.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param apiKeyRequired <p>
     *            Specifies whether an API key is required for the route.
     *            Supported only for WebSocket APIs.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRouteRequest withApiKeyRequired(Boolean apiKeyRequired) {
        this.apiKeyRequired = apiKeyRequired;
        return this;
    }

    /**
     * <p>
     * The authorization scopes supported by this route.
     * </p>
     *
     * @return <p>
     *         The authorization scopes supported by this route.
     *         </p>
     */
    public java.util.List<String> getAuthorizationScopes() {
        return authorizationScopes;
    }

    /**
     * <p>
     * The authorization scopes supported by this route.
     * </p>
     *
     * @param authorizationScopes <p>
     *            The authorization scopes supported by this route.
     *            </p>
     */
    public void setAuthorizationScopes(java.util.Collection<String> authorizationScopes) {
        if (authorizationScopes == null) {
            this.authorizationScopes = null;
            return;
        }

        this.authorizationScopes = new java.util.ArrayList<String>(authorizationScopes);
    }

    /**
     * <p>
     * The authorization scopes supported by this route.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param authorizationScopes <p>
     *            The authorization scopes supported by this route.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRouteRequest withAuthorizationScopes(String... authorizationScopes) {
        if (getAuthorizationScopes() == null) {
            this.authorizationScopes = new java.util.ArrayList<String>(authorizationScopes.length);
        }
        for (String value : authorizationScopes) {
            this.authorizationScopes.add(value);
        }
        return this;
    }

    /**
     * <p>
     * The authorization scopes supported by this route.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param authorizationScopes <p>
     *            The authorization scopes supported by this route.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRouteRequest withAuthorizationScopes(
            java.util.Collection<String> authorizationScopes) {
        setAuthorizationScopes(authorizationScopes);
        return this;
    }

    /**
     * <p>
     * The authorization type for the route. For WebSocket APIs, valid values
     * are NONE for open access, AWS_IAM for using AWS IAM permissions, and
     * CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE
     * for open access, or JWT for using JSON Web Tokens.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>NONE, AWS_IAM, CUSTOM, JWT
     *
     * @return <p>
     *         The authorization type for the route. For WebSocket APIs, valid
     *         values are NONE for open access, AWS_IAM for using AWS IAM
     *         permissions, and CUSTOM for using a Lambda authorizer For HTTP
     *         APIs, valid values are NONE for open access, or JWT for using
     *         JSON Web Tokens.
     *         </p>
     * @see AuthorizationType
     */
    public String getAuthorizationType() {
        return authorizationType;
    }

    /**
     * <p>
     * The authorization type for the route. For WebSocket APIs, valid values
     * are NONE for open access, AWS_IAM for using AWS IAM permissions, and
     * CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE
     * for open access, or JWT for using JSON Web Tokens.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>NONE, AWS_IAM, CUSTOM, JWT
     *
     * @param authorizationType <p>
     *            The authorization type for the route. For WebSocket APIs,
     *            valid values are NONE for open access, AWS_IAM for using AWS
     *            IAM permissions, and CUSTOM for using a Lambda authorizer For
     *            HTTP APIs, valid values are NONE for open access, or JWT for
     *            using JSON Web Tokens.
     *            </p>
     * @see AuthorizationType
     */
    public void setAuthorizationType(String authorizationType) {
        this.authorizationType = authorizationType;
    }

    /**
     * <p>
     * The authorization type for the route. For WebSocket APIs, valid values
     * are NONE for open access, AWS_IAM for using AWS IAM permissions, and
     * CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE
     * for open access, or JWT for using JSON Web Tokens.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>NONE, AWS_IAM, CUSTOM, JWT
     *
     * @param authorizationType <p>
     *            The authorization type for the route. For WebSocket APIs,
     *            valid values are NONE for open access, AWS_IAM for using AWS
     *            IAM permissions, and CUSTOM for using a Lambda authorizer For
     *            HTTP APIs, valid values are NONE for open access, or JWT for
     *            using JSON Web Tokens.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     * @see AuthorizationType
     */
    public UpdateRouteRequest withAuthorizationType(String authorizationType) {
        this.authorizationType = authorizationType;
        return this;
    }

    /**
     * <p>
     * The authorization type for the route. For WebSocket APIs, valid values
     * are NONE for open access, AWS_IAM for using AWS IAM permissions, and
     * CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE
     * for open access, or JWT for using JSON Web Tokens.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>NONE, AWS_IAM, CUSTOM, JWT
     *
     * @param authorizationType <p>
     *            The authorization type for the route. For WebSocket APIs,
     *            valid values are NONE for open access, AWS_IAM for using AWS
     *            IAM permissions, and CUSTOM for using a Lambda authorizer For
     *            HTTP APIs, valid values are NONE for open access, or JWT for
     *            using JSON Web Tokens.
     *            </p>
     * @see AuthorizationType
     */
    public void setAuthorizationType(AuthorizationType authorizationType) {
        this.authorizationType = authorizationType.toString();
    }

    /**
     * <p>
     * The authorization type for the route. For WebSocket APIs, valid values
     * are NONE for open access, AWS_IAM for using AWS IAM permissions, and
     * CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE
     * for open access, or JWT for using JSON Web Tokens.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>NONE, AWS_IAM, CUSTOM, JWT
     *
     * @param authorizationType <p>
     *            The authorization type for the route. For WebSocket APIs,
     *            valid values are NONE for open access, AWS_IAM for using AWS
     *            IAM permissions, and CUSTOM for using a Lambda authorizer For
     *            HTTP APIs, valid values are NONE for open access, or JWT for
     *            using JSON Web Tokens.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     * @see AuthorizationType
     */
    public UpdateRouteRequest withAuthorizationType(AuthorizationType authorizationType) {
        this.authorizationType = authorizationType.toString();
        return this;
    }

    /**
     * <p>
     * The identifier of the Authorizer resource to be associated with this
     * route. The authorizer identifier is generated by API Gateway when you
     * created the authorizer.
     * </p>
     *
     * @return <p>
     *         The identifier of the Authorizer resource to be associated with
     *         this route. The authorizer identifier is generated by API Gateway
     *         when you created the authorizer.
     *         </p>
     */
    public String getAuthorizerId() {
        return authorizerId;
    }

    /**
     * <p>
     * The identifier of the Authorizer resource to be associated with this
     * route. The authorizer identifier is generated by API Gateway when you
     * created the authorizer.
     * </p>
     *
     * @param authorizerId <p>
     *            The identifier of the Authorizer resource to be associated
     *            with this route. The authorizer identifier is generated by API
     *            Gateway when you created the authorizer.
     *            </p>
     */
    public void setAuthorizerId(String authorizerId) {
        this.authorizerId = authorizerId;
    }

    /**
     * <p>
     * The identifier of the Authorizer resource to be associated with this
     * route. The authorizer identifier is generated by API Gateway when you
     * created the authorizer.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param authorizerId <p>
     *            The identifier of the Authorizer resource to be associated
     *            with this route. The authorizer identifier is generated by API
     *            Gateway when you created the authorizer.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRouteRequest withAuthorizerId(String authorizerId) {
        this.authorizerId = authorizerId;
        return this;
    }

    /**
     * <p>
     * The model selection expression for the route. Supported only for
     * WebSocket APIs.
     * </p>
     *
     * @return <p>
     *         The model selection expression for the route. Supported only for
     *         WebSocket APIs.
     *         </p>
     */
    public String getModelSelectionExpression() {
        return modelSelectionExpression;
    }

    /**
     * <p>
     * The model selection expression for the route. Supported only for
     * WebSocket APIs.
     * </p>
     *
     * @param modelSelectionExpression <p>
     *            The model selection expression for the route. Supported only
     *            for WebSocket APIs.
     *            </p>
     */
    public void setModelSelectionExpression(String modelSelectionExpression) {
        this.modelSelectionExpression = modelSelectionExpression;
    }

    /**
     * <p>
     * The model selection expression for the route. Supported only for
     * WebSocket APIs.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param modelSelectionExpression <p>
     *            The model selection expression for the route. Supported only
     *            for WebSocket APIs.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRouteRequest withModelSelectionExpression(String modelSelectionExpression) {
        this.modelSelectionExpression = modelSelectionExpression;
        return this;
    }

    /**
     * <p>
     * The operation name for the route.
     * </p>
     *
     * @return <p>
     *         The operation name for the route.
     *         </p>
     */
    public String getOperationName() {
        return operationName;
    }

    /**
     * <p>
     * The operation name for the route.
     * </p>
     *
     * @param operationName <p>
     *            The operation name for the route.
     *            </p>
     */
    public void setOperationName(String operationName) {
        this.operationName = operationName;
    }

    /**
     * <p>
     * The operation name for the route.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param operationName <p>
     *            The operation name for the route.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRouteRequest withOperationName(String operationName) {
        this.operationName = operationName;
        return this;
    }

    /**
     * <p>
     * The request models for the route. Supported only for WebSocket APIs.
     * </p>
     *
     * @return <p>
     *         The request models for the route. Supported only for WebSocket
     *         APIs.
     *         </p>
     */
    public java.util.Map<String, String> getRequestModels() {
        return requestModels;
    }

    /**
     * <p>
     * The request models for the route. Supported only for WebSocket APIs.
     * </p>
     *
     * @param requestModels <p>
     *            The request models for the route. Supported only for WebSocket
     *            APIs.
     *            </p>
     */
    public void setRequestModels(java.util.Map<String, String> requestModels) {
        this.requestModels = requestModels;
    }

    /**
     * <p>
     * The request models for the route. Supported only for WebSocket APIs.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param requestModels <p>
     *            The request models for the route. Supported only for WebSocket
     *            APIs.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRouteRequest withRequestModels(java.util.Map<String, String> requestModels) {
        this.requestModels = requestModels;
        return this;
    }

    /**
     * <p>
     * The request models for the route. Supported only for WebSocket APIs.
     * </p>
     * <p>
     * The method adds a new key-value pair into RequestModels parameter, and
     * returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param key The key of the entry to be added into RequestModels.
     * @param value The corresponding value of the entry to be added into
     *            RequestModels.
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRouteRequest addRequestModelsEntry(String key, String value) {
        if (null == this.requestModels) {
            this.requestModels = new java.util.HashMap<String, String>();
        }
        if (this.requestModels.containsKey(key))
            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
                    + ") are provided.");
        this.requestModels.put(key, value);
        return this;
    }

    /**
     * Removes all the entries added into RequestModels.
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     */
    public UpdateRouteRequest clearRequestModelsEntries() {
        this.requestModels = null;
        return this;
    }

    /**
     * <p>
     * The request parameters for the route. Supported only for WebSocket APIs.
     * </p>
     *
     * @return <p>
     *         The request parameters for the route. Supported only for
     *         WebSocket APIs.
     *         </p>
     */
    public java.util.Map<String, ParameterConstraints> getRequestParameters() {
        return requestParameters;
    }

    /**
     * <p>
     * The request parameters for the route. Supported only for WebSocket APIs.
     * </p>
     *
     * @param requestParameters <p>
     *            The request parameters for the route. Supported only for
     *            WebSocket APIs.
     *            </p>
     */
    public void setRequestParameters(java.util.Map<String, ParameterConstraints> requestParameters) {
        this.requestParameters = requestParameters;
    }

    /**
     * <p>
     * The request parameters for the route. Supported only for WebSocket APIs.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param requestParameters <p>
     *            The request parameters for the route. Supported only for
     *            WebSocket APIs.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRouteRequest withRequestParameters(
            java.util.Map<String, ParameterConstraints> requestParameters) {
        this.requestParameters = requestParameters;
        return this;
    }

    /**
     * <p>
     * The request parameters for the route. Supported only for WebSocket APIs.
     * </p>
     * <p>
     * The method adds a new key-value pair into RequestParameters parameter,
     * and returns a reference to this object so that method calls can be
     * chained together.
     *
     * @param key The key of the entry to be added into RequestParameters.
     * @param value The corresponding value of the entry to be added into
     *            RequestParameters.
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRouteRequest addRequestParametersEntry(String key, ParameterConstraints value) {
        if (null == this.requestParameters) {
            this.requestParameters = new java.util.HashMap<String, ParameterConstraints>();
        }
        if (this.requestParameters.containsKey(key))
            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
                    + ") are provided.");
        this.requestParameters.put(key, value);
        return this;
    }

    /**
     * Removes all the entries added into RequestParameters.
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     */
    public UpdateRouteRequest clearRequestParametersEntries() {
        this.requestParameters = null;
        return this;
    }

    /**
     * <p>
     * The route ID.
     * </p>
     *
     * @return <p>
     *         The route ID.
     *         </p>
     */
    public String getRouteId() {
        return routeId;
    }

    /**
     * <p>
     * The route ID.
     * </p>
     *
     * @param routeId <p>
     *            The route ID.
     *            </p>
     */
    public void setRouteId(String routeId) {
        this.routeId = routeId;
    }

    /**
     * <p>
     * The route ID.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param routeId <p>
     *            The route ID.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRouteRequest withRouteId(String routeId) {
        this.routeId = routeId;
        return this;
    }

    /**
     * <p>
     * The route key for the route.
     * </p>
     *
     * @return <p>
     *         The route key for the route.
     *         </p>
     */
    public String getRouteKey() {
        return routeKey;
    }

    /**
     * <p>
     * The route key for the route.
     * </p>
     *
     * @param routeKey <p>
     *            The route key for the route.
     *            </p>
     */
    public void setRouteKey(String routeKey) {
        this.routeKey = routeKey;
    }

    /**
     * <p>
     * The route key for the route.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param routeKey <p>
     *            The route key for the route.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRouteRequest withRouteKey(String routeKey) {
        this.routeKey = routeKey;
        return this;
    }

    /**
     * <p>
     * The route response selection expression for the route. Supported only for
     * WebSocket APIs.
     * </p>
     *
     * @return <p>
     *         The route response selection expression for the route. Supported
     *         only for WebSocket APIs.
     *         </p>
     */
    public String getRouteResponseSelectionExpression() {
        return routeResponseSelectionExpression;
    }

    /**
     * <p>
     * The route response selection expression for the route. Supported only for
     * WebSocket APIs.
     * </p>
     *
     * @param routeResponseSelectionExpression <p>
     *            The route response selection expression for the route.
     *            Supported only for WebSocket APIs.
     *            </p>
     */
    public void setRouteResponseSelectionExpression(String routeResponseSelectionExpression) {
        this.routeResponseSelectionExpression = routeResponseSelectionExpression;
    }

    /**
     * <p>
     * The route response selection expression for the route. Supported only for
     * WebSocket APIs.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param routeResponseSelectionExpression <p>
     *            The route response selection expression for the route.
     *            Supported only for WebSocket APIs.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRouteRequest withRouteResponseSelectionExpression(
            String routeResponseSelectionExpression) {
        this.routeResponseSelectionExpression = routeResponseSelectionExpression;
        return this;
    }

    /**
     * <p>
     * The target for the route.
     * </p>
     *
     * @return <p>
     *         The target for the route.
     *         </p>
     */
    public String getTarget() {
        return target;
    }

    /**
     * <p>
     * The target for the route.
     * </p>
     *
     * @param target <p>
     *            The target for the route.
     *            </p>
     */
    public void setTarget(String target) {
        this.target = target;
    }

    /**
     * <p>
     * The target for the route.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param target <p>
     *            The target for the route.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRouteRequest withTarget(String target) {
        this.target = target;
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and
     * debugging.
     *
     * @return A string representation of this object.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getApiId() != null)
            sb.append("ApiId: " + getApiId() + ",");
        if (getApiKeyRequired() != null)
            sb.append("ApiKeyRequired: " + getApiKeyRequired() + ",");
        if (getAuthorizationScopes() != null)
            sb.append("AuthorizationScopes: " + getAuthorizationScopes() + ",");
        if (getAuthorizationType() != null)
            sb.append("AuthorizationType: " + getAuthorizationType() + ",");
        if (getAuthorizerId() != null)
            sb.append("AuthorizerId: " + getAuthorizerId() + ",");
        if (getModelSelectionExpression() != null)
            sb.append("ModelSelectionExpression: " + getModelSelectionExpression() + ",");
        if (getOperationName() != null)
            sb.append("OperationName: " + getOperationName() + ",");
        if (getRequestModels() != null)
            sb.append("RequestModels: " + getRequestModels() + ",");
        if (getRequestParameters() != null)
            sb.append("RequestParameters: " + getRequestParameters() + ",");
        if (getRouteId() != null)
            sb.append("RouteId: " + getRouteId() + ",");
        if (getRouteKey() != null)
            sb.append("RouteKey: " + getRouteKey() + ",");
        if (getRouteResponseSelectionExpression() != null)
            sb.append("RouteResponseSelectionExpression: " + getRouteResponseSelectionExpression()
                    + ",");
        if (getTarget() != null)
            sb.append("Target: " + getTarget());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getApiId() == null) ? 0 : getApiId().hashCode());
        hashCode = prime * hashCode
                + ((getApiKeyRequired() == null) ? 0 : getApiKeyRequired().hashCode());
        hashCode = prime * hashCode
                + ((getAuthorizationScopes() == null) ? 0 : getAuthorizationScopes().hashCode());
        hashCode = prime * hashCode
                + ((getAuthorizationType() == null) ? 0 : getAuthorizationType().hashCode());
        hashCode = prime * hashCode
                + ((getAuthorizerId() == null) ? 0 : getAuthorizerId().hashCode());
        hashCode = prime
                * hashCode
                + ((getModelSelectionExpression() == null) ? 0 : getModelSelectionExpression()
                        .hashCode());
        hashCode = prime * hashCode
                + ((getOperationName() == null) ? 0 : getOperationName().hashCode());
        hashCode = prime * hashCode
                + ((getRequestModels() == null) ? 0 : getRequestModels().hashCode());
        hashCode = prime * hashCode
                + ((getRequestParameters() == null) ? 0 : getRequestParameters().hashCode());
        hashCode = prime * hashCode + ((getRouteId() == null) ? 0 : getRouteId().hashCode());
        hashCode = prime * hashCode + ((getRouteKey() == null) ? 0 : getRouteKey().hashCode());
        hashCode = prime
                * hashCode
                + ((getRouteResponseSelectionExpression() == null) ? 0
                        : getRouteResponseSelectionExpression().hashCode());
        hashCode = prime * hashCode + ((getTarget() == null) ? 0 : getTarget().hashCode());
        return hashCode;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof UpdateRouteRequest == false)
            return false;
        UpdateRouteRequest other = (UpdateRouteRequest) obj;

        if (other.getApiId() == null ^ this.getApiId() == null)
            return false;
        if (other.getApiId() != null && other.getApiId().equals(this.getApiId()) == false)
            return false;
        if (other.getApiKeyRequired() == null ^ this.getApiKeyRequired() == null)
            return false;
        if (other.getApiKeyRequired() != null
                && other.getApiKeyRequired().equals(this.getApiKeyRequired()) == false)
            return false;
        if (other.getAuthorizationScopes() == null ^ this.getAuthorizationScopes() == null)
            return false;
        if (other.getAuthorizationScopes() != null
                && other.getAuthorizationScopes().equals(this.getAuthorizationScopes()) == false)
            return false;
        if (other.getAuthorizationType() == null ^ this.getAuthorizationType() == null)
            return false;
        if (other.getAuthorizationType() != null
                && other.getAuthorizationType().equals(this.getAuthorizationType()) == false)
            return false;
        if (other.getAuthorizerId() == null ^ this.getAuthorizerId() == null)
            return false;
        if (other.getAuthorizerId() != null
                && other.getAuthorizerId().equals(this.getAuthorizerId()) == false)
            return false;
        if (other.getModelSelectionExpression() == null
                ^ this.getModelSelectionExpression() == null)
            return false;
        if (other.getModelSelectionExpression() != null
                && other.getModelSelectionExpression().equals(this.getModelSelectionExpression()) == false)
            return false;
        if (other.getOperationName() == null ^ this.getOperationName() == null)
            return false;
        if (other.getOperationName() != null
                && other.getOperationName().equals(this.getOperationName()) == false)
            return false;
        if (other.getRequestModels() == null ^ this.getRequestModels() == null)
            return false;
        if (other.getRequestModels() != null
                && other.getRequestModels().equals(this.getRequestModels()) == false)
            return false;
        if (other.getRequestParameters() == null ^ this.getRequestParameters() == null)
            return false;
        if (other.getRequestParameters() != null
                && other.getRequestParameters().equals(this.getRequestParameters()) == false)
            return false;
        if (other.getRouteId() == null ^ this.getRouteId() == null)
            return false;
        if (other.getRouteId() != null && other.getRouteId().equals(this.getRouteId()) == false)
            return false;
        if (other.getRouteKey() == null ^ this.getRouteKey() == null)
            return false;
        if (other.getRouteKey() != null && other.getRouteKey().equals(this.getRouteKey()) == false)
            return false;
        if (other.getRouteResponseSelectionExpression() == null
                ^ this.getRouteResponseSelectionExpression() == null)
            return false;
        if (other.getRouteResponseSelectionExpression() != null
                && other.getRouteResponseSelectionExpression().equals(
                        this.getRouteResponseSelectionExpression()) == false)
            return false;
        if (other.getTarget() == null ^ this.getTarget() == null)
            return false;
        if (other.getTarget() != null && other.getTarget().equals(this.getTarget()) == false)
            return false;
        return true;
    }
}
