/*
 * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amazonaws.services.logs.model;

import java.io.Serializable;

import com.amazonaws.AmazonWebServiceRequest;

/**
 * <p>
 * Returns a list of the fields that are included in log events in the specified
 * log group, along with the percentage of log events that contain each field.
 * The search is limited to a time period that you specify.
 * </p>
 * <p>
 * In the results, fields that start with @ are fields generated by CloudWatch
 * Logs. For example, <code>@timestamp</code> is the timestamp of each log
 * event. For more information about the fields that are generated by CloudWatch
 * logs, see <a href=
 * "https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html"
 * >Supported Logs and Discovered Fields</a>.
 * </p>
 * <p>
 * The response results are sorted by the frequency percentage, starting with
 * the highest percentage.
 * </p>
 */
public class GetLogGroupFieldsRequest extends AmazonWebServiceRequest implements Serializable {
    /**
     * <p>
     * The name of the log group to search.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 512<br/>
     * <b>Pattern: </b>[\.\-_/#A-Za-z0-9]+<br/>
     */
    private String logGroupName;

    /**
     * <p>
     * The time to set as the center of the query. If you specify
     * <code>time</code>, the 8 minutes before and 8 minutes after this time are
     * searched. If you omit <code>time</code>, the past 15 minutes are queried.
     * </p>
     * <p>
     * The <code>time</code> value is specified as epoch time, the number of
     * seconds since January 1, 1970, 00:00:00 UTC.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Range: </b>0 - <br/>
     */
    private Long time;

    /**
     * <p>
     * The name of the log group to search.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 512<br/>
     * <b>Pattern: </b>[\.\-_/#A-Za-z0-9]+<br/>
     *
     * @return <p>
     *         The name of the log group to search.
     *         </p>
     */
    public String getLogGroupName() {
        return logGroupName;
    }

    /**
     * <p>
     * The name of the log group to search.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 512<br/>
     * <b>Pattern: </b>[\.\-_/#A-Za-z0-9]+<br/>
     *
     * @param logGroupName <p>
     *            The name of the log group to search.
     *            </p>
     */
    public void setLogGroupName(String logGroupName) {
        this.logGroupName = logGroupName;
    }

    /**
     * <p>
     * The name of the log group to search.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 512<br/>
     * <b>Pattern: </b>[\.\-_/#A-Za-z0-9]+<br/>
     *
     * @param logGroupName <p>
     *            The name of the log group to search.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public GetLogGroupFieldsRequest withLogGroupName(String logGroupName) {
        this.logGroupName = logGroupName;
        return this;
    }

    /**
     * <p>
     * The time to set as the center of the query. If you specify
     * <code>time</code>, the 8 minutes before and 8 minutes after this time are
     * searched. If you omit <code>time</code>, the past 15 minutes are queried.
     * </p>
     * <p>
     * The <code>time</code> value is specified as epoch time, the number of
     * seconds since January 1, 1970, 00:00:00 UTC.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Range: </b>0 - <br/>
     *
     * @return <p>
     *         The time to set as the center of the query. If you specify
     *         <code>time</code>, the 8 minutes before and 8 minutes after this
     *         time are searched. If you omit <code>time</code>, the past 15
     *         minutes are queried.
     *         </p>
     *         <p>
     *         The <code>time</code> value is specified as epoch time, the
     *         number of seconds since January 1, 1970, 00:00:00 UTC.
     *         </p>
     */
    public Long getTime() {
        return time;
    }

    /**
     * <p>
     * The time to set as the center of the query. If you specify
     * <code>time</code>, the 8 minutes before and 8 minutes after this time are
     * searched. If you omit <code>time</code>, the past 15 minutes are queried.
     * </p>
     * <p>
     * The <code>time</code> value is specified as epoch time, the number of
     * seconds since January 1, 1970, 00:00:00 UTC.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Range: </b>0 - <br/>
     *
     * @param time <p>
     *            The time to set as the center of the query. If you specify
     *            <code>time</code>, the 8 minutes before and 8 minutes after
     *            this time are searched. If you omit <code>time</code>, the
     *            past 15 minutes are queried.
     *            </p>
     *            <p>
     *            The <code>time</code> value is specified as epoch time, the
     *            number of seconds since January 1, 1970, 00:00:00 UTC.
     *            </p>
     */
    public void setTime(Long time) {
        this.time = time;
    }

    /**
     * <p>
     * The time to set as the center of the query. If you specify
     * <code>time</code>, the 8 minutes before and 8 minutes after this time are
     * searched. If you omit <code>time</code>, the past 15 minutes are queried.
     * </p>
     * <p>
     * The <code>time</code> value is specified as epoch time, the number of
     * seconds since January 1, 1970, 00:00:00 UTC.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Range: </b>0 - <br/>
     *
     * @param time <p>
     *            The time to set as the center of the query. If you specify
     *            <code>time</code>, the 8 minutes before and 8 minutes after
     *            this time are searched. If you omit <code>time</code>, the
     *            past 15 minutes are queried.
     *            </p>
     *            <p>
     *            The <code>time</code> value is specified as epoch time, the
     *            number of seconds since January 1, 1970, 00:00:00 UTC.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public GetLogGroupFieldsRequest withTime(Long time) {
        this.time = time;
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and
     * debugging.
     *
     * @return A string representation of this object.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getLogGroupName() != null)
            sb.append("logGroupName: " + getLogGroupName() + ",");
        if (getTime() != null)
            sb.append("time: " + getTime());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode
                + ((getLogGroupName() == null) ? 0 : getLogGroupName().hashCode());
        hashCode = prime * hashCode + ((getTime() == null) ? 0 : getTime().hashCode());
        return hashCode;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof GetLogGroupFieldsRequest == false)
            return false;
        GetLogGroupFieldsRequest other = (GetLogGroupFieldsRequest) obj;

        if (other.getLogGroupName() == null ^ this.getLogGroupName() == null)
            return false;
        if (other.getLogGroupName() != null
                && other.getLogGroupName().equals(this.getLogGroupName()) == false)
            return false;
        if (other.getTime() == null ^ this.getTime() == null)
            return false;
        if (other.getTime() != null && other.getTime().equals(this.getTime()) == false)
            return false;
        return true;
    }
}
