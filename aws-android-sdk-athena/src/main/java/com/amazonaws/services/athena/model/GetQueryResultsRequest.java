/*
 * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amazonaws.services.athena.model;

import java.io.Serializable;

import com.amazonaws.AmazonWebServiceRequest;

/**
 * <p>
 * Streams the results of a single query execution specified by
 * <code>QueryExecutionId</code> from the Athena query results location in
 * Amazon S3. For more information, see <a
 * href="https://docs.aws.amazon.com/athena/latest/ug/querying.html">Query
 * Results</a> in the <i>Amazon Athena User Guide</i>. This request does not
 * execute the query but returns results. Use <a>StartQueryExecution</a> to run
 * a query.
 * </p>
 * <p>
 * To stream query results successfully, the IAM principal with permission to
 * call <code>GetQueryResults</code> also must have permissions to the Amazon S3
 * <code>GetObject</code> action for the Athena query results location.
 * </p>
 * <important>
 * <p>
 * IAM principals with permission to the Amazon S3 <code>GetObject</code> action
 * for the query results location are able to retrieve query results from Amazon
 * S3 even if permission to the <code>GetQueryResults</code> action is denied.
 * To restrict user or role access, ensure that Amazon S3 permissions to the
 * Athena query location are denied.
 * </p>
 * </important>
 */
public class GetQueryResultsRequest extends AmazonWebServiceRequest implements Serializable {
    /**
     * <p>
     * The unique ID of the query execution.
     * </p>
     */
    private String queryExecutionId;

    /**
     * <p>
     * A token generated by the Athena service that specifies where to continue
     * pagination if a previous request was truncated. To obtain the next set of
     * pages, pass in the <code>NextToken</code> from the response object of the
     * previous page call.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 1024<br/>
     */
    private String nextToken;

    /**
     * <p>
     * The maximum number of results (rows) to return in this request.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Range: </b>1 - 1000<br/>
     */
    private Integer maxResults;

    /**
     * <p>
     * The unique ID of the query execution.
     * </p>
     *
     * @return <p>
     *         The unique ID of the query execution.
     *         </p>
     */
    public String getQueryExecutionId() {
        return queryExecutionId;
    }

    /**
     * <p>
     * The unique ID of the query execution.
     * </p>
     *
     * @param queryExecutionId <p>
     *            The unique ID of the query execution.
     *            </p>
     */
    public void setQueryExecutionId(String queryExecutionId) {
        this.queryExecutionId = queryExecutionId;
    }

    /**
     * <p>
     * The unique ID of the query execution.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param queryExecutionId <p>
     *            The unique ID of the query execution.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public GetQueryResultsRequest withQueryExecutionId(String queryExecutionId) {
        this.queryExecutionId = queryExecutionId;
        return this;
    }

    /**
     * <p>
     * A token generated by the Athena service that specifies where to continue
     * pagination if a previous request was truncated. To obtain the next set of
     * pages, pass in the <code>NextToken</code> from the response object of the
     * previous page call.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 1024<br/>
     *
     * @return <p>
     *         A token generated by the Athena service that specifies where to
     *         continue pagination if a previous request was truncated. To
     *         obtain the next set of pages, pass in the <code>NextToken</code>
     *         from the response object of the previous page call.
     *         </p>
     */
    public String getNextToken() {
        return nextToken;
    }

    /**
     * <p>
     * A token generated by the Athena service that specifies where to continue
     * pagination if a previous request was truncated. To obtain the next set of
     * pages, pass in the <code>NextToken</code> from the response object of the
     * previous page call.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 1024<br/>
     *
     * @param nextToken <p>
     *            A token generated by the Athena service that specifies where
     *            to continue pagination if a previous request was truncated. To
     *            obtain the next set of pages, pass in the
     *            <code>NextToken</code> from the response object of the
     *            previous page call.
     *            </p>
     */
    public void setNextToken(String nextToken) {
        this.nextToken = nextToken;
    }

    /**
     * <p>
     * A token generated by the Athena service that specifies where to continue
     * pagination if a previous request was truncated. To obtain the next set of
     * pages, pass in the <code>NextToken</code> from the response object of the
     * previous page call.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 1024<br/>
     *
     * @param nextToken <p>
     *            A token generated by the Athena service that specifies where
     *            to continue pagination if a previous request was truncated. To
     *            obtain the next set of pages, pass in the
     *            <code>NextToken</code> from the response object of the
     *            previous page call.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public GetQueryResultsRequest withNextToken(String nextToken) {
        this.nextToken = nextToken;
        return this;
    }

    /**
     * <p>
     * The maximum number of results (rows) to return in this request.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Range: </b>1 - 1000<br/>
     *
     * @return <p>
     *         The maximum number of results (rows) to return in this request.
     *         </p>
     */
    public Integer getMaxResults() {
        return maxResults;
    }

    /**
     * <p>
     * The maximum number of results (rows) to return in this request.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Range: </b>1 - 1000<br/>
     *
     * @param maxResults <p>
     *            The maximum number of results (rows) to return in this
     *            request.
     *            </p>
     */
    public void setMaxResults(Integer maxResults) {
        this.maxResults = maxResults;
    }

    /**
     * <p>
     * The maximum number of results (rows) to return in this request.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Range: </b>1 - 1000<br/>
     *
     * @param maxResults <p>
     *            The maximum number of results (rows) to return in this
     *            request.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public GetQueryResultsRequest withMaxResults(Integer maxResults) {
        this.maxResults = maxResults;
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and
     * debugging.
     *
     * @return A string representation of this object.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getQueryExecutionId() != null)
            sb.append("QueryExecutionId: " + getQueryExecutionId() + ",");
        if (getNextToken() != null)
            sb.append("NextToken: " + getNextToken() + ",");
        if (getMaxResults() != null)
            sb.append("MaxResults: " + getMaxResults());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode
                + ((getQueryExecutionId() == null) ? 0 : getQueryExecutionId().hashCode());
        hashCode = prime * hashCode + ((getNextToken() == null) ? 0 : getNextToken().hashCode());
        hashCode = prime * hashCode + ((getMaxResults() == null) ? 0 : getMaxResults().hashCode());
        return hashCode;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof GetQueryResultsRequest == false)
            return false;
        GetQueryResultsRequest other = (GetQueryResultsRequest) obj;

        if (other.getQueryExecutionId() == null ^ this.getQueryExecutionId() == null)
            return false;
        if (other.getQueryExecutionId() != null
                && other.getQueryExecutionId().equals(this.getQueryExecutionId()) == false)
            return false;
        if (other.getNextToken() == null ^ this.getNextToken() == null)
            return false;
        if (other.getNextToken() != null
                && other.getNextToken().equals(this.getNextToken()) == false)
            return false;
        if (other.getMaxResults() == null ^ this.getMaxResults() == null)
            return false;
        if (other.getMaxResults() != null
                && other.getMaxResults().equals(this.getMaxResults()) == false)
            return false;
        return true;
    }
}
