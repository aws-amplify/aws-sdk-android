/*
 * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amazonaws.services.awstransferfamily.model;

import java.io.Serializable;

import com.amazonaws.AmazonWebServiceRequest;

/**
 * <p>
 * Instantiates an autoscaling virtual server based on the selected file
 * transfer protocol in AWS. When you make updates to your file transfer
 * protocol-enabled server or when you work with users, use the
 * service-generated <code>ServerId</code> property that is assigned to the
 * newly created server.
 * </p>
 */
public class CreateServerRequest extends AmazonWebServiceRequest implements Serializable {
    /**
     * <p>
     * The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM)
     * certificate. Required when <code>Protocols</code> is set to
     * <code>FTPS</code>.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b> - 1600<br/>
     */
    private String certificate;

    /**
     * <p>
     * The virtual private cloud (VPC) endpoint settings that are configured for
     * your file transfer protocol-enabled server. When you host your endpoint
     * within your VPC, you can make it accessible only to resources within your
     * VPC, or you can attach Elastic IPs and make it accessible to clients over
     * the internet. Your VPC's default security groups are automatically
     * assigned to your endpoint.
     * </p>
     */
    private EndpointDetails endpointDetails;

    /**
     * <p>
     * The type of VPC endpoint that you want your file transfer
     * protocol-enabled server to connect to. You can choose to connect to the
     * public internet or a virtual private cloud (VPC) endpoint. With a VPC
     * endpoint, you can restrict access to your server and resources only
     * within your VPC.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>PUBLIC, VPC, VPC_ENDPOINT
     */
    private String endpointType;

    /**
     * <p>
     * The RSA private key as generated by the
     * <code>ssh-keygen -N "" -f my-new-server-key</code> command.
     * </p>
     * <important>
     * <p>
     * If you aren't planning to migrate existing users from an existing
     * SFTP-enabled server to a new server, don't update the host key.
     * Accidentally changing a server's host key can be disruptive.
     * </p>
     * </important>
     * <p>
     * For more information, see <a href=
     * "https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key"
     * >Changing the Host Key for Your AWS Transfer Family Server</a> in the
     * <i>AWS Transfer Family User Guide</i>.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b> - 4096<br/>
     */
    private String hostKey;

    /**
     * <p>
     * Required when <code>IdentityProviderType</code> is set to
     * <code>API_GATEWAY</code>. Accepts an array containing all of the
     * information required to call a customer-supplied authentication API,
     * including the API Gateway URL. Not required when
     * <code>IdentityProviderType</code> is set to <code>SERVICE_MANAGED</code>.
     * </p>
     */
    private IdentityProviderDetails identityProviderDetails;

    /**
     * <p>
     * Specifies the mode of authentication for a file transfer protocol-enabled
     * server. The default value is <code>SERVICE_MANAGED</code>, which allows
     * you to store and access user credentials within the AWS Transfer Family
     * service. Use the <code>API_GATEWAY</code> value to integrate with an
     * identity provider of your choosing. The <code>API_GATEWAY</code> setting
     * requires you to provide an API Gateway endpoint URL to call for
     * authentication using the <code>IdentityProviderDetails</code> parameter.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>SERVICE_MANAGED, API_GATEWAY
     */
    private String identityProviderType;

    /**
     * <p>
     * Allows the service to write your users' activity to your Amazon
     * CloudWatch logs for monitoring and auditing purposes.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>20 - 2048<br/>
     * <b>Pattern: </b>arn:.*role/.*<br/>
     */
    private String loggingRole;

    /**
     * <p>
     * Specifies the file transfer protocol or protocols over which your file
     * transfer protocol client can connect to your server's endpoint. The
     * available protocols are:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol (FTP): Unencrypted file transfer
     * </p>
     * </li>
     * </ul>
     */
    private java.util.List<String> protocols;

    /**
     * <p>
     * Key-value pairs that can be used to group and search for file transfer
     * protocol-enabled servers.
     * </p>
     */
    private java.util.List<Tag> tags;

    /**
     * <p>
     * The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM)
     * certificate. Required when <code>Protocols</code> is set to
     * <code>FTPS</code>.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b> - 1600<br/>
     *
     * @return <p>
     *         The Amazon Resource Name (ARN) of the AWS Certificate Manager
     *         (ACM) certificate. Required when <code>Protocols</code> is set to
     *         <code>FTPS</code>.
     *         </p>
     */
    public String getCertificate() {
        return certificate;
    }

    /**
     * <p>
     * The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM)
     * certificate. Required when <code>Protocols</code> is set to
     * <code>FTPS</code>.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b> - 1600<br/>
     *
     * @param certificate <p>
     *            The Amazon Resource Name (ARN) of the AWS Certificate Manager
     *            (ACM) certificate. Required when <code>Protocols</code> is set
     *            to <code>FTPS</code>.
     *            </p>
     */
    public void setCertificate(String certificate) {
        this.certificate = certificate;
    }

    /**
     * <p>
     * The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM)
     * certificate. Required when <code>Protocols</code> is set to
     * <code>FTPS</code>.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b> - 1600<br/>
     *
     * @param certificate <p>
     *            The Amazon Resource Name (ARN) of the AWS Certificate Manager
     *            (ACM) certificate. Required when <code>Protocols</code> is set
     *            to <code>FTPS</code>.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateServerRequest withCertificate(String certificate) {
        this.certificate = certificate;
        return this;
    }

    /**
     * <p>
     * The virtual private cloud (VPC) endpoint settings that are configured for
     * your file transfer protocol-enabled server. When you host your endpoint
     * within your VPC, you can make it accessible only to resources within your
     * VPC, or you can attach Elastic IPs and make it accessible to clients over
     * the internet. Your VPC's default security groups are automatically
     * assigned to your endpoint.
     * </p>
     *
     * @return <p>
     *         The virtual private cloud (VPC) endpoint settings that are
     *         configured for your file transfer protocol-enabled server. When
     *         you host your endpoint within your VPC, you can make it
     *         accessible only to resources within your VPC, or you can attach
     *         Elastic IPs and make it accessible to clients over the internet.
     *         Your VPC's default security groups are automatically assigned to
     *         your endpoint.
     *         </p>
     */
    public EndpointDetails getEndpointDetails() {
        return endpointDetails;
    }

    /**
     * <p>
     * The virtual private cloud (VPC) endpoint settings that are configured for
     * your file transfer protocol-enabled server. When you host your endpoint
     * within your VPC, you can make it accessible only to resources within your
     * VPC, or you can attach Elastic IPs and make it accessible to clients over
     * the internet. Your VPC's default security groups are automatically
     * assigned to your endpoint.
     * </p>
     *
     * @param endpointDetails <p>
     *            The virtual private cloud (VPC) endpoint settings that are
     *            configured for your file transfer protocol-enabled server.
     *            When you host your endpoint within your VPC, you can make it
     *            accessible only to resources within your VPC, or you can
     *            attach Elastic IPs and make it accessible to clients over the
     *            internet. Your VPC's default security groups are automatically
     *            assigned to your endpoint.
     *            </p>
     */
    public void setEndpointDetails(EndpointDetails endpointDetails) {
        this.endpointDetails = endpointDetails;
    }

    /**
     * <p>
     * The virtual private cloud (VPC) endpoint settings that are configured for
     * your file transfer protocol-enabled server. When you host your endpoint
     * within your VPC, you can make it accessible only to resources within your
     * VPC, or you can attach Elastic IPs and make it accessible to clients over
     * the internet. Your VPC's default security groups are automatically
     * assigned to your endpoint.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param endpointDetails <p>
     *            The virtual private cloud (VPC) endpoint settings that are
     *            configured for your file transfer protocol-enabled server.
     *            When you host your endpoint within your VPC, you can make it
     *            accessible only to resources within your VPC, or you can
     *            attach Elastic IPs and make it accessible to clients over the
     *            internet. Your VPC's default security groups are automatically
     *            assigned to your endpoint.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateServerRequest withEndpointDetails(EndpointDetails endpointDetails) {
        this.endpointDetails = endpointDetails;
        return this;
    }

    /**
     * <p>
     * The type of VPC endpoint that you want your file transfer
     * protocol-enabled server to connect to. You can choose to connect to the
     * public internet or a virtual private cloud (VPC) endpoint. With a VPC
     * endpoint, you can restrict access to your server and resources only
     * within your VPC.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>PUBLIC, VPC, VPC_ENDPOINT
     *
     * @return <p>
     *         The type of VPC endpoint that you want your file transfer
     *         protocol-enabled server to connect to. You can choose to connect
     *         to the public internet or a virtual private cloud (VPC) endpoint.
     *         With a VPC endpoint, you can restrict access to your server and
     *         resources only within your VPC.
     *         </p>
     * @see EndpointType
     */
    public String getEndpointType() {
        return endpointType;
    }

    /**
     * <p>
     * The type of VPC endpoint that you want your file transfer
     * protocol-enabled server to connect to. You can choose to connect to the
     * public internet or a virtual private cloud (VPC) endpoint. With a VPC
     * endpoint, you can restrict access to your server and resources only
     * within your VPC.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>PUBLIC, VPC, VPC_ENDPOINT
     *
     * @param endpointType <p>
     *            The type of VPC endpoint that you want your file transfer
     *            protocol-enabled server to connect to. You can choose to
     *            connect to the public internet or a virtual private cloud
     *            (VPC) endpoint. With a VPC endpoint, you can restrict access
     *            to your server and resources only within your VPC.
     *            </p>
     * @see EndpointType
     */
    public void setEndpointType(String endpointType) {
        this.endpointType = endpointType;
    }

    /**
     * <p>
     * The type of VPC endpoint that you want your file transfer
     * protocol-enabled server to connect to. You can choose to connect to the
     * public internet or a virtual private cloud (VPC) endpoint. With a VPC
     * endpoint, you can restrict access to your server and resources only
     * within your VPC.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>PUBLIC, VPC, VPC_ENDPOINT
     *
     * @param endpointType <p>
     *            The type of VPC endpoint that you want your file transfer
     *            protocol-enabled server to connect to. You can choose to
     *            connect to the public internet or a virtual private cloud
     *            (VPC) endpoint. With a VPC endpoint, you can restrict access
     *            to your server and resources only within your VPC.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     * @see EndpointType
     */
    public CreateServerRequest withEndpointType(String endpointType) {
        this.endpointType = endpointType;
        return this;
    }

    /**
     * <p>
     * The type of VPC endpoint that you want your file transfer
     * protocol-enabled server to connect to. You can choose to connect to the
     * public internet or a virtual private cloud (VPC) endpoint. With a VPC
     * endpoint, you can restrict access to your server and resources only
     * within your VPC.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>PUBLIC, VPC, VPC_ENDPOINT
     *
     * @param endpointType <p>
     *            The type of VPC endpoint that you want your file transfer
     *            protocol-enabled server to connect to. You can choose to
     *            connect to the public internet or a virtual private cloud
     *            (VPC) endpoint. With a VPC endpoint, you can restrict access
     *            to your server and resources only within your VPC.
     *            </p>
     * @see EndpointType
     */
    public void setEndpointType(EndpointType endpointType) {
        this.endpointType = endpointType.toString();
    }

    /**
     * <p>
     * The type of VPC endpoint that you want your file transfer
     * protocol-enabled server to connect to. You can choose to connect to the
     * public internet or a virtual private cloud (VPC) endpoint. With a VPC
     * endpoint, you can restrict access to your server and resources only
     * within your VPC.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>PUBLIC, VPC, VPC_ENDPOINT
     *
     * @param endpointType <p>
     *            The type of VPC endpoint that you want your file transfer
     *            protocol-enabled server to connect to. You can choose to
     *            connect to the public internet or a virtual private cloud
     *            (VPC) endpoint. With a VPC endpoint, you can restrict access
     *            to your server and resources only within your VPC.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     * @see EndpointType
     */
    public CreateServerRequest withEndpointType(EndpointType endpointType) {
        this.endpointType = endpointType.toString();
        return this;
    }

    /**
     * <p>
     * The RSA private key as generated by the
     * <code>ssh-keygen -N "" -f my-new-server-key</code> command.
     * </p>
     * <important>
     * <p>
     * If you aren't planning to migrate existing users from an existing
     * SFTP-enabled server to a new server, don't update the host key.
     * Accidentally changing a server's host key can be disruptive.
     * </p>
     * </important>
     * <p>
     * For more information, see <a href=
     * "https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key"
     * >Changing the Host Key for Your AWS Transfer Family Server</a> in the
     * <i>AWS Transfer Family User Guide</i>.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b> - 4096<br/>
     *
     * @return <p>
     *         The RSA private key as generated by the
     *         <code>ssh-keygen -N "" -f my-new-server-key</code> command.
     *         </p>
     *         <important>
     *         <p>
     *         If you aren't planning to migrate existing users from an existing
     *         SFTP-enabled server to a new server, don't update the host key.
     *         Accidentally changing a server's host key can be disruptive.
     *         </p>
     *         </important>
     *         <p>
     *         For more information, see <a href=
     *         "https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key"
     *         >Changing the Host Key for Your AWS Transfer Family Server</a> in
     *         the <i>AWS Transfer Family User Guide</i>.
     *         </p>
     */
    public String getHostKey() {
        return hostKey;
    }

    /**
     * <p>
     * The RSA private key as generated by the
     * <code>ssh-keygen -N "" -f my-new-server-key</code> command.
     * </p>
     * <important>
     * <p>
     * If you aren't planning to migrate existing users from an existing
     * SFTP-enabled server to a new server, don't update the host key.
     * Accidentally changing a server's host key can be disruptive.
     * </p>
     * </important>
     * <p>
     * For more information, see <a href=
     * "https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key"
     * >Changing the Host Key for Your AWS Transfer Family Server</a> in the
     * <i>AWS Transfer Family User Guide</i>.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b> - 4096<br/>
     *
     * @param hostKey <p>
     *            The RSA private key as generated by the
     *            <code>ssh-keygen -N "" -f my-new-server-key</code> command.
     *            </p>
     *            <important>
     *            <p>
     *            If you aren't planning to migrate existing users from an
     *            existing SFTP-enabled server to a new server, don't update the
     *            host key. Accidentally changing a server's host key can be
     *            disruptive.
     *            </p>
     *            </important>
     *            <p>
     *            For more information, see <a href=
     *            "https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key"
     *            >Changing the Host Key for Your AWS Transfer Family Server</a>
     *            in the <i>AWS Transfer Family User Guide</i>.
     *            </p>
     */
    public void setHostKey(String hostKey) {
        this.hostKey = hostKey;
    }

    /**
     * <p>
     * The RSA private key as generated by the
     * <code>ssh-keygen -N "" -f my-new-server-key</code> command.
     * </p>
     * <important>
     * <p>
     * If you aren't planning to migrate existing users from an existing
     * SFTP-enabled server to a new server, don't update the host key.
     * Accidentally changing a server's host key can be disruptive.
     * </p>
     * </important>
     * <p>
     * For more information, see <a href=
     * "https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key"
     * >Changing the Host Key for Your AWS Transfer Family Server</a> in the
     * <i>AWS Transfer Family User Guide</i>.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b> - 4096<br/>
     *
     * @param hostKey <p>
     *            The RSA private key as generated by the
     *            <code>ssh-keygen -N "" -f my-new-server-key</code> command.
     *            </p>
     *            <important>
     *            <p>
     *            If you aren't planning to migrate existing users from an
     *            existing SFTP-enabled server to a new server, don't update the
     *            host key. Accidentally changing a server's host key can be
     *            disruptive.
     *            </p>
     *            </important>
     *            <p>
     *            For more information, see <a href=
     *            "https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key"
     *            >Changing the Host Key for Your AWS Transfer Family Server</a>
     *            in the <i>AWS Transfer Family User Guide</i>.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateServerRequest withHostKey(String hostKey) {
        this.hostKey = hostKey;
        return this;
    }

    /**
     * <p>
     * Required when <code>IdentityProviderType</code> is set to
     * <code>API_GATEWAY</code>. Accepts an array containing all of the
     * information required to call a customer-supplied authentication API,
     * including the API Gateway URL. Not required when
     * <code>IdentityProviderType</code> is set to <code>SERVICE_MANAGED</code>.
     * </p>
     *
     * @return <p>
     *         Required when <code>IdentityProviderType</code> is set to
     *         <code>API_GATEWAY</code>. Accepts an array containing all of the
     *         information required to call a customer-supplied authentication
     *         API, including the API Gateway URL. Not required when
     *         <code>IdentityProviderType</code> is set to
     *         <code>SERVICE_MANAGED</code>.
     *         </p>
     */
    public IdentityProviderDetails getIdentityProviderDetails() {
        return identityProviderDetails;
    }

    /**
     * <p>
     * Required when <code>IdentityProviderType</code> is set to
     * <code>API_GATEWAY</code>. Accepts an array containing all of the
     * information required to call a customer-supplied authentication API,
     * including the API Gateway URL. Not required when
     * <code>IdentityProviderType</code> is set to <code>SERVICE_MANAGED</code>.
     * </p>
     *
     * @param identityProviderDetails <p>
     *            Required when <code>IdentityProviderType</code> is set to
     *            <code>API_GATEWAY</code>. Accepts an array containing all of
     *            the information required to call a customer-supplied
     *            authentication API, including the API Gateway URL. Not
     *            required when <code>IdentityProviderType</code> is set to
     *            <code>SERVICE_MANAGED</code>.
     *            </p>
     */
    public void setIdentityProviderDetails(IdentityProviderDetails identityProviderDetails) {
        this.identityProviderDetails = identityProviderDetails;
    }

    /**
     * <p>
     * Required when <code>IdentityProviderType</code> is set to
     * <code>API_GATEWAY</code>. Accepts an array containing all of the
     * information required to call a customer-supplied authentication API,
     * including the API Gateway URL. Not required when
     * <code>IdentityProviderType</code> is set to <code>SERVICE_MANAGED</code>.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param identityProviderDetails <p>
     *            Required when <code>IdentityProviderType</code> is set to
     *            <code>API_GATEWAY</code>. Accepts an array containing all of
     *            the information required to call a customer-supplied
     *            authentication API, including the API Gateway URL. Not
     *            required when <code>IdentityProviderType</code> is set to
     *            <code>SERVICE_MANAGED</code>.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateServerRequest withIdentityProviderDetails(
            IdentityProviderDetails identityProviderDetails) {
        this.identityProviderDetails = identityProviderDetails;
        return this;
    }

    /**
     * <p>
     * Specifies the mode of authentication for a file transfer protocol-enabled
     * server. The default value is <code>SERVICE_MANAGED</code>, which allows
     * you to store and access user credentials within the AWS Transfer Family
     * service. Use the <code>API_GATEWAY</code> value to integrate with an
     * identity provider of your choosing. The <code>API_GATEWAY</code> setting
     * requires you to provide an API Gateway endpoint URL to call for
     * authentication using the <code>IdentityProviderDetails</code> parameter.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>SERVICE_MANAGED, API_GATEWAY
     *
     * @return <p>
     *         Specifies the mode of authentication for a file transfer
     *         protocol-enabled server. The default value is
     *         <code>SERVICE_MANAGED</code>, which allows you to store and
     *         access user credentials within the AWS Transfer Family service.
     *         Use the <code>API_GATEWAY</code> value to integrate with an
     *         identity provider of your choosing. The <code>API_GATEWAY</code>
     *         setting requires you to provide an API Gateway endpoint URL to
     *         call for authentication using the
     *         <code>IdentityProviderDetails</code> parameter.
     *         </p>
     * @see IdentityProviderType
     */
    public String getIdentityProviderType() {
        return identityProviderType;
    }

    /**
     * <p>
     * Specifies the mode of authentication for a file transfer protocol-enabled
     * server. The default value is <code>SERVICE_MANAGED</code>, which allows
     * you to store and access user credentials within the AWS Transfer Family
     * service. Use the <code>API_GATEWAY</code> value to integrate with an
     * identity provider of your choosing. The <code>API_GATEWAY</code> setting
     * requires you to provide an API Gateway endpoint URL to call for
     * authentication using the <code>IdentityProviderDetails</code> parameter.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>SERVICE_MANAGED, API_GATEWAY
     *
     * @param identityProviderType <p>
     *            Specifies the mode of authentication for a file transfer
     *            protocol-enabled server. The default value is
     *            <code>SERVICE_MANAGED</code>, which allows you to store and
     *            access user credentials within the AWS Transfer Family
     *            service. Use the <code>API_GATEWAY</code> value to integrate
     *            with an identity provider of your choosing. The
     *            <code>API_GATEWAY</code> setting requires you to provide an
     *            API Gateway endpoint URL to call for authentication using the
     *            <code>IdentityProviderDetails</code> parameter.
     *            </p>
     * @see IdentityProviderType
     */
    public void setIdentityProviderType(String identityProviderType) {
        this.identityProviderType = identityProviderType;
    }

    /**
     * <p>
     * Specifies the mode of authentication for a file transfer protocol-enabled
     * server. The default value is <code>SERVICE_MANAGED</code>, which allows
     * you to store and access user credentials within the AWS Transfer Family
     * service. Use the <code>API_GATEWAY</code> value to integrate with an
     * identity provider of your choosing. The <code>API_GATEWAY</code> setting
     * requires you to provide an API Gateway endpoint URL to call for
     * authentication using the <code>IdentityProviderDetails</code> parameter.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>SERVICE_MANAGED, API_GATEWAY
     *
     * @param identityProviderType <p>
     *            Specifies the mode of authentication for a file transfer
     *            protocol-enabled server. The default value is
     *            <code>SERVICE_MANAGED</code>, which allows you to store and
     *            access user credentials within the AWS Transfer Family
     *            service. Use the <code>API_GATEWAY</code> value to integrate
     *            with an identity provider of your choosing. The
     *            <code>API_GATEWAY</code> setting requires you to provide an
     *            API Gateway endpoint URL to call for authentication using the
     *            <code>IdentityProviderDetails</code> parameter.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     * @see IdentityProviderType
     */
    public CreateServerRequest withIdentityProviderType(String identityProviderType) {
        this.identityProviderType = identityProviderType;
        return this;
    }

    /**
     * <p>
     * Specifies the mode of authentication for a file transfer protocol-enabled
     * server. The default value is <code>SERVICE_MANAGED</code>, which allows
     * you to store and access user credentials within the AWS Transfer Family
     * service. Use the <code>API_GATEWAY</code> value to integrate with an
     * identity provider of your choosing. The <code>API_GATEWAY</code> setting
     * requires you to provide an API Gateway endpoint URL to call for
     * authentication using the <code>IdentityProviderDetails</code> parameter.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>SERVICE_MANAGED, API_GATEWAY
     *
     * @param identityProviderType <p>
     *            Specifies the mode of authentication for a file transfer
     *            protocol-enabled server. The default value is
     *            <code>SERVICE_MANAGED</code>, which allows you to store and
     *            access user credentials within the AWS Transfer Family
     *            service. Use the <code>API_GATEWAY</code> value to integrate
     *            with an identity provider of your choosing. The
     *            <code>API_GATEWAY</code> setting requires you to provide an
     *            API Gateway endpoint URL to call for authentication using the
     *            <code>IdentityProviderDetails</code> parameter.
     *            </p>
     * @see IdentityProviderType
     */
    public void setIdentityProviderType(IdentityProviderType identityProviderType) {
        this.identityProviderType = identityProviderType.toString();
    }

    /**
     * <p>
     * Specifies the mode of authentication for a file transfer protocol-enabled
     * server. The default value is <code>SERVICE_MANAGED</code>, which allows
     * you to store and access user credentials within the AWS Transfer Family
     * service. Use the <code>API_GATEWAY</code> value to integrate with an
     * identity provider of your choosing. The <code>API_GATEWAY</code> setting
     * requires you to provide an API Gateway endpoint URL to call for
     * authentication using the <code>IdentityProviderDetails</code> parameter.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Allowed Values: </b>SERVICE_MANAGED, API_GATEWAY
     *
     * @param identityProviderType <p>
     *            Specifies the mode of authentication for a file transfer
     *            protocol-enabled server. The default value is
     *            <code>SERVICE_MANAGED</code>, which allows you to store and
     *            access user credentials within the AWS Transfer Family
     *            service. Use the <code>API_GATEWAY</code> value to integrate
     *            with an identity provider of your choosing. The
     *            <code>API_GATEWAY</code> setting requires you to provide an
     *            API Gateway endpoint URL to call for authentication using the
     *            <code>IdentityProviderDetails</code> parameter.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     * @see IdentityProviderType
     */
    public CreateServerRequest withIdentityProviderType(IdentityProviderType identityProviderType) {
        this.identityProviderType = identityProviderType.toString();
        return this;
    }

    /**
     * <p>
     * Allows the service to write your users' activity to your Amazon
     * CloudWatch logs for monitoring and auditing purposes.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>20 - 2048<br/>
     * <b>Pattern: </b>arn:.*role/.*<br/>
     *
     * @return <p>
     *         Allows the service to write your users' activity to your Amazon
     *         CloudWatch logs for monitoring and auditing purposes.
     *         </p>
     */
    public String getLoggingRole() {
        return loggingRole;
    }

    /**
     * <p>
     * Allows the service to write your users' activity to your Amazon
     * CloudWatch logs for monitoring and auditing purposes.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>20 - 2048<br/>
     * <b>Pattern: </b>arn:.*role/.*<br/>
     *
     * @param loggingRole <p>
     *            Allows the service to write your users' activity to your
     *            Amazon CloudWatch logs for monitoring and auditing purposes.
     *            </p>
     */
    public void setLoggingRole(String loggingRole) {
        this.loggingRole = loggingRole;
    }

    /**
     * <p>
     * Allows the service to write your users' activity to your Amazon
     * CloudWatch logs for monitoring and auditing purposes.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>20 - 2048<br/>
     * <b>Pattern: </b>arn:.*role/.*<br/>
     *
     * @param loggingRole <p>
     *            Allows the service to write your users' activity to your
     *            Amazon CloudWatch logs for monitoring and auditing purposes.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateServerRequest withLoggingRole(String loggingRole) {
        this.loggingRole = loggingRole;
        return this;
    }

    /**
     * <p>
     * Specifies the file transfer protocol or protocols over which your file
     * transfer protocol client can connect to your server's endpoint. The
     * available protocols are:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol (FTP): Unencrypted file transfer
     * </p>
     * </li>
     * </ul>
     *
     * @return <p>
     *         Specifies the file transfer protocol or protocols over which your
     *         file transfer protocol client can connect to your server's
     *         endpoint. The available protocols are:
     *         </p>
     *         <ul>
     *         <li>
     *         <p>
     *         Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer
     *         over SSH
     *         </p>
     *         </li>
     *         <li>
     *         <p>
     *         File Transfer Protocol Secure (FTPS): File transfer with TLS
     *         encryption
     *         </p>
     *         </li>
     *         <li>
     *         <p>
     *         File Transfer Protocol (FTP): Unencrypted file transfer
     *         </p>
     *         </li>
     *         </ul>
     */
    public java.util.List<String> getProtocols() {
        return protocols;
    }

    /**
     * <p>
     * Specifies the file transfer protocol or protocols over which your file
     * transfer protocol client can connect to your server's endpoint. The
     * available protocols are:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol (FTP): Unencrypted file transfer
     * </p>
     * </li>
     * </ul>
     *
     * @param protocols <p>
     *            Specifies the file transfer protocol or protocols over which
     *            your file transfer protocol client can connect to your
     *            server's endpoint. The available protocols are:
     *            </p>
     *            <ul>
     *            <li>
     *            <p>
     *            Secure Shell (SSH) File Transfer Protocol (SFTP): File
     *            transfer over SSH
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            File Transfer Protocol Secure (FTPS): File transfer with TLS
     *            encryption
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            File Transfer Protocol (FTP): Unencrypted file transfer
     *            </p>
     *            </li>
     *            </ul>
     */
    public void setProtocols(java.util.Collection<String> protocols) {
        if (protocols == null) {
            this.protocols = null;
            return;
        }

        this.protocols = new java.util.ArrayList<String>(protocols);
    }

    /**
     * <p>
     * Specifies the file transfer protocol or protocols over which your file
     * transfer protocol client can connect to your server's endpoint. The
     * available protocols are:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol (FTP): Unencrypted file transfer
     * </p>
     * </li>
     * </ul>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param protocols <p>
     *            Specifies the file transfer protocol or protocols over which
     *            your file transfer protocol client can connect to your
     *            server's endpoint. The available protocols are:
     *            </p>
     *            <ul>
     *            <li>
     *            <p>
     *            Secure Shell (SSH) File Transfer Protocol (SFTP): File
     *            transfer over SSH
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            File Transfer Protocol Secure (FTPS): File transfer with TLS
     *            encryption
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            File Transfer Protocol (FTP): Unencrypted file transfer
     *            </p>
     *            </li>
     *            </ul>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateServerRequest withProtocols(String... protocols) {
        if (getProtocols() == null) {
            this.protocols = new java.util.ArrayList<String>(protocols.length);
        }
        for (String value : protocols) {
            this.protocols.add(value);
        }
        return this;
    }

    /**
     * <p>
     * Specifies the file transfer protocol or protocols over which your file
     * transfer protocol client can connect to your server's endpoint. The
     * available protocols are:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol (FTP): Unencrypted file transfer
     * </p>
     * </li>
     * </ul>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param protocols <p>
     *            Specifies the file transfer protocol or protocols over which
     *            your file transfer protocol client can connect to your
     *            server's endpoint. The available protocols are:
     *            </p>
     *            <ul>
     *            <li>
     *            <p>
     *            Secure Shell (SSH) File Transfer Protocol (SFTP): File
     *            transfer over SSH
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            File Transfer Protocol Secure (FTPS): File transfer with TLS
     *            encryption
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            File Transfer Protocol (FTP): Unencrypted file transfer
     *            </p>
     *            </li>
     *            </ul>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateServerRequest withProtocols(java.util.Collection<String> protocols) {
        setProtocols(protocols);
        return this;
    }

    /**
     * <p>
     * Key-value pairs that can be used to group and search for file transfer
     * protocol-enabled servers.
     * </p>
     *
     * @return <p>
     *         Key-value pairs that can be used to group and search for file
     *         transfer protocol-enabled servers.
     *         </p>
     */
    public java.util.List<Tag> getTags() {
        return tags;
    }

    /**
     * <p>
     * Key-value pairs that can be used to group and search for file transfer
     * protocol-enabled servers.
     * </p>
     *
     * @param tags <p>
     *            Key-value pairs that can be used to group and search for file
     *            transfer protocol-enabled servers.
     *            </p>
     */
    public void setTags(java.util.Collection<Tag> tags) {
        if (tags == null) {
            this.tags = null;
            return;
        }

        this.tags = new java.util.ArrayList<Tag>(tags);
    }

    /**
     * <p>
     * Key-value pairs that can be used to group and search for file transfer
     * protocol-enabled servers.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param tags <p>
     *            Key-value pairs that can be used to group and search for file
     *            transfer protocol-enabled servers.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateServerRequest withTags(Tag... tags) {
        if (getTags() == null) {
            this.tags = new java.util.ArrayList<Tag>(tags.length);
        }
        for (Tag value : tags) {
            this.tags.add(value);
        }
        return this;
    }

    /**
     * <p>
     * Key-value pairs that can be used to group and search for file transfer
     * protocol-enabled servers.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param tags <p>
     *            Key-value pairs that can be used to group and search for file
     *            transfer protocol-enabled servers.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public CreateServerRequest withTags(java.util.Collection<Tag> tags) {
        setTags(tags);
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and
     * debugging.
     *
     * @return A string representation of this object.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getCertificate() != null)
            sb.append("Certificate: " + getCertificate() + ",");
        if (getEndpointDetails() != null)
            sb.append("EndpointDetails: " + getEndpointDetails() + ",");
        if (getEndpointType() != null)
            sb.append("EndpointType: " + getEndpointType() + ",");
        if (getHostKey() != null)
            sb.append("HostKey: " + getHostKey() + ",");
        if (getIdentityProviderDetails() != null)
            sb.append("IdentityProviderDetails: " + getIdentityProviderDetails() + ",");
        if (getIdentityProviderType() != null)
            sb.append("IdentityProviderType: " + getIdentityProviderType() + ",");
        if (getLoggingRole() != null)
            sb.append("LoggingRole: " + getLoggingRole() + ",");
        if (getProtocols() != null)
            sb.append("Protocols: " + getProtocols() + ",");
        if (getTags() != null)
            sb.append("Tags: " + getTags());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode
                + ((getCertificate() == null) ? 0 : getCertificate().hashCode());
        hashCode = prime * hashCode
                + ((getEndpointDetails() == null) ? 0 : getEndpointDetails().hashCode());
        hashCode = prime * hashCode
                + ((getEndpointType() == null) ? 0 : getEndpointType().hashCode());
        hashCode = prime * hashCode + ((getHostKey() == null) ? 0 : getHostKey().hashCode());
        hashCode = prime
                * hashCode
                + ((getIdentityProviderDetails() == null) ? 0 : getIdentityProviderDetails()
                        .hashCode());
        hashCode = prime * hashCode
                + ((getIdentityProviderType() == null) ? 0 : getIdentityProviderType().hashCode());
        hashCode = prime * hashCode
                + ((getLoggingRole() == null) ? 0 : getLoggingRole().hashCode());
        hashCode = prime * hashCode + ((getProtocols() == null) ? 0 : getProtocols().hashCode());
        hashCode = prime * hashCode + ((getTags() == null) ? 0 : getTags().hashCode());
        return hashCode;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof CreateServerRequest == false)
            return false;
        CreateServerRequest other = (CreateServerRequest) obj;

        if (other.getCertificate() == null ^ this.getCertificate() == null)
            return false;
        if (other.getCertificate() != null
                && other.getCertificate().equals(this.getCertificate()) == false)
            return false;
        if (other.getEndpointDetails() == null ^ this.getEndpointDetails() == null)
            return false;
        if (other.getEndpointDetails() != null
                && other.getEndpointDetails().equals(this.getEndpointDetails()) == false)
            return false;
        if (other.getEndpointType() == null ^ this.getEndpointType() == null)
            return false;
        if (other.getEndpointType() != null
                && other.getEndpointType().equals(this.getEndpointType()) == false)
            return false;
        if (other.getHostKey() == null ^ this.getHostKey() == null)
            return false;
        if (other.getHostKey() != null && other.getHostKey().equals(this.getHostKey()) == false)
            return false;
        if (other.getIdentityProviderDetails() == null ^ this.getIdentityProviderDetails() == null)
            return false;
        if (other.getIdentityProviderDetails() != null
                && other.getIdentityProviderDetails().equals(this.getIdentityProviderDetails()) == false)
            return false;
        if (other.getIdentityProviderType() == null ^ this.getIdentityProviderType() == null)
            return false;
        if (other.getIdentityProviderType() != null
                && other.getIdentityProviderType().equals(this.getIdentityProviderType()) == false)
            return false;
        if (other.getLoggingRole() == null ^ this.getLoggingRole() == null)
            return false;
        if (other.getLoggingRole() != null
                && other.getLoggingRole().equals(this.getLoggingRole()) == false)
            return false;
        if (other.getProtocols() == null ^ this.getProtocols() == null)
            return false;
        if (other.getProtocols() != null
                && other.getProtocols().equals(this.getProtocols()) == false)
            return false;
        if (other.getTags() == null ^ this.getTags() == null)
            return false;
        if (other.getTags() != null && other.getTags().equals(this.getTags()) == false)
            return false;
        return true;
    }
}
