/*
 * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amazonaws.services.lightsail.model;

import java.io.Serializable;

import com.amazonaws.AmazonWebServiceRequest;

/**
 * <p>
 * Allows the update of one or more attributes of a database in Amazon
 * Lightsail.
 * </p>
 * <p>
 * Updates are applied immediately, or in cases where the updates could result
 * in an outage, are applied during the database's predefined maintenance
 * window.
 * </p>
 * <p>
 * The <code>update relational database</code> operation supports tag-based
 * access control via resource tags applied to the resource identified by
 * relationalDatabaseName. For more information, see the <a href=
 * "https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags"
 * >Lightsail Dev Guide</a>.
 * </p>
 */
public class UpdateRelationalDatabaseRequest extends AmazonWebServiceRequest implements
        Serializable {
    /**
     * <p>
     * The name of your database to update.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Pattern: </b>\w[\w\-]*\w<br/>
     */
    private String relationalDatabaseName;

    /**
     * <p>
     * The password for the master user of your database. The password can
     * include any printable ASCII character except "/", """, or "@".
     * </p>
     * <p>
     * Constraints: Must contain 8 to 41 characters.
     * </p>
     */
    private String masterUserPassword;

    /**
     * <p>
     * When <code>true</code>, the master user password is changed to a new
     * strong password generated by Lightsail.
     * </p>
     * <p>
     * Use the <code>get relational database master user password</code>
     * operation to get the new password.
     * </p>
     */
    private Boolean rotateMasterUserPassword;

    /**
     * <p>
     * The daily time range during which automated backups are created for your
     * database if automated backups are enabled.
     * </p>
     * <p>
     * Constraints:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Must be in the <code>hh24:mi-hh24:mi</code> format.
     * </p>
     * <p>
     * Example: <code>16:00-16:30</code>
     * </p>
     * </li>
     * <li>
     * <p>
     * Specified in Coordinated Universal Time (UTC).
     * </p>
     * </li>
     * <li>
     * <p>
     * Must not conflict with the preferred maintenance window.
     * </p>
     * </li>
     * <li>
     * <p>
     * Must be at least 30 minutes.
     * </p>
     * </li>
     * </ul>
     */
    private String preferredBackupWindow;

    /**
     * <p>
     * The weekly time range during which system maintenance can occur on your
     * database.
     * </p>
     * <p>
     * The default is a 30-minute window selected at random from an 8-hour block
     * of time for each AWS Region, occurring on a random day of the week.
     * </p>
     * <p>
     * Constraints:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.
     * </p>
     * </li>
     * <li>
     * <p>
     * Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
     * </p>
     * </li>
     * <li>
     * <p>
     * Must be at least 30 minutes.
     * </p>
     * </li>
     * <li>
     * <p>
     * Specified in Coordinated Universal Time (UTC).
     * </p>
     * </li>
     * <li>
     * <p>
     * Example: <code>Tue:17:00-Tue:17:30</code>
     * </p>
     * </li>
     * </ul>
     */
    private String preferredMaintenanceWindow;

    /**
     * <p>
     * When <code>true</code>, enables automated backup retention for your
     * database.
     * </p>
     * <p>
     * Updates are applied during the next maintenance window because this can
     * result in an outage.
     * </p>
     */
    private Boolean enableBackupRetention;

    /**
     * <p>
     * When <code>true</code>, disables automated backup retention for your
     * database.
     * </p>
     * <p>
     * Disabling backup retention deletes all automated database backups. Before
     * disabling this, you may want to create a snapshot of your database using
     * the <code>create relational database snapshot</code> operation.
     * </p>
     * <p>
     * Updates are applied during the next maintenance window because this can
     * result in an outage.
     * </p>
     */
    private Boolean disableBackupRetention;

    /**
     * <p>
     * Specifies the accessibility options for your database. A value of
     * <code>true</code> specifies a database that is available to resources
     * outside of your Lightsail account. A value of <code>false</code>
     * specifies a database that is available only to your Lightsail resources
     * in the same region as your database.
     * </p>
     */
    private Boolean publiclyAccessible;

    /**
     * <p>
     * When <code>true</code>, applies changes immediately. When
     * <code>false</code>, applies changes during the preferred maintenance
     * window. Some changes may cause an outage.
     * </p>
     * <p>
     * Default: <code>false</code>
     * </p>
     */
    private Boolean applyImmediately;

    /**
     * <p>
     * Indicates the certificate that needs to be associated with the database.
     * </p>
     */
    private String caCertificateIdentifier;

    /**
     * <p>
     * The name of your database to update.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Pattern: </b>\w[\w\-]*\w<br/>
     *
     * @return <p>
     *         The name of your database to update.
     *         </p>
     */
    public String getRelationalDatabaseName() {
        return relationalDatabaseName;
    }

    /**
     * <p>
     * The name of your database to update.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Pattern: </b>\w[\w\-]*\w<br/>
     *
     * @param relationalDatabaseName <p>
     *            The name of your database to update.
     *            </p>
     */
    public void setRelationalDatabaseName(String relationalDatabaseName) {
        this.relationalDatabaseName = relationalDatabaseName;
    }

    /**
     * <p>
     * The name of your database to update.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Pattern: </b>\w[\w\-]*\w<br/>
     *
     * @param relationalDatabaseName <p>
     *            The name of your database to update.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRelationalDatabaseRequest withRelationalDatabaseName(String relationalDatabaseName) {
        this.relationalDatabaseName = relationalDatabaseName;
        return this;
    }

    /**
     * <p>
     * The password for the master user of your database. The password can
     * include any printable ASCII character except "/", """, or "@".
     * </p>
     * <p>
     * Constraints: Must contain 8 to 41 characters.
     * </p>
     *
     * @return <p>
     *         The password for the master user of your database. The password
     *         can include any printable ASCII character except "/",
     *         """, or "@".
     *         </p>
     *         <p>
     *         Constraints: Must contain 8 to 41 characters.
     *         </p>
     */
    public String getMasterUserPassword() {
        return masterUserPassword;
    }

    /**
     * <p>
     * The password for the master user of your database. The password can
     * include any printable ASCII character except "/", """, or "@".
     * </p>
     * <p>
     * Constraints: Must contain 8 to 41 characters.
     * </p>
     *
     * @param masterUserPassword <p>
     *            The password for the master user of your database. The
     *            password can include any printable ASCII character except "/",
     *            """, or "@".
     *            </p>
     *            <p>
     *            Constraints: Must contain 8 to 41 characters.
     *            </p>
     */
    public void setMasterUserPassword(String masterUserPassword) {
        this.masterUserPassword = masterUserPassword;
    }

    /**
     * <p>
     * The password for the master user of your database. The password can
     * include any printable ASCII character except "/", """, or "@".
     * </p>
     * <p>
     * Constraints: Must contain 8 to 41 characters.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param masterUserPassword <p>
     *            The password for the master user of your database. The
     *            password can include any printable ASCII character except "/",
     *            """, or "@".
     *            </p>
     *            <p>
     *            Constraints: Must contain 8 to 41 characters.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRelationalDatabaseRequest withMasterUserPassword(String masterUserPassword) {
        this.masterUserPassword = masterUserPassword;
        return this;
    }

    /**
     * <p>
     * When <code>true</code>, the master user password is changed to a new
     * strong password generated by Lightsail.
     * </p>
     * <p>
     * Use the <code>get relational database master user password</code>
     * operation to get the new password.
     * </p>
     *
     * @return <p>
     *         When <code>true</code>, the master user password is changed to a
     *         new strong password generated by Lightsail.
     *         </p>
     *         <p>
     *         Use the <code>get relational database master user password</code>
     *         operation to get the new password.
     *         </p>
     */
    public Boolean isRotateMasterUserPassword() {
        return rotateMasterUserPassword;
    }

    /**
     * <p>
     * When <code>true</code>, the master user password is changed to a new
     * strong password generated by Lightsail.
     * </p>
     * <p>
     * Use the <code>get relational database master user password</code>
     * operation to get the new password.
     * </p>
     *
     * @return <p>
     *         When <code>true</code>, the master user password is changed to a
     *         new strong password generated by Lightsail.
     *         </p>
     *         <p>
     *         Use the <code>get relational database master user password</code>
     *         operation to get the new password.
     *         </p>
     */
    public Boolean getRotateMasterUserPassword() {
        return rotateMasterUserPassword;
    }

    /**
     * <p>
     * When <code>true</code>, the master user password is changed to a new
     * strong password generated by Lightsail.
     * </p>
     * <p>
     * Use the <code>get relational database master user password</code>
     * operation to get the new password.
     * </p>
     *
     * @param rotateMasterUserPassword <p>
     *            When <code>true</code>, the master user password is changed to
     *            a new strong password generated by Lightsail.
     *            </p>
     *            <p>
     *            Use the
     *            <code>get relational database master user password</code>
     *            operation to get the new password.
     *            </p>
     */
    public void setRotateMasterUserPassword(Boolean rotateMasterUserPassword) {
        this.rotateMasterUserPassword = rotateMasterUserPassword;
    }

    /**
     * <p>
     * When <code>true</code>, the master user password is changed to a new
     * strong password generated by Lightsail.
     * </p>
     * <p>
     * Use the <code>get relational database master user password</code>
     * operation to get the new password.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param rotateMasterUserPassword <p>
     *            When <code>true</code>, the master user password is changed to
     *            a new strong password generated by Lightsail.
     *            </p>
     *            <p>
     *            Use the
     *            <code>get relational database master user password</code>
     *            operation to get the new password.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRelationalDatabaseRequest withRotateMasterUserPassword(
            Boolean rotateMasterUserPassword) {
        this.rotateMasterUserPassword = rotateMasterUserPassword;
        return this;
    }

    /**
     * <p>
     * The daily time range during which automated backups are created for your
     * database if automated backups are enabled.
     * </p>
     * <p>
     * Constraints:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Must be in the <code>hh24:mi-hh24:mi</code> format.
     * </p>
     * <p>
     * Example: <code>16:00-16:30</code>
     * </p>
     * </li>
     * <li>
     * <p>
     * Specified in Coordinated Universal Time (UTC).
     * </p>
     * </li>
     * <li>
     * <p>
     * Must not conflict with the preferred maintenance window.
     * </p>
     * </li>
     * <li>
     * <p>
     * Must be at least 30 minutes.
     * </p>
     * </li>
     * </ul>
     *
     * @return <p>
     *         The daily time range during which automated backups are created
     *         for your database if automated backups are enabled.
     *         </p>
     *         <p>
     *         Constraints:
     *         </p>
     *         <ul>
     *         <li>
     *         <p>
     *         Must be in the <code>hh24:mi-hh24:mi</code> format.
     *         </p>
     *         <p>
     *         Example: <code>16:00-16:30</code>
     *         </p>
     *         </li>
     *         <li>
     *         <p>
     *         Specified in Coordinated Universal Time (UTC).
     *         </p>
     *         </li>
     *         <li>
     *         <p>
     *         Must not conflict with the preferred maintenance window.
     *         </p>
     *         </li>
     *         <li>
     *         <p>
     *         Must be at least 30 minutes.
     *         </p>
     *         </li>
     *         </ul>
     */
    public String getPreferredBackupWindow() {
        return preferredBackupWindow;
    }

    /**
     * <p>
     * The daily time range during which automated backups are created for your
     * database if automated backups are enabled.
     * </p>
     * <p>
     * Constraints:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Must be in the <code>hh24:mi-hh24:mi</code> format.
     * </p>
     * <p>
     * Example: <code>16:00-16:30</code>
     * </p>
     * </li>
     * <li>
     * <p>
     * Specified in Coordinated Universal Time (UTC).
     * </p>
     * </li>
     * <li>
     * <p>
     * Must not conflict with the preferred maintenance window.
     * </p>
     * </li>
     * <li>
     * <p>
     * Must be at least 30 minutes.
     * </p>
     * </li>
     * </ul>
     *
     * @param preferredBackupWindow <p>
     *            The daily time range during which automated backups are
     *            created for your database if automated backups are enabled.
     *            </p>
     *            <p>
     *            Constraints:
     *            </p>
     *            <ul>
     *            <li>
     *            <p>
     *            Must be in the <code>hh24:mi-hh24:mi</code> format.
     *            </p>
     *            <p>
     *            Example: <code>16:00-16:30</code>
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            Specified in Coordinated Universal Time (UTC).
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            Must not conflict with the preferred maintenance window.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            Must be at least 30 minutes.
     *            </p>
     *            </li>
     *            </ul>
     */
    public void setPreferredBackupWindow(String preferredBackupWindow) {
        this.preferredBackupWindow = preferredBackupWindow;
    }

    /**
     * <p>
     * The daily time range during which automated backups are created for your
     * database if automated backups are enabled.
     * </p>
     * <p>
     * Constraints:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Must be in the <code>hh24:mi-hh24:mi</code> format.
     * </p>
     * <p>
     * Example: <code>16:00-16:30</code>
     * </p>
     * </li>
     * <li>
     * <p>
     * Specified in Coordinated Universal Time (UTC).
     * </p>
     * </li>
     * <li>
     * <p>
     * Must not conflict with the preferred maintenance window.
     * </p>
     * </li>
     * <li>
     * <p>
     * Must be at least 30 minutes.
     * </p>
     * </li>
     * </ul>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param preferredBackupWindow <p>
     *            The daily time range during which automated backups are
     *            created for your database if automated backups are enabled.
     *            </p>
     *            <p>
     *            Constraints:
     *            </p>
     *            <ul>
     *            <li>
     *            <p>
     *            Must be in the <code>hh24:mi-hh24:mi</code> format.
     *            </p>
     *            <p>
     *            Example: <code>16:00-16:30</code>
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            Specified in Coordinated Universal Time (UTC).
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            Must not conflict with the preferred maintenance window.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            Must be at least 30 minutes.
     *            </p>
     *            </li>
     *            </ul>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRelationalDatabaseRequest withPreferredBackupWindow(String preferredBackupWindow) {
        this.preferredBackupWindow = preferredBackupWindow;
        return this;
    }

    /**
     * <p>
     * The weekly time range during which system maintenance can occur on your
     * database.
     * </p>
     * <p>
     * The default is a 30-minute window selected at random from an 8-hour block
     * of time for each AWS Region, occurring on a random day of the week.
     * </p>
     * <p>
     * Constraints:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.
     * </p>
     * </li>
     * <li>
     * <p>
     * Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
     * </p>
     * </li>
     * <li>
     * <p>
     * Must be at least 30 minutes.
     * </p>
     * </li>
     * <li>
     * <p>
     * Specified in Coordinated Universal Time (UTC).
     * </p>
     * </li>
     * <li>
     * <p>
     * Example: <code>Tue:17:00-Tue:17:30</code>
     * </p>
     * </li>
     * </ul>
     *
     * @return <p>
     *         The weekly time range during which system maintenance can occur
     *         on your database.
     *         </p>
     *         <p>
     *         The default is a 30-minute window selected at random from an
     *         8-hour block of time for each AWS Region, occurring on a random
     *         day of the week.
     *         </p>
     *         <p>
     *         Constraints:
     *         </p>
     *         <ul>
     *         <li>
     *         <p>
     *         Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.
     *         </p>
     *         </li>
     *         <li>
     *         <p>
     *         Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
     *         </p>
     *         </li>
     *         <li>
     *         <p>
     *         Must be at least 30 minutes.
     *         </p>
     *         </li>
     *         <li>
     *         <p>
     *         Specified in Coordinated Universal Time (UTC).
     *         </p>
     *         </li>
     *         <li>
     *         <p>
     *         Example: <code>Tue:17:00-Tue:17:30</code>
     *         </p>
     *         </li>
     *         </ul>
     */
    public String getPreferredMaintenanceWindow() {
        return preferredMaintenanceWindow;
    }

    /**
     * <p>
     * The weekly time range during which system maintenance can occur on your
     * database.
     * </p>
     * <p>
     * The default is a 30-minute window selected at random from an 8-hour block
     * of time for each AWS Region, occurring on a random day of the week.
     * </p>
     * <p>
     * Constraints:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.
     * </p>
     * </li>
     * <li>
     * <p>
     * Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
     * </p>
     * </li>
     * <li>
     * <p>
     * Must be at least 30 minutes.
     * </p>
     * </li>
     * <li>
     * <p>
     * Specified in Coordinated Universal Time (UTC).
     * </p>
     * </li>
     * <li>
     * <p>
     * Example: <code>Tue:17:00-Tue:17:30</code>
     * </p>
     * </li>
     * </ul>
     *
     * @param preferredMaintenanceWindow <p>
     *            The weekly time range during which system maintenance can
     *            occur on your database.
     *            </p>
     *            <p>
     *            The default is a 30-minute window selected at random from an
     *            8-hour block of time for each AWS Region, occurring on a
     *            random day of the week.
     *            </p>
     *            <p>
     *            Constraints:
     *            </p>
     *            <ul>
     *            <li>
     *            <p>
     *            Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            Must be at least 30 minutes.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            Specified in Coordinated Universal Time (UTC).
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            Example: <code>Tue:17:00-Tue:17:30</code>
     *            </p>
     *            </li>
     *            </ul>
     */
    public void setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
        this.preferredMaintenanceWindow = preferredMaintenanceWindow;
    }

    /**
     * <p>
     * The weekly time range during which system maintenance can occur on your
     * database.
     * </p>
     * <p>
     * The default is a 30-minute window selected at random from an 8-hour block
     * of time for each AWS Region, occurring on a random day of the week.
     * </p>
     * <p>
     * Constraints:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.
     * </p>
     * </li>
     * <li>
     * <p>
     * Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
     * </p>
     * </li>
     * <li>
     * <p>
     * Must be at least 30 minutes.
     * </p>
     * </li>
     * <li>
     * <p>
     * Specified in Coordinated Universal Time (UTC).
     * </p>
     * </li>
     * <li>
     * <p>
     * Example: <code>Tue:17:00-Tue:17:30</code>
     * </p>
     * </li>
     * </ul>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param preferredMaintenanceWindow <p>
     *            The weekly time range during which system maintenance can
     *            occur on your database.
     *            </p>
     *            <p>
     *            The default is a 30-minute window selected at random from an
     *            8-hour block of time for each AWS Region, occurring on a
     *            random day of the week.
     *            </p>
     *            <p>
     *            Constraints:
     *            </p>
     *            <ul>
     *            <li>
     *            <p>
     *            Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            Must be at least 30 minutes.
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            Specified in Coordinated Universal Time (UTC).
     *            </p>
     *            </li>
     *            <li>
     *            <p>
     *            Example: <code>Tue:17:00-Tue:17:30</code>
     *            </p>
     *            </li>
     *            </ul>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRelationalDatabaseRequest withPreferredMaintenanceWindow(
            String preferredMaintenanceWindow) {
        this.preferredMaintenanceWindow = preferredMaintenanceWindow;
        return this;
    }

    /**
     * <p>
     * When <code>true</code>, enables automated backup retention for your
     * database.
     * </p>
     * <p>
     * Updates are applied during the next maintenance window because this can
     * result in an outage.
     * </p>
     *
     * @return <p>
     *         When <code>true</code>, enables automated backup retention for
     *         your database.
     *         </p>
     *         <p>
     *         Updates are applied during the next maintenance window because
     *         this can result in an outage.
     *         </p>
     */
    public Boolean isEnableBackupRetention() {
        return enableBackupRetention;
    }

    /**
     * <p>
     * When <code>true</code>, enables automated backup retention for your
     * database.
     * </p>
     * <p>
     * Updates are applied during the next maintenance window because this can
     * result in an outage.
     * </p>
     *
     * @return <p>
     *         When <code>true</code>, enables automated backup retention for
     *         your database.
     *         </p>
     *         <p>
     *         Updates are applied during the next maintenance window because
     *         this can result in an outage.
     *         </p>
     */
    public Boolean getEnableBackupRetention() {
        return enableBackupRetention;
    }

    /**
     * <p>
     * When <code>true</code>, enables automated backup retention for your
     * database.
     * </p>
     * <p>
     * Updates are applied during the next maintenance window because this can
     * result in an outage.
     * </p>
     *
     * @param enableBackupRetention <p>
     *            When <code>true</code>, enables automated backup retention for
     *            your database.
     *            </p>
     *            <p>
     *            Updates are applied during the next maintenance window because
     *            this can result in an outage.
     *            </p>
     */
    public void setEnableBackupRetention(Boolean enableBackupRetention) {
        this.enableBackupRetention = enableBackupRetention;
    }

    /**
     * <p>
     * When <code>true</code>, enables automated backup retention for your
     * database.
     * </p>
     * <p>
     * Updates are applied during the next maintenance window because this can
     * result in an outage.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param enableBackupRetention <p>
     *            When <code>true</code>, enables automated backup retention for
     *            your database.
     *            </p>
     *            <p>
     *            Updates are applied during the next maintenance window because
     *            this can result in an outage.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRelationalDatabaseRequest withEnableBackupRetention(Boolean enableBackupRetention) {
        this.enableBackupRetention = enableBackupRetention;
        return this;
    }

    /**
     * <p>
     * When <code>true</code>, disables automated backup retention for your
     * database.
     * </p>
     * <p>
     * Disabling backup retention deletes all automated database backups. Before
     * disabling this, you may want to create a snapshot of your database using
     * the <code>create relational database snapshot</code> operation.
     * </p>
     * <p>
     * Updates are applied during the next maintenance window because this can
     * result in an outage.
     * </p>
     *
     * @return <p>
     *         When <code>true</code>, disables automated backup retention for
     *         your database.
     *         </p>
     *         <p>
     *         Disabling backup retention deletes all automated database
     *         backups. Before disabling this, you may want to create a snapshot
     *         of your database using the
     *         <code>create relational database snapshot</code> operation.
     *         </p>
     *         <p>
     *         Updates are applied during the next maintenance window because
     *         this can result in an outage.
     *         </p>
     */
    public Boolean isDisableBackupRetention() {
        return disableBackupRetention;
    }

    /**
     * <p>
     * When <code>true</code>, disables automated backup retention for your
     * database.
     * </p>
     * <p>
     * Disabling backup retention deletes all automated database backups. Before
     * disabling this, you may want to create a snapshot of your database using
     * the <code>create relational database snapshot</code> operation.
     * </p>
     * <p>
     * Updates are applied during the next maintenance window because this can
     * result in an outage.
     * </p>
     *
     * @return <p>
     *         When <code>true</code>, disables automated backup retention for
     *         your database.
     *         </p>
     *         <p>
     *         Disabling backup retention deletes all automated database
     *         backups. Before disabling this, you may want to create a snapshot
     *         of your database using the
     *         <code>create relational database snapshot</code> operation.
     *         </p>
     *         <p>
     *         Updates are applied during the next maintenance window because
     *         this can result in an outage.
     *         </p>
     */
    public Boolean getDisableBackupRetention() {
        return disableBackupRetention;
    }

    /**
     * <p>
     * When <code>true</code>, disables automated backup retention for your
     * database.
     * </p>
     * <p>
     * Disabling backup retention deletes all automated database backups. Before
     * disabling this, you may want to create a snapshot of your database using
     * the <code>create relational database snapshot</code> operation.
     * </p>
     * <p>
     * Updates are applied during the next maintenance window because this can
     * result in an outage.
     * </p>
     *
     * @param disableBackupRetention <p>
     *            When <code>true</code>, disables automated backup retention
     *            for your database.
     *            </p>
     *            <p>
     *            Disabling backup retention deletes all automated database
     *            backups. Before disabling this, you may want to create a
     *            snapshot of your database using the
     *            <code>create relational database snapshot</code> operation.
     *            </p>
     *            <p>
     *            Updates are applied during the next maintenance window because
     *            this can result in an outage.
     *            </p>
     */
    public void setDisableBackupRetention(Boolean disableBackupRetention) {
        this.disableBackupRetention = disableBackupRetention;
    }

    /**
     * <p>
     * When <code>true</code>, disables automated backup retention for your
     * database.
     * </p>
     * <p>
     * Disabling backup retention deletes all automated database backups. Before
     * disabling this, you may want to create a snapshot of your database using
     * the <code>create relational database snapshot</code> operation.
     * </p>
     * <p>
     * Updates are applied during the next maintenance window because this can
     * result in an outage.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param disableBackupRetention <p>
     *            When <code>true</code>, disables automated backup retention
     *            for your database.
     *            </p>
     *            <p>
     *            Disabling backup retention deletes all automated database
     *            backups. Before disabling this, you may want to create a
     *            snapshot of your database using the
     *            <code>create relational database snapshot</code> operation.
     *            </p>
     *            <p>
     *            Updates are applied during the next maintenance window because
     *            this can result in an outage.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRelationalDatabaseRequest withDisableBackupRetention(Boolean disableBackupRetention) {
        this.disableBackupRetention = disableBackupRetention;
        return this;
    }

    /**
     * <p>
     * Specifies the accessibility options for your database. A value of
     * <code>true</code> specifies a database that is available to resources
     * outside of your Lightsail account. A value of <code>false</code>
     * specifies a database that is available only to your Lightsail resources
     * in the same region as your database.
     * </p>
     *
     * @return <p>
     *         Specifies the accessibility options for your database. A value of
     *         <code>true</code> specifies a database that is available to
     *         resources outside of your Lightsail account. A value of
     *         <code>false</code> specifies a database that is available only to
     *         your Lightsail resources in the same region as your database.
     *         </p>
     */
    public Boolean isPubliclyAccessible() {
        return publiclyAccessible;
    }

    /**
     * <p>
     * Specifies the accessibility options for your database. A value of
     * <code>true</code> specifies a database that is available to resources
     * outside of your Lightsail account. A value of <code>false</code>
     * specifies a database that is available only to your Lightsail resources
     * in the same region as your database.
     * </p>
     *
     * @return <p>
     *         Specifies the accessibility options for your database. A value of
     *         <code>true</code> specifies a database that is available to
     *         resources outside of your Lightsail account. A value of
     *         <code>false</code> specifies a database that is available only to
     *         your Lightsail resources in the same region as your database.
     *         </p>
     */
    public Boolean getPubliclyAccessible() {
        return publiclyAccessible;
    }

    /**
     * <p>
     * Specifies the accessibility options for your database. A value of
     * <code>true</code> specifies a database that is available to resources
     * outside of your Lightsail account. A value of <code>false</code>
     * specifies a database that is available only to your Lightsail resources
     * in the same region as your database.
     * </p>
     *
     * @param publiclyAccessible <p>
     *            Specifies the accessibility options for your database. A value
     *            of <code>true</code> specifies a database that is available to
     *            resources outside of your Lightsail account. A value of
     *            <code>false</code> specifies a database that is available only
     *            to your Lightsail resources in the same region as your
     *            database.
     *            </p>
     */
    public void setPubliclyAccessible(Boolean publiclyAccessible) {
        this.publiclyAccessible = publiclyAccessible;
    }

    /**
     * <p>
     * Specifies the accessibility options for your database. A value of
     * <code>true</code> specifies a database that is available to resources
     * outside of your Lightsail account. A value of <code>false</code>
     * specifies a database that is available only to your Lightsail resources
     * in the same region as your database.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param publiclyAccessible <p>
     *            Specifies the accessibility options for your database. A value
     *            of <code>true</code> specifies a database that is available to
     *            resources outside of your Lightsail account. A value of
     *            <code>false</code> specifies a database that is available only
     *            to your Lightsail resources in the same region as your
     *            database.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRelationalDatabaseRequest withPubliclyAccessible(Boolean publiclyAccessible) {
        this.publiclyAccessible = publiclyAccessible;
        return this;
    }

    /**
     * <p>
     * When <code>true</code>, applies changes immediately. When
     * <code>false</code>, applies changes during the preferred maintenance
     * window. Some changes may cause an outage.
     * </p>
     * <p>
     * Default: <code>false</code>
     * </p>
     *
     * @return <p>
     *         When <code>true</code>, applies changes immediately. When
     *         <code>false</code>, applies changes during the preferred
     *         maintenance window. Some changes may cause an outage.
     *         </p>
     *         <p>
     *         Default: <code>false</code>
     *         </p>
     */
    public Boolean isApplyImmediately() {
        return applyImmediately;
    }

    /**
     * <p>
     * When <code>true</code>, applies changes immediately. When
     * <code>false</code>, applies changes during the preferred maintenance
     * window. Some changes may cause an outage.
     * </p>
     * <p>
     * Default: <code>false</code>
     * </p>
     *
     * @return <p>
     *         When <code>true</code>, applies changes immediately. When
     *         <code>false</code>, applies changes during the preferred
     *         maintenance window. Some changes may cause an outage.
     *         </p>
     *         <p>
     *         Default: <code>false</code>
     *         </p>
     */
    public Boolean getApplyImmediately() {
        return applyImmediately;
    }

    /**
     * <p>
     * When <code>true</code>, applies changes immediately. When
     * <code>false</code>, applies changes during the preferred maintenance
     * window. Some changes may cause an outage.
     * </p>
     * <p>
     * Default: <code>false</code>
     * </p>
     *
     * @param applyImmediately <p>
     *            When <code>true</code>, applies changes immediately. When
     *            <code>false</code>, applies changes during the preferred
     *            maintenance window. Some changes may cause an outage.
     *            </p>
     *            <p>
     *            Default: <code>false</code>
     *            </p>
     */
    public void setApplyImmediately(Boolean applyImmediately) {
        this.applyImmediately = applyImmediately;
    }

    /**
     * <p>
     * When <code>true</code>, applies changes immediately. When
     * <code>false</code>, applies changes during the preferred maintenance
     * window. Some changes may cause an outage.
     * </p>
     * <p>
     * Default: <code>false</code>
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param applyImmediately <p>
     *            When <code>true</code>, applies changes immediately. When
     *            <code>false</code>, applies changes during the preferred
     *            maintenance window. Some changes may cause an outage.
     *            </p>
     *            <p>
     *            Default: <code>false</code>
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRelationalDatabaseRequest withApplyImmediately(Boolean applyImmediately) {
        this.applyImmediately = applyImmediately;
        return this;
    }

    /**
     * <p>
     * Indicates the certificate that needs to be associated with the database.
     * </p>
     *
     * @return <p>
     *         Indicates the certificate that needs to be associated with the
     *         database.
     *         </p>
     */
    public String getCaCertificateIdentifier() {
        return caCertificateIdentifier;
    }

    /**
     * <p>
     * Indicates the certificate that needs to be associated with the database.
     * </p>
     *
     * @param caCertificateIdentifier <p>
     *            Indicates the certificate that needs to be associated with the
     *            database.
     *            </p>
     */
    public void setCaCertificateIdentifier(String caCertificateIdentifier) {
        this.caCertificateIdentifier = caCertificateIdentifier;
    }

    /**
     * <p>
     * Indicates the certificate that needs to be associated with the database.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param caCertificateIdentifier <p>
     *            Indicates the certificate that needs to be associated with the
     *            database.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public UpdateRelationalDatabaseRequest withCaCertificateIdentifier(
            String caCertificateIdentifier) {
        this.caCertificateIdentifier = caCertificateIdentifier;
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and
     * debugging.
     *
     * @return A string representation of this object.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getRelationalDatabaseName() != null)
            sb.append("relationalDatabaseName: " + getRelationalDatabaseName() + ",");
        if (getMasterUserPassword() != null)
            sb.append("masterUserPassword: " + getMasterUserPassword() + ",");
        if (getRotateMasterUserPassword() != null)
            sb.append("rotateMasterUserPassword: " + getRotateMasterUserPassword() + ",");
        if (getPreferredBackupWindow() != null)
            sb.append("preferredBackupWindow: " + getPreferredBackupWindow() + ",");
        if (getPreferredMaintenanceWindow() != null)
            sb.append("preferredMaintenanceWindow: " + getPreferredMaintenanceWindow() + ",");
        if (getEnableBackupRetention() != null)
            sb.append("enableBackupRetention: " + getEnableBackupRetention() + ",");
        if (getDisableBackupRetention() != null)
            sb.append("disableBackupRetention: " + getDisableBackupRetention() + ",");
        if (getPubliclyAccessible() != null)
            sb.append("publiclyAccessible: " + getPubliclyAccessible() + ",");
        if (getApplyImmediately() != null)
            sb.append("applyImmediately: " + getApplyImmediately() + ",");
        if (getCaCertificateIdentifier() != null)
            sb.append("caCertificateIdentifier: " + getCaCertificateIdentifier());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime
                * hashCode
                + ((getRelationalDatabaseName() == null) ? 0 : getRelationalDatabaseName()
                        .hashCode());
        hashCode = prime * hashCode
                + ((getMasterUserPassword() == null) ? 0 : getMasterUserPassword().hashCode());
        hashCode = prime
                * hashCode
                + ((getRotateMasterUserPassword() == null) ? 0 : getRotateMasterUserPassword()
                        .hashCode());
        hashCode = prime
                * hashCode
                + ((getPreferredBackupWindow() == null) ? 0 : getPreferredBackupWindow().hashCode());
        hashCode = prime
                * hashCode
                + ((getPreferredMaintenanceWindow() == null) ? 0 : getPreferredMaintenanceWindow()
                        .hashCode());
        hashCode = prime
                * hashCode
                + ((getEnableBackupRetention() == null) ? 0 : getEnableBackupRetention().hashCode());
        hashCode = prime
                * hashCode
                + ((getDisableBackupRetention() == null) ? 0 : getDisableBackupRetention()
                        .hashCode());
        hashCode = prime * hashCode
                + ((getPubliclyAccessible() == null) ? 0 : getPubliclyAccessible().hashCode());
        hashCode = prime * hashCode
                + ((getApplyImmediately() == null) ? 0 : getApplyImmediately().hashCode());
        hashCode = prime
                * hashCode
                + ((getCaCertificateIdentifier() == null) ? 0 : getCaCertificateIdentifier()
                        .hashCode());
        return hashCode;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof UpdateRelationalDatabaseRequest == false)
            return false;
        UpdateRelationalDatabaseRequest other = (UpdateRelationalDatabaseRequest) obj;

        if (other.getRelationalDatabaseName() == null ^ this.getRelationalDatabaseName() == null)
            return false;
        if (other.getRelationalDatabaseName() != null
                && other.getRelationalDatabaseName().equals(this.getRelationalDatabaseName()) == false)
            return false;
        if (other.getMasterUserPassword() == null ^ this.getMasterUserPassword() == null)
            return false;
        if (other.getMasterUserPassword() != null
                && other.getMasterUserPassword().equals(this.getMasterUserPassword()) == false)
            return false;
        if (other.getRotateMasterUserPassword() == null
                ^ this.getRotateMasterUserPassword() == null)
            return false;
        if (other.getRotateMasterUserPassword() != null
                && other.getRotateMasterUserPassword().equals(this.getRotateMasterUserPassword()) == false)
            return false;
        if (other.getPreferredBackupWindow() == null ^ this.getPreferredBackupWindow() == null)
            return false;
        if (other.getPreferredBackupWindow() != null
                && other.getPreferredBackupWindow().equals(this.getPreferredBackupWindow()) == false)
            return false;
        if (other.getPreferredMaintenanceWindow() == null
                ^ this.getPreferredMaintenanceWindow() == null)
            return false;
        if (other.getPreferredMaintenanceWindow() != null
                && other.getPreferredMaintenanceWindow().equals(
                        this.getPreferredMaintenanceWindow()) == false)
            return false;
        if (other.getEnableBackupRetention() == null ^ this.getEnableBackupRetention() == null)
            return false;
        if (other.getEnableBackupRetention() != null
                && other.getEnableBackupRetention().equals(this.getEnableBackupRetention()) == false)
            return false;
        if (other.getDisableBackupRetention() == null ^ this.getDisableBackupRetention() == null)
            return false;
        if (other.getDisableBackupRetention() != null
                && other.getDisableBackupRetention().equals(this.getDisableBackupRetention()) == false)
            return false;
        if (other.getPubliclyAccessible() == null ^ this.getPubliclyAccessible() == null)
            return false;
        if (other.getPubliclyAccessible() != null
                && other.getPubliclyAccessible().equals(this.getPubliclyAccessible()) == false)
            return false;
        if (other.getApplyImmediately() == null ^ this.getApplyImmediately() == null)
            return false;
        if (other.getApplyImmediately() != null
                && other.getApplyImmediately().equals(this.getApplyImmediately()) == false)
            return false;
        if (other.getCaCertificateIdentifier() == null ^ this.getCaCertificateIdentifier() == null)
            return false;
        if (other.getCaCertificateIdentifier() != null
                && other.getCaCertificateIdentifier().equals(this.getCaCertificateIdentifier()) == false)
            return false;
        return true;
    }
}
