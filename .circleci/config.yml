# Android CircleCI 2.0 configuration file
#
version: 2.1
commands:
  configure_aws:
    description: >-
      install aws cli and configure android aws release profile 
    steps:
      - run:
          name: install aws cli
          command: |
            sudo pip install awscli
      - run:
          name: configure aws profile
          command: |
            aws configure --profile android_sdk_release set region us-east-1
            echo -e "[android_sdk_release]\naws_access_key_id=${AWS_ACCESS_KEY_ID_ANDROID}\naws_secret_access_key=${AWS_SECRET_ACCESS_KEY_ANDROID}\n" >> ~/.aws/credentials

  set_enviroment_vairables:
    description: >-
      set environment variables
    steps:
      - run:
          name: set environment variables 
          command: |
            sdkName=aws-android-sdk
            echo "export sdkName=$sdkName" >> $BASH_ENV

            release_bucket=${RELEASE_BUCKET}
            echo "export release_bucket=$release_bucket" >> $BASH_ENV            

            sdkNameWithVersion="$sdkName-$release_version"
            echo "export sdkNameWithVersion=$sdkNameWithVersion" >> $BASH_ENV

            release_tag=${CIRCLE_TAG}
            echo "export release_tag=$release_tag" >> $BASH_ENV

            release_version=$(echo "$release_tag" | sed 's|.*v\([0-9\.]*\).*|\1|') 
            echo "export release_version=$release_version" >> $BASH_ENV

jobs:
  build:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - run:
          name: build the whole project
          command: |
            echo "id=${android_distribution_id}" 
            bash gradlew build -x test

  buildforrelease:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - run:
          name: build the whole project
          command: bash gradlew build -x test
      - run:
          name: copy libs
          command: |
             rootfolder=$(pwd)
             python3 CircleciScripts/copy_libs.py  "$(pwd)" "$(pwd)/lib"
      - save_cache:
          key: Libs-{{ .Revision }}
          paths:
            - lib

  unittest:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - checkout
      - set_enviroment_vairables
      - run:
          name: run unit tests
          command: |
            python3 CircleciScripts/run_unittest.py "~/test_results" "$(pwd)"
      - run:
          name : check unit test result 
          command : |
            echo "testresult=$testresult"
            if [ "$testresult" == "0" ] 
            then
                echo "test succeed!"
            else
                echo "There are test failures"
                exit 1
            fi       
      - store_artifacts:
          path: "~/test_results"
  integrationtest:
    working_directory: ~/code
    docker:
      # Android the primary container
      - image: circleci/android@sha256:5cdc8626cc6f13efe5ed982cdcdb432b0472f8740fed8743a6461e025ad6cdfc
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - run: 
          name: install python3-pip
          command: |
            sudo apt-get update
            sudo apt-get -y install python3-pip     
      - run: 
          name: Install json parser
          command: sudo pip3 install demjson
      - run: 
          name: Install lxml
          command: sudo pip3 install lxml               
      - run:
          name: Configure test information
          command: |
            echo "${ANDROID_TESTS_INFORMATION_JSON}"  | base64 -di   > testinformation.json
            python3  CircleciScripts/replace_testinformation.py $(pwd) testinformation.json 
      - run:
          name: Setup emulator
          command: |
            sdkmanager "system-images;android-16;default;armeabi-v7a" && echo "no" | avdmanager create avd -n test -k "system-images;android-16;default;armeabi-v7a"
      - run:
          name: Launch emulator
          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel auto -verbose
          background: true
      - run:
          name: Wait emulator
          command: |
            echo "wait for emulator to have booted"
            circle-android wait-for-boot
            echo "unlock the emulator screen"
            sleep 30
            adb shell input keyevent 82
      - run:
          name: run integration tests
          command: |
            echo "${ANDROID_TESTS_CREDENTIALS_JSON}"  | base64 -di   > awsconfiguration.json
            python3 CircleciScripts/run_integrationtest.py "~/test_results" "$(pwd)" "$(pwd)/awsconfiguration.json"
      - run:
          name : check integration test result 
          command : |
            echo "testresult=$testresult"
            if [ "$testresult" == "0" ] 
            then
                echo "test succeed!"
            else
                echo "There are test failures"
                exit 1
            fi       
      - store_artifacts:
          path: awsconfiguration.json
      - store_artifacts:
          path: "~/test_results"
      - store_artifacts:
          path: aws-android-sdk-mobile-client/src/androidTest/java/com/amazonaws/mobile/client

  integrationtest11:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-25-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - run: 
          name: install python3-pip
          command: |
            sudo apt-get update
            sudo apt-get -y install python3-pip     
      - run: 
          name: Install json parser
          command: sudo pip3 install demjson
      - run: 
          name: Install lxml
          command: sudo pip3 install lxml               
      - run:
          name: Configure test information
          command: |
            echo "${ANDROID_TESTS_INFORMATION_JSON}"  | base64 -di   > testinformation.json
            python3  CircleciScripts/replace_testinformation.py $(pwd) testinformation.json 
      - run:
          name: Setup emulator
          command: |
            sdkmanager "system-images;android-25;google_apis;armeabi-v7a" && echo "no" | avdmanager create avd -n test -k "system-images;android-25;google_apis;armeabi-v7a"
      - run:
          name: Launch emulator
          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel auto -verbose
          background: true
      - run:
          name: Wait emulator
          command: |
            echo "wait for emulator to have booted"
            circle-android wait-for-boot
            echo "unlock the emulator screen"
            sleep 30
            adb shell input keyevent 82
      - run:
          name : check integration test result 
          command : |
            echo "testresult=$testresult"
            if [ "$testresult" == "0" ] 
            then
                echo "test succeed!"
            else
                echo "There are test failures"
                exit 1
            fi       
      - store_artifacts:
          path: awsconfiguration.json
      - store_artifacts:
          path: "~/test_results"


#       - run:
#           name: Install emulator dependencies
#           command: |
#             echo "accept licenses"
#             sudo yes | sdkmanager --licenses
#             echo "install platform"
#             sdkmanager "platforms;android-25"
#             sudo yes | sdkmanager --licenses
#             echo "install avd"
#             yes | sdkmanager  "system-images;android-25;google_apis;armeabi-v7a"  && yes | sdkmanager --licenses
#             echo "install emulator"
#             sudo apt-get install pulseaudio   

# # echo "install platform"
# # yes | sdkmanager "platform-tools" "platforms;android-25"    "build-tools;25.0.0" 
# # echo "install platform"
# # yes | sdkmanager "platform-tools" "platforms;android-25"  

          
#         #    yes | sdkmanager "platform-tools" "platforms;android-27" "extras;intel;Hardware_Accelerated_Execution_Manager" "build-tools;27.0.0" "emulator" --verbose 

#       - run:
#           name: Create avd
#        #   command: echo no | avdmanager create avd -n testEmulator -k "system-images;android-23;google_apis;armeabi-v7a"
#           command: |
#             export DISPLAY=:0.0
#             echo no | avdmanager create avd -n testEmulator2 -k "system-images;android-25;google_apis;armeabi-v7a" -g google_apis -d "Nexus 5"
  
#           #  avdmanager create avd -n testEmulator -k "system-images;android-27;google_apis;x86" -b x86 -c 100M -d 7 -f
    
#       - run:
#           name: list installed emulator
#           command: |
     
#             emulator  -list-avds


#             set  +e
#             sudo $ANDROID_HOME/platform-tools/adb -e reboot
#             ls $HOME/.android/avd


#       - run:
#           name: Start emulator
#           command: |
#             $ANDROID_HOME/emulator/emulator @testEmulator -no-audio -no-window
#           background: true
#           environment:
#             TERM: dumb
#       - run:
#           name: Wait for emulator
#           command: 
#             bash CircleciScripts/android-wait-for-boot.sh
#             $ANDROID_HOME/platform-tools/adb devices
#       - run:
#           name: Remove lock screen
#           command: |
#             $ANDROID_HOME/platform-tools/adb shell input keyevent 82
#             echo "current devices"
#             $ANDROID_HOME/platform-tools/adb devices

#       - run:
#           name: run integration tests
#           command: |
#             awsjson=$(echo ${ANDROID_TESTS_CREDENTIALS_JSON)  | base64 --decode )
#             python3 CircleciScripts/run_integrationtest.py "~/test_results" "$(pwd)" "$awsjson"
#       - run:
#           name : check integration test result 
#           command : |
#             echo "testresult=$testresult"
#             if [ "$testresult" == "0" ] 
#             then
#                 echo "test succeed!"
#             else
#                 echo "There are test failures"
#                 exit 1
#             fi       
#       - store_artifacts:
#           path: "~/test_results"


  release_tag:
    working_directory: ~/code
    docker:
      - image:  circleci/golang:1.11
    steps:
      - checkout
      - set_enviroment_vairables
      - run:
          name: install github-release
          command: go get github.com/aktau/github-release          
      - run:
          name: release the tag
          command: |
            tagdescription=$(sed -n "/## \[Release $release_version\]/,/## \[Release [0-9]*\.[0-9]*\.[0-9]\]/p"  CHANGELOG.md | sed '1d' | sed '$d')
            echo "$tagdescription" | github-release release  -s ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME}  -t $release_tag   --name  "$tagname" -d - 

  release_javadoc:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx3200m     
    steps:
      - checkout   
      - set_enviroment_vairables
      - run: 
          name: install python3-pip
          command: |
            sudo apt-get update
            sudo apt-get -y install python3-pip
      - run: 
          name: install json parser
          command: sudo pip3 install demjson
      - run:
          name: install aws cli
          command: |
            sudo pip install awscli
      - run:
          name: download third party libararies 
          command: |
            aws s3 cp  s3://android-circleci-payload/third-party/third-party.zip third-party.zip
            unzip third-party.zip
            cp "$ANDROID_HOME/platforms/android-27/android.jar"  third-party/android.jar
      - run:
          name: generate documents
          command: |
            currentfolder=$(pwd)
            python3 CircleciScripts/generate_javadoc.py CircleciScripts/ReleaseConfiguration.json "$currentfolder" build/javadoc third-party "$release_version"
      - run:
          name: check out gh-pages and preserve old document
          command: |
            git config --local user.name "${GITHUB_USER}"
            git checkout  gh-pages
            git checkout master CircleciScripts/preserve_olddocument.sh
            bash CircleciScripts/preserve_olddocument.sh
      - run:
          name: copy new document
          command: |
            cp -R build/javadoc/*   docs/reference/
      - run:
          name: check in documents
          command: |
            git add docs/reference
            git rm --cached  CircleciScripts/preserve_olddocument.sh
            git commit -m "AWS SDK for Android $release_version"
            git push -q https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git  
      - save_cache:
          key: API-Reference-{{ .Revision }}
          paths:
            - docs/reference/

  tag_doc:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx3200m     
    steps:
      - checkout   
      - set_enviroment_vairables
      - run:
          name: Add documentation tags to gh-pages
          command: |
            git config --local user.name "${GITHUB_USER}"
            git checkout  gh-pages
            git tag -a "docs_v$release_version"  -m "Add documentation tags to version $release_version"            
            git push --tags -q https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git     

  release_maven:
    macos: 
      xcode: "10.1.0"  #xocde version number does not matter here, we just need a macos image
    steps:
      - checkout    
      - configure_aws
      - set_enviroment_vairables
      - run:
          name: install android sdk tools
          command: |
            HOMEBREW_LOGS=~/homebrew-logs
            HOMEBREW_TEMP=~/homebrew-temp          
            brew update
            brew doctor  
            brew tap caskroom/cask
            brew cask install android-sdk
      - run:
          name: install android build tools
          command: |
            sudo yes | /usr/local/bin/sdkmanager "platforms;android-21" "platforms;android-27" "build-tools;27.0.1"  "extras;google;m2repository" "extras;android;m2repository"          
            /usr/local/bin/sdkmanager --update
      - run:
          name: Install gpg
          command: |
            brew install gnupg     
      - run:
         name: install maven
         command: |
            brew install maven                  
      - run:
          name: Set environment
          command: |
            echo ~
            ls /usr/local/share/android-sdk
            ANDROID_HOME="/usr/local/share/android-sdk"
            echo 'export ANDROID_HOME="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo "Home: ${HOME}"
            echo "JAVA_HOME: $JAVA_HOME"
            echo "ANDROID_HOME: $ANDROID_HOME"
            echo "PATH: $PATH"                    
            echo 'export ANDROID_PLATFORM="27"' >> $BASH_ENV
            echo 'export ANDROID_BUILDTOOL_VERSION="27.0.1"' >> $BASH_ENV
      - run:
          name: download gpghome
          command: |
            aws s3 cp s3://android-circleci-payload/gpghome/gpghome.zip gpghome.zip
            unzip -a gpghome.zip
      - run:
          name: publish to maven
          command: |
            echo "${HOME}"
            echo "$JAVA_HOME"
            echo "$ANDROID_HOME"
            echo "$M2_HOME"
            bash CircleciScripts/maven_release.sh
      # - run:
      #     name: upload to maven
      #     command: |
      #       python3 CircleciScripts/s3_maven.py "$(pwd)" $release_version android_sdk_release  "$release_bucket/com/amazonaws" 
            

  release_s3:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m     
    steps:
      - checkout   
      - configure_aws
      - set_enviroment_vairables
      - run:
          name: copy sdk resource
          command: |
            mkdir -p "$sdkNameWithVersion"
            python3 CircleciScripts/copy_resourcefiles.py "$(pwd)"  "$(pwd)/$sdkNameWithVersion"
      - restore_cache:
          key: Libs-{{ .Revision }}        
      - run:
          name: copy libs
          command: |
            mkdir -p "$sdkNameWithVersion/lib"
            cp -R  /home/circleci/code/lib/*  "$sdkNameWithVersion/lib"
      - restore_cache:
          key: API-Reference-{{ .Revision }}
      - run:
          name: copy documents
          command: |
            mkdir -p "$sdkNameWithVersion/documentation/javadoc"
            cp -R docs/reference/*  "$sdkNameWithVersion/documentation/javadoc"
      - run:
          name: copy third party 
          command: |
            aws s3 cp  s3://android-circleci-payload/third-party/third-party.zip third-party.zip
            unzip third-party.zip
            mv third-party  "$sdkNameWithVersion/third-party"           
      - run:
          name: zip sdk folder
          command: |
            zip -r "$sdkNameWithVersion.zip" "$sdkNameWithVersion"
      - run:
          name: upload to s3
          command: |
            aws s3 cp "$sdkNameWithVersion.zip" "s3://$release_bucket/$sdkNameWithVersion.zip"   --profile android_sdk_release   
            aws s3 cp "$sdkNameWithVersion.zip" "s3://$release_bucket/latest/$sdkName.zip"   --profile android_sdk_release   
      - run:
          name: invalidate cloudfront
          command: |
            python3 CircleciScripts/cloudfront_invalidate.py android_sdk_release  "${android_distribution_id}" "$sdkName.zip"

workflows:
  version: 2

  build_test:
    jobs: 
      - integrationtest 
      # - unittest:
      #     requires:
      #       - build         
  release_sdk:
    jobs:
      - buildforrelease:
          filters:
            branches:
              ignore: /.*/            
            tags:
              only: /^release_v[0-9]+.[0-9]+.[0-9]+$/      
      - unittest:
          requires:
            - buildforrelease         
          filters:
            branches:
              ignore: /.*/            
            tags:
              only: /^release_v[0-9]+.[0-9]+.[0-9]+$/               
      - release_maven:    
          requires:
            - unittest  
          filters:
            branches:
              ignore: /.*/            
            tags:
              only: /^release_v[0-9]+.[0-9]+.[0-9]+$/

      - release_javadoc:    
          requires:
            - unittest  
          filters:
            branches:
              ignore: /.*/            
            tags:
              only: /^release_v[0-9]+.[0-9]+.[0-9]+$/

      - tag_doc:    
          requires:
            - release_javadoc  
          filters:
            branches:
              ignore: /.*/            
            tags:
              only: /^release_v[0-9]+.[0-9]+.[0-9]+$/

      - release_s3:    
          requires:
            - release_javadoc  
            - release_maven
          filters:
            branches:
              ignore: /.*/            
            tags:
              only: /^release_v[0-9]+.[0-9]+.[0-9]+$/

      - release_tag:    
          requires:
            - release_s3                        
          filters:
            branches:
              ignore: /.*/            
            tags:
              only: /^release_v[0-9]+.[0-9]+.[0-9]+$/
