# Android CircleCI 2.0 configuration file
# 
version: 2.1
commands:
  quit_for_nominorversion:
    description: >-
      If current release is not a minor version bump, stop executing the current job and return success.
    steps:
      - run:
          name: skip left steps and return immediately from current job if current release is not a minor version bump
          command: |
            echo $release_version            
            maintenance=$(echo $release_version | sed "s/[0-9]*.[0-9]*.\([0-9]*\)/\1/")
            echo $maintenance
            if [ "$maintenance" != "0" ]; then
              echo "This is not minor version bump release, so marking this step successful"
              circleci step halt
            fi

  generate_gradle_wrapper:
    description: >-
      Downloads and install gradle 4.10.2
    steps:
      - run:
          name: Download gradle zip
          command: |
            cd ~
            wget https://services.gradle.org/distributions/gradle-4.10.2-bin.zip
            unzip gradle-4.10.2-bin.zip
      - run:
          name: Generate wrapper
          command: |
            cd ~/code # This is a pre-defined location
            ~/gradle-4.10.2/bin/gradle wrapper

  configure_aws:
    description: >-
      install aws cli and configure android aws release profile
    steps:
      - run:
          name: install aws cli
          command: |
            sudo pip install awscli
      - run:
          name: configure aws profile
          command: |
            aws configure --profile android_sdk_release set region us-east-1
            echo -e "[android_sdk_release]\naws_access_key_id=${AWS_ACCESS_KEY_ID_ANDROID}\naws_secret_access_key=${AWS_SECRET_ACCESS_KEY_ANDROID}\n" >> ~/.aws/credentials

            aws configure --profile android_sdk_test set region us-east-1
            echo -e "[android_sdk_test]\naws_access_key_id=${AWS_ACCESS_KEY_ID_TEST}\naws_secret_access_key=${AWS_SECRET_ACCESS_KEY_TEST}\n" >> ~/.aws/credentials
           

  set_enviroment_variables:
    description: >-
      set environment variables
    steps:
      - run:
          name: set environment variables
          command: |
            sdkName=aws-android-sdk
            echo "export sdkName='$sdkName'" >> $BASH_ENV

            release_bucket=${RELEASE_BUCKET}
            echo "export release_bucket='$release_bucket'" >> $BASH_ENV

            release_tag=${CIRCLE_TAG}
            echo "export release_tag='$release_tag'" >> $BASH_ENV

            release_version=$(echo "$release_tag" | sed 's|.*v\([0-9\.]*\).*|\1|')
            echo "export release_version='$release_version'" >> $BASH_ENV

            sdkNameWithVersion="$sdkName-$release_version"
            echo "export sdkNameWithVersion='$sdkNameWithVersion'" >> $BASH_ENV

            release_type=$(echo "$release_tag" | sed 's|\(.*\)_v\([0-9\.]*\).*|\1|')
            echo "export release_type='$release_type'" >> $BASH_ENV

            pre_name=$(echo "${CIRCLE_SHA1}" | cut -c1-7)
            override_test_varaible_name=OVERRIDE_TEST_${pre_name}
            echo "export override_test_varaible_name='$override_test_varaible_name'" >> $BASH_ENV
            


  setup_emulator:
    description: >-
      setup emulator
    steps:
      - run:
          name: Setup emulator
          command: |
            echo y | sdkmanager "system-images;android-24;default;armeabi-v7a" && echo "no" | avdmanager create avd -n test -k "system-images;android-24;default;armeabi-v7a"
      - run:
          name: Launch emulator
          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -no-boot-anim -no-window -accel auto -verbose
          background: true
      - run:
          name: Launch logcat
          command: 
            adb logcat > logcat.log
          background: true
      - run:
          name: Wait emulator
          command: |
            echo "wait for emulator to have booted"
            circle-android wait-for-boot
            python3 CircleciScripts/unlock_emulatorscreen.py 


  bump_version_pre:
    description: >-
      prepare bump version
    steps:
      - run:
          name: checkout repository for bump version
          command: |
            if [ -z "$target_branch" ]
            then 
              target_branch="master"
            fi

            git config --local user.name "${GITHUB_BUMPVERSION_USER}"
            git clone "https://github.com/${GITHUB_BUMPVERSION_USER}/${bumpversion_repo_name}.git"
            cd ${bumpversion_repo_name}
            git fetch
            branches=$(git branch)
            if [[ $branches == *"bump_version"* ]]; then    
              echo "the branch is already pesent"
              git checkout bump_version          
            else
              echo "create new branch bump_version"
              git checkout -b bump_version                 
            fi  
            git remote add upstream https://github.com/${bumpversion_repo_user}/${bumpversion_repo_name}
            git remote -v
            git fetch upstream
            git reset --hard upstream/$target_branch  
            echo "push update the branch"
            git push  --force   -q https://${GITHUB_BUMPVERSION_TOKEN}@github.com/${GITHUB_BUMPVERSION_USER}/${bumpversion_repo_name}.git

  bump_version_post:
    description: >-
      check in bump version change
    steps:
      - run: 
          name: stage changes
          command: |
            cd ${bumpversion_repo_name}
            git config --local user.name "${GITHUB_BUMPVERSION_USER}"
            gitstatus=$(git status)
            echo $gitstatus
            if [[ $gitstatus == *"Changes not staged for commit:"* ]]; then              
              git add .
            else
              echo "No changes for bump version"
              circleci step halt             
            fi                 
      - run:
          name: check in changes
          command: |
            if [ -z "$target_branch" ]
            then 
              target_branch="master"
            fi          
            cd ${bumpversion_repo_name}
            git status
            git config --local user.name "${GITHUB_BUMPVERSION_USER}"
            git commit -m "${bump_version_message}"            
            git push  --force   -q https://${GITHUB_BUMPVERSION_TOKEN}@github.com/${GITHUB_BUMPVERSION_USER}/${bumpversion_repo_name}.git
            title="${bump_version_pr_title}"
            content="${bump_version_message}" 
            echo "title:$title"
            echo "content:$content"
            python3 ../CircleciScripts/create_pullrequest.py  "${GITHUB_BUMPVERSION_USER}" "${GITHUB_BUMPVERSION_TOKEN}" "$title" "$content" "$target_branch" "${GITHUB_BUMPVERSION_USER}:bump_version" ${bumpversion_repo_user} ${bumpversion_repo_name}
  setup_android_platform23:
    description: >-
      setup android platform 23
    steps:
      - run:
          name: download android platform 23
          command: |
            # This is required becaused AWSCore has a compileOnly
            # dependency on API Level 23.
            sudo yes | sdkmanager "platforms;android-23"
  setup_android_platform18:
    description: >-
      setup android platform 18
    steps:
      - run:
          name: download android platform 18
          command: |
            # This is required becaused AWSCore has a compileOnly
            # dependency on API Level 18.
            sudo yes | sdkmanager "platforms;android-18"
  skip_test_job:
    description: >-
      check if the test job can be skipped
    steps:
      - run:
          name: skip the test job if commit message require skipping tests
          command: |
            commitmessage=$(git log --format=%B -n 1 ${CIRCLE_SHA1})
            if [[ "$commitmessage" =~ .*"[skip test]".* ]] 
            then 
               echo "skip the test job required from commit message"
               circleci step halt
            fi        
      - run:
          name: skip the test job if the release process is triggered by circleci
          command: |
            skipflag=$(echo "${SKIPTEST_FOR_RELEASE}") |  tr '[:upper:]' '[:lower:]' 
            if ! [ -z "${CIRCLE_TAG}" ]  && [ "$skipflag" == "true" ]
            then 
              tagmessage="git show ${CIRCLE_TAG}"
              echo $tagmessage
              if [[ "$tagmessage" =~ .*"Trigger release from circleci".* ]] 
              then
                 echo "The release is triggered by circleci. skip the job"
                 circleci step halt
              fi
            fi
      - run:
          name: skip the test job if this is merged from develop by circleci
          command: |
            skipflag=$(echo "${SKIPTEST_FOR_MASTER}") |  tr '[:upper:]' '[:lower:]' 
            commitmessage=$(git log --format=%B -n 1 ${CIRCLE_SHA1})
            if [ "$skipflag" == "true" ] && [[ "$commitmessage" =~ .*"[Merge develop to master by circleci]".* ]] 
            then 
               echo "This is merged from develop by circleci. skip the test job"
               circleci step halt
            fi

  override_test_job:
    description: >-
      skip the test job is project variabe OVERRIDE_TEST is set with TRUE
    steps:
      - run:
          name: skip test in master
          command: |
              notskipflag=$(echo "${NOT_SKIPTESTINMASTER}" |  tr '[:upper:]' '[:lower:]')
              if [ "${notskipflag}" != "true" ]  &&  [ "${CIRCLE_BRANCH}" == "master" ]
              then 
                echo "bypass test job in master"
                circleci step halt
              fi         
      - run:
          name: checkiftestcanoverrided 
          command: |
              echo "override_test_varaible_name=$override_test_varaible_name"
              override_test_value=$(eval "echo $"${override_test_varaible_name}"")
              override_test_value=$(echo "${override_test_value}" |  tr '[:upper:]' '[:lower:]')
              if [ "${override_test_value}" == "true" ]
              then
                echo "project enviroment variabe OVERRIDE_TEST is set with TRUE, skip all tests"
                circleci step halt
              fi    
  skip_job_if_required:
    description: >-
      skip job unless required
    steps:
      - run:
          name: skip_job_from_enviroment_variable
          command: |
              varaible_name=SKIP_JOB_${CIRCLE_JOB}
              
              skipjob_flag=$(eval "echo $"${varaible_name}"")
              skipjob_flag=$(echo "${skipjob_flag}" |  tr '[:upper:]' '[:lower:]')
              if [ "${skipjob_flag}" == "true" ]
              then
                echo "skip current job as ${varaible_name} is set in project environment variabes"
                circleci step halt
              fi             
      - run:
          name: skip_job_required_by_develops 
          command: |
            echo "check if job can be skipped"
            # # we can add script here to halt a job for circleci script test
            # declare -a jobs=("prepare_release_sdk" "merge_to_master" "bump_sdk_version")
            # for i in "${jobs[@]}"
            # do
            #   echo "$i":"${CIRCLE_JOB}"
            #   if [ "$i" == "${CIRCLE_JOB}" ]
            #   then 
            #     echo "not skip job $i"
            #     exit 0
            #   fi
            # done
            # circleci step halt
jobs:
  build:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - skip_job_if_required
      - checkout
      - generate_gradle_wrapper
      - setup_android_platform23
      - setup_android_platform18
      - run:
          name: build the whole project
          command: |
            bash gradlew build -x test
      - run:
          name: copy libs
          command: |
             rootfolder=$(pwd)
             python3 CircleciScripts/copy_libs.py  "$(pwd)" "$(pwd)/lib"
      - save_cache:
          key: Libs-{{ .Revision }}
          paths:
            - lib

  build_api10:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - skip_job_if_required      
      - checkout
      - generate_gradle_wrapper
      - run:
          name: download android-10
          command:
            sudo yes | sdkmanager "platforms;android-10"
      - run:
          name: install python3-pip
          command: |
            sudo apt-get update
            sudo apt-get -y install python3-pip            
      - run:
          name: install json parser
          command: sudo pip3 install demjson           
      - run:
          name: update code for api10
          command: |
            python3 CircleciScripts/replace_android10.py "$(pwd)"
            rm aws-android-sdk-core/src/main/java/com/amazonaws/internal/keyvaluestore/KeyProvider18.java
            rm aws-android-sdk-core/src/main/java/com/amazonaws/internal/keyvaluestore/KeyProvider23.java
            cat aws-android-sdk-core/src/main/java/com/amazonaws/internal/keyvaluestore/AWSKeyValueStore.java
      - run:
          name: build the whole project
          command: |
            bash gradlew :aws-android-sdk-core:build  -x test

  build_api18:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - skip_job_if_required      
      - checkout
      - generate_gradle_wrapper
      - run:
          name: download android-18
          command:
            sudo yes | sdkmanager "platforms;android-18"
      - run:
          name: install python3-pip
          command: |
            sudo apt-get update
            sudo apt-get -y install python3-pip            
      - run:
          name: install json parser
          command: sudo pip3 install demjson           
      - run:
          name: update code for API 18
          command: |
            python3 CircleciScripts/replace_android18.py "$(pwd)"
            rm aws-android-sdk-core/src/main/java/com/amazonaws/internal/keyvaluestore/KeyProvider23.java
            cat aws-android-sdk-core/src/main/java/com/amazonaws/internal/keyvaluestore/AWSKeyValueStore.java
      - run:
          name: build the whole project
          command: |
            export ANDROID_API_LEVEL=18; bash gradlew :aws-android-sdk-core:build -x test

  unittest:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - set_enviroment_variables
      - override_test_job
      - skip_job_if_required
      - checkout
      - skip_test_job
      - generate_gradle_wrapper
      - setup_android_platform23
      - setup_android_platform18
      - run:
          name: run unit tests
          command: |
            python3 CircleciScripts/run_unittest.py "~/test_results" "$(pwd)"
      - run:
          name : check unit test result
          command : |
            echo "testresult=$testresult"
            if [ "$testresult" == "0" ]
            then
                echo "test succeed!"
            else
                echo "There are test failures"
                exit 1
            fi
      - store_artifacts:
          path: "~/test_results"

  release_tag:
    working_directory: ~/code
    docker:
      - image:  circleci/golang:1.11
    steps:
      - skip_job_if_required
      - checkout
      - set_enviroment_variables
      - run:
          name: install github-release
          command: go get github.com/aktau/github-release
      - run:
          name: release the tag
          command: |
            tagname="AWS SDK for Android $release_version"
            tagdescription=$(sed -n "/## \[Release $release_version\]/,/## \[Release [0-9]*\.[0-9]*\.[0-9]\]/p"  CHANGELOG.md | sed '1d' | sed '$d')
            echo "$tagdescription" | github-release release  -s ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME}  -t $release_tag   --name  "$tagname" -d -

  release_javadoc:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - skip_job_if_required
      - checkout
      - set_enviroment_variables
      - run:
          name: install python3-pip
          command: |
            sudo apt-get update
            sudo apt-get -y install python3-pip
      - run:
          name: install json parser
          command: sudo pip3 install demjson
      - run:
          name: install aws cli
          command: |
            sudo pip install awscli
      - run:
          name: download third party libraries
          command: |
            aws s3 cp  s3://android-circleci-payload/third-party/third-party.zip third-party.zip
            unzip third-party.zip
            cp "$ANDROID_HOME/platforms/android-27/android.jar"  third-party/android.jar
      - run:
          name: generate documents
          command: |
            currentfolder=$(pwd)
            python3 CircleciScripts/generate_javadoc.py CircleciScripts/ReleaseConfiguration.json "$currentfolder" build/javadoc third-party "$release_version"
      - run:
          name: check out gh-pages and preserve old document
          command: |
            git config --local user.name "${GITHUB_USER}"
            git checkout  gh-pages
            git checkout master CircleciScripts/preserve_olddocument.sh
            bash CircleciScripts/preserve_olddocument.sh
      - run:
          name: copy new document
          command: |
            rm -rf docs/reference
            mkdir -p docs/reference
            cp -R build/javadoc/* docs/reference/
      - run:
          name: check in documents
          command: |
            git add docs/reference
            git rm --cached  CircleciScripts/preserve_olddocument.sh
            git commit -m "AWS SDK for Android $release_version"
            if [ "$release_type" == "release" ]
            then
                git push -q https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
            else
                echo "skip checkin API reference"
                zip -r docs.zip docs
            fi
      - store_artifacts:
          path: "docs.zip"
      - save_cache:
          key: API-Reference-{{ .Revision }}
          paths:
            - docs/reference/
      - run:
          name: Add documentation tags to gh-pages
          command: |
            git config --local user.name "${GITHUB_USER}"
            git checkout  gh-pages

            if [ "$release_type" == "release" ]
            then
                git tag -a "docs_v$release_version"  -m "Add documentation tags to version $release_version"
            else
                git tag -a "beta_docs_v$release_version"  -m "Add documentation tags to version $release_version"
            fi

            git push --tags -q https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git

  release_maven:
    macos:
      xcode: "10.1.0"  # Xcode version number does not matter here, we just need a MacOS image
    steps:
      - skip_job_if_required
      - checkout
      - configure_aws
      - set_enviroment_variables
      - run:
          name: Install Android SDK tools
          command: |
            HOMEBREW_LOGS=~/homebrew-logs
            HOMEBREW_TEMP=~/homebrew-temp
            brew update
            brew doctor
            brew tap caskroom/cask
            brew cask install android-sdk
      - run:
          name: Install Android build tools
          command: |
            sudo yes | /usr/local/bin/sdkmanager "platforms;android-18" "platforms;android-21" "platforms;android-23" "platforms;android-27" "build-tools;27.0.1"  "extras;google;m2repository" "extras;android;m2repository"
            /usr/local/bin/sdkmanager --update
      - run:
          name: Install GPG
          command: |
            brew install gnupg
      - run:
         name: Install Maven
         command: |
            brew install maven
      - run:
          name: Set environment variables
          command: |
            echo ~
            ls /usr/local/share/android-sdk
            ANDROID_HOME="/usr/local/share/android-sdk"
            echo 'export ANDROID_HOME="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo "Home: ${HOME}"
            echo "JAVA_HOME: $JAVA_HOME"
            echo "ANDROID_HOME: $ANDROID_HOME"
            echo "PATH: $PATH"
            echo 'export ANDROID_PLATFORM="27"' >> $BASH_ENV
            echo 'export ANDROID_BUILDTOOL_VERSION="27.0.1"' >> $BASH_ENV
      - run:
          name: Download gpghome
          command: |
            aws s3 cp s3://android-circleci-payload/gpghome/gpghome.zip gpghome.zip
            unzip -a gpghome.zip
      - run:
          name: publish to maven
          command: |
            echo "${HOME}"
            echo "$ANDROID_HOME"
            bash CircleciScripts/maven_release.sh
            mkdir m2
            cp -r ${HOME}/.m2/com/amazonaws/* m2
      - store_artifacts:
          path: m2
      # - run:
      #     name: upload to maven
      #     command: |
      #       python3 CircleciScripts/s3_maven.py "$(pwd)" $release_version android_sdk_release  "$release_bucket/com/amazonaws"

  release_s3:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - skip_job_if_required
      - checkout
      - configure_aws
      - set_enviroment_variables
      - run:
          name: Copy SDK resource files
          command: |
            mkdir -p "$sdkNameWithVersion"
            python3 CircleciScripts/copy_resourcefiles.py "$(pwd)"  "$(pwd)/$sdkNameWithVersion"
      - restore_cache:
          key: Libs-{{ .Revision }}
      - run:
          name: Copy libs
          command: |
            mkdir -p "$sdkNameWithVersion/lib"
            cp -R  /home/circleci/code/lib/*  "$sdkNameWithVersion/lib"
      - restore_cache:
          key: API-Reference-{{ .Revision }}
      - run:
          name: Copy API reference
          command: |
            mkdir -p "$sdkNameWithVersion/documentation/javadoc"
            cp -R docs/reference/*  "$sdkNameWithVersion/documentation/javadoc"
      - run:
          name: copy third party
          command: |
            aws s3 cp  s3://android-circleci-payload/third-party/third-party.zip third-party.zip
            unzip third-party.zip
            mv third-party  "$sdkNameWithVersion/third-party"

      - run:
          name: zip sdk folder
          command: |
            zip -r "$sdkNameWithVersion.zip" "$sdkNameWithVersion"

      - run:
          name: copy zip file
          command: |
            mkdir -p sdkfiles
            cp "$sdkNameWithVersion.zip" "sdkfiles/$sdkNameWithVersion.zip"
      - store_artifacts:
          path: sdkfiles
      - run:
          name: check current release release_type
          command: |
            if [ "$release_type" != "release" ]
            then
                echo "skip upload to s3 because this is not a release"
                circleci step halt
            fi
      - run:
          name: upload to s3
          command: |
            aws s3api put-object --bucket "$release_bucket" --key "$sdkNameWithVersion.zip" --body "$sdkNameWithVersion.zip" --content-disposition "attachment;filename=$sdkNameWithVersion.zip" --acl public-read  --profile android_sdk_release
            aws s3api put-object --bucket "$release_bucket" --key "latest/$sdkName.zip" --body "$sdkNameWithVersion.zip" --content-disposition "attachment;filename=$sdkNameWithVersion.zip" --acl public-read  --profile android_sdk_release
      - run:
          name: invalidate cloudfront
          command: |
            python3 CircleciScripts/cloudfront_invalidate.py android_sdk_release  "${android_distribution_id}" "latest/$sdkName.zip"

  pre_integrationtest:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - skip_job_if_required
      - override_test_job
      - set_enviroment_variables
      - run:
          name: get ovrride test variabe name 
          command: |
            echo "override_test_varaible_name=$override_test_varaible_name"
      - run:
          name: reset OVERRIDE_TEST environment variabe 
          command: |
            override_test_value=$(eval "echo $"${override_test_varaible_name}"")
            if ! [ -z "$override_test_value" ]
            then
              echo "reset  ${override_test_varaible_name} value"
              parameters='{"name":"'${override_test_varaible_name}'","value":"FALSE"}'
              curl -X POST \
                -H "Content-type: application/json" \
                -H "Accept: application/json" \
                -d "$parameters" \
                "https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/envvar?circle-token=${CIRCLE_API_USER_TOKEN}"
            fi
      - checkout
      - configure_aws
      - run:
          name: clean up aws server 
          command: |
            set +e
            bash CircleciScripts/cleanup_aws.sh

  post_integrationtest:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - skip_job_if_required
      - override_test_job
      - run:
          name: prepare
          command: echo "post_integrationtest"          

  integrationtest:
    description: run integration tests
    parameters:
      testmodule:
        type: string       
    working_directory: ~/code
    docker:
      # Android the primary container
      - image: circleci/android@sha256:5cdc8626cc6f13efe5ed982cdcdb432b0472f8740fed8743a6461e025ad6cdfc
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - skip_job_if_required
      - set_enviroment_variables
      - override_test_job
      - checkout
      - skip_test_job      
      - configure_aws
      - setup_android_platform23
      - setup_android_platform18
      - run: 
          name: install python3-pip
          command: |
            sudo apt-get update
            sudo apt-get -y install python3-pip     
      - run: 
          name: Install json parser
          command: sudo pip3 install demjson
      - run: 
          name: Install lxml
          command: sudo pip3 install lxml      
      - run:
          name: install sdk
          command: |
            sudo yes | sdkmanager "platforms;android-27"  
      - setup_emulator         
      - run:
          name: Configure test information
          command: |
            aws s3 cp s3://android-circleci-payload/testconfiguration.json aws-android-sdk-testutils/src/main/res/raw/testconfiguration.json
            aws s3 cp s3://android-circleci-payload/awsconfiguration.json  aws-android-sdk-mobile-client/src/androidTest/res/raw/awsconfiguration.json           
      - run:
          name: run integration tests
          command: |
            aws s3 cp s3://android-circleci-payload/gradle-wrapper.jar gradle/wrapper/gradle-wrapper.jar
            python3 CircleciScripts/run_integrationtest.py "~/test_results" "$(pwd)"  "<< parameters.testmodule >>"
      - run:
          name : check integration test result 
          command : |
            echo "testresult=$testresult"
            if [ "$testresult" == "0" ] 
            then
                echo "test succeed!"
            else
                echo "There are test failures"
                exit 1
            fi
      - store_artifacts:
          path: "~/test_results"
      - store_artifacts:
          path: logcat.log     

  uitest:
    working_directory: ~/code
    docker:
      # Android the primary container
      - image: circleci/android@sha256:5cdc8626cc6f13efe5ed982cdcdb432b0472f8740fed8743a6461e025ad6cdfc
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - set_enviroment_variables
      - skip_job_if_required
      - override_test_job      
      - checkout
      - skip_test_job      
      - configure_aws     
      - setup_android_platform23
      - setup_android_platform18
      - run:
          name: checkout sample applications
          command: |
            git clone https://github.com/sunchunqiang/aws-sdk-android-samples.git
      - restore_cache:
          key: Libs-{{ .Revision }}
      - run:
          name: copy third party
          command: |
            aws s3 cp  s3://android-circleci-payload/third-party/third-party.zip third-party.zip
            unzip third-party.zip
            cp third-party/**/*.jar  lib/
      - run:
          name: create aws configure json file
          command :
            echo "${S3SAMPLE_JSON}"  | base64 -di   > aws-sdk-android-samples/S3TransferUtilitySample/res/raw/awsconfiguration.json           
      - run:
          name: configure aws dependencies
          command: |
            python3 CircleciScripts/replace_awsdependencies.py "$(pwd)/aws-sdk-android-samples/S3TransferUtilitySample/build.gradle" "implementation fileTree(dir: '$(pwd)/lib', include: ['*.jar', '*.aar'])"
      - setup_emulator         
      - run:
          name: run sample ui test
          command: |
            cd aws-sdk-android-samples/S3TransferUtilitySample
            aws s3 cp s3://android-circleci-payload/gradle-wrapper.jar gradle/wrapper/gradle-wrapper.jar
            bash gradlew connectedAndroidTest
      - store_artifacts:
          path: "aws-sdk-android-samples/S3TransferUtilitySample/build/outputs"
      - store_artifacts:
          path: "aws-sdk-android-samples/S3TransferUtilitySample/build.gradle"
      - store_artifacts:
          path: logcat.log

  bump_sampleapp_version:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - skip_job_if_required
      - set_enviroment_variables
      - quit_for_nominorversion
      - checkout  
      - run:
          name: set_bumpversion_enviroment
          command: |
            bumpversion_repo_user=awslabs
            bumpversion_repo_name=aws-sdk-android-samples
            minorversion=$(echo $release_version | sed "s/\([0-9]*.[0-9]*\).[0-9]*/\1/")
            echo ${minorversion}
            bump_version_message="Update sample apps to use ${minorversion}.+ version of the SDK"
            bump_version_pr_title="Bump sample applications versions to ${minorversion}.+"
            echo "export bumpversion_repo_user=$bumpversion_repo_user" >> $BASH_ENV
            echo "export bumpversion_repo_name=$bumpversion_repo_name" >> $BASH_ENV
            echo "export minorversion=$minorversion" >> $BASH_ENV
            echo "export bump_version_message='${bump_version_message}'" >> $BASH_ENV
            echo "export bump_version_pr_title='${bump_version_pr_title}'" >> $BASH_ENV
            echo "bump_version_pr_title:$bump_version_pr_title"
      - bump_version_pre
      - run:
          name: bump version
          command:
            python3 CircleciScripts/bump_androidsample_version.py "$(pwd)/aws-sdk-android-samples" $release_version
      - bump_version_post

  bump_applifydocs_version:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - skip_job_if_required
      - set_enviroment_variables
      - quit_for_nominorversion
      - checkout  
      - run:
          name: set_bumpversion_enviroment
          command: |
            bumpversion_repo_user=aws-amplify
            bumpversion_repo_name=docs
            minorversion=$(echo $release_version | sed "s/\([0-9]*.[0-9]*\).[0-9]*/\1/")
            echo ${minorversion}
            bump_version_message="Update Android docs to ${release_version}"
            bump_version_pr_title="Update Android docs to ${release_version}"
            echo "export bumpversion_repo_user=$bumpversion_repo_user" >> $BASH_ENV
            echo "export bumpversion_repo_name=$bumpversion_repo_name" >> $BASH_ENV
            echo "export minorversion=$minorversion" >> $BASH_ENV
            echo "export bump_version_message='${bump_version_message}'" >> $BASH_ENV
            echo "export bump_version_pr_title='${bump_version_pr_title}'" >> $BASH_ENV
            echo "bump_version_pr_title:$bump_version_pr_title"
      - bump_version_pre
      - run:
          name: bump version
          command:
            python3 CircleciScripts/bump_amplifydocs_version.py "$(pwd)/${bumpversion_repo_name}/android" $release_version
      - bump_version_post
  bump_sdk_version:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - skip_job_if_required
      - set_enviroment_variables
      - checkout  
      - run: 
          name: install python3-pip
          command: |
            echo "${newsdkversion}"
            sudo apt-get update
            sudo apt-get -y install python3-pip     
      - run: 
          name: Install json parser
          command: sudo pip3 install demjson
      - run: 
          name: Install lxml
          command: sudo pip3 install lxml             
      - run:
          name: set_bumpversion_enviroment
          command: |
            git config --local user.name "${GITHUB_USER}"

            commitmessage=$(git log --format=%B -n 1 ${CIRCLE_SHA1})
            echo "commitmessage=$commitmessage"
            if [[ "$commitmessage" != *"bump version"* ]] 
            then
               echo "To bump sdk version, the commit message should contain the words 'bump version'"
               circleci step halt
            fi

            release_version=$(head version | grep -E "^[0-9]+.[0-9]+.[0-9]+" | sed "s/^\([0-9]*.[0-9]*.[0-9]*\).*/\1/")
            if [ -z "release_version" ]
            then 
              echo "version file does not have a correct version number"
              exit 1
            fi 
            echo "release_version=[$release_version]"          
            bumpversion_repo_user=${CIRCLE_PROJECT_USERNAME}
            bumpversion_repo_name=${CIRCLE_PROJECT_REPONAME}
            echo "bumpversion_repo_user:$bumpversion_repo_user"
            echo "bumpversion_repo_name:$bumpversion_repo_name"
            
            bump_version_message="[bump version $release_version]"
            bump_version_pr_title="[bump version $release_version]"
            target_branch=develop
            echo "export bumpversion_repo_user=$bumpversion_repo_user" >> $BASH_ENV
            echo "export bumpversion_repo_name=$bumpversion_repo_name" >> $BASH_ENV
            echo "export release_version=$release_version" >> $BASH_ENV
            echo "export bump_version_message='${bump_version_message}'" >> $BASH_ENV
            echo "export bump_version_pr_title='${bump_version_pr_title}'" >> $BASH_ENV
            echo "export target_branch='${target_branch}'" >> $BASH_ENV
            echo "bump_version_pr_title:$bump_version_pr_title"
      - bump_version_pre
      - run:
          name: bump version
          command: |
            cp -R ${bumpversion_repo_name}/CircleciScripts/ CircleciScripts/
            python3 CircleciScripts/bump_sdk_version.py "$(pwd)/${bumpversion_repo_name}" $release_version
      - bump_version_post

  merge_to_master:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - skip_job_if_required
      - checkout
      - set_enviroment_variables
      - run:
          name: merge change to master
          command: |
            git config --local user.name "${GITHUB_USER}"
            git status
            git checkout master
            git status
            git fetch origin
            git status
            git pull
            git status
            git clean -fd
            git status
            git push https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
            git status
            commitlog=$(git log master -20)
            currentcommit="${CIRCLE_SHA1}"
            echo "currentcommit=$currentcommit"
            echo "$commitlog"
            if [[ "$commitlog" =~ .*"commit $currentcommit".* ]] 
            then
               echo "The change is already merged"
            else
              echo "merge change from devlop to master"
              currentcommit="${CIRCLE_SHA1}"
              lastcommitmessage=$(git log --format=%B -n 1 ${currentcommit})
              git status
              git merge develop   
              git status
              echo "push change"
              git push https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
            fi


  prepare_release_sdk:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - skip_job_if_required 
      - checkout 
      - set_enviroment_variables
      - run:
          name: trigger release_sdk if curremt commit is a bump version
          command: |
            git config --local user.name "${GITHUB_USER}"
            currentcommit="${CIRCLE_SHA1}"
            echo $currentcommit
            commitmessage=$(git log --format=%B -n 1 ${currentcommit})
            echo "commitmessage=$commitmessage"
            set +e
            release_version=$(echo "$commitmessage" | grep -E "\[bump version [0-9]+.[0-9]+.[0-9]+\]" | sed 's/.*\[bump version \([0-9]*.[0-9]*.[0-9]*\)\].*/\1/')
            echo "rellease_version=$release_version"
            if [ -z "$release_version" ]
            then 
              echo "this is not a bump version commit"
            else
              echo "tag branch, start release"
              git tag -a "release_v$release_version"  -m "Release AWS SDK for Android $release_version. Trigger release from circleci"
              git push --tags -q https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
            fi

  create_pullrequest_for_modelupdate:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - skip_job_if_required
      - checkout
      - set_enviroment_variables
      - run:
          name: create pull request
          command: |
            target_branch="develop"
            title=${CIRCLE_BRANCH}       
            content="${CIRCLE_BRANCH}" 
            python3 ./CircleciScripts/create_pullrequest.py  "${GITHUB_USER}" "${GITHUB_TOKEN}" "$title" "$content" "$target_branch" "${CIRCLE_PROJECT_USERNAME}:${CIRCLE_BRANCH}" ${CIRCLE_PROJECT_USERNAME} ${CIRCLE_PROJECT_REPONAME}

  check_sdk_on_maven:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - skip_job_if_required      
      - checkout
      - set_enviroment_variables
      - run: 
          name: install python3-pip
          command: |
            ls ./CircleciScripts
            sudo apt-get update
            sudo apt-get -y install python3-pip     
      - run: 
          name: Install json parser
          command: sudo pip3 install demjson     
      - run: 
          name: Install requests
          command: sudo pip3 install requests                
      - run:
          name: check packages on maven
          command: |
            latest_release_tag=$(git describe --abbrev=0 --tags)
            latest_release_version=$(echo "$latest_release_tag" | sed 's|.*v\([0-9\.]*\).*|\1|')
            python3 ./CircleciScripts/check_sdk_on_maven.py "${latest_release_version}" ${ALARM_EMAIL_FROM} ${ALARM_EMAIL_TO}
            
  run_integrationtest_on_devicefarm:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - run:
          name: quit if test already run for the last commit
          command: |
            echo "${LAST_RUN_COMMITID}:${CIRCLE_SHA1}"
            if [ "${LAST_RUN_COMMITID}" == "${CIRCLE_SHA1}" ]
            then
              echo "integration test alrady run on device farm for last commit ${CIRCLE_SHA1}"
              circleci step halt              
            fi
      - skip_job_if_required
      - set_enviroment_variables
      - override_test_job
      - checkout
      - skip_test_job      
      - configure_aws
      - setup_android_platform23
      - setup_android_platform18
      - run: 
          name: install python3-pip
          command: |
            sudo apt-get update
            sudo apt-get -y install python3-pip     
      - run: 
          name: Install json parser
          command: sudo pip3 install demjson
      - run: 
          name: Install lxml
          command: sudo pip3 install lxml      
      - run: 
          name: Install Boto3
          command: sudo pip3 install Boto3 
      - run: 
          name: Install markdown2
          command: sudo pip3 install markdown2           
      - run:
          name: install sdk
          command: |
            sudo yes | sdkmanager "platforms;android-27"  
      - run:
          name: download devicefarm configure file
          command: |
            aws s3 cp s3://android-circleci-payload/gradle-wrapper.jar gradle/wrapper/gradle-wrapper.jar
            aws s3 cp s3://android-circleci-payload/devicefarm_configure.json devicefarm_configure.json
      - run:
          name: Configure test information
          command: |
            aws s3 cp s3://android-circleci-payload/testconfiguration.json aws-android-sdk-testutils/src/main/res/raw/testconfiguration.json
            aws s3 cp s3://android-circleci-payload/awsconfiguration.json  aws-android-sdk-mobile-client/src/androidTest/res/raw/awsconfiguration.json                       
      - run:
          name: launch integration test on device farm
          command: |
            python3 CircleciScripts/runtest_on_devicefarm.py "$(pwd)" "$(pwd)/devicefarm_configure.json" "${CIRCLE_SHA1}"
      - run:
          name: set environment variables
          command: |
            parameters='{"name":"LAST_RUN_COMMITID","value":"'${CIRCLE_SHA1}'"}'
            curl -X POST \
              -H "Content-type: application/json" \
              -H "Accept: application/json" \
              -d "$parameters" \
              "https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/envvar?circle-token=${CIRCLE_API_USER_TOKEN}"
  check_testresult_on_devicefarm:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - set_enviroment_variables
      - checkout  
      - configure_aws
      - run: 
          name: install python3-pip
          command: |
            sudo apt-get update
            sudo apt-get -y install python3-pip     
      - run: 
          name: Install json parser
          command: sudo pip3 install demjson
      - run: 
          name: Install lxml
          command: sudo pip3 install lxml      
      - run: 
          name: Install Boto3
          command: sudo pip3 install Boto3 
      - run: 
          name: Install markdown2
          command: sudo pip3 install markdown2           
      - run:
          name: download devicefarm configure file
          command: |
            aws s3 cp s3://android-circleci-payload/devicefarm_configure.json devicefarm_configure.json
      - run:
          name: check integration test result on device farm
          command: |
            python3 CircleciScripts/get_testresult_on_devicefarm.py "$(pwd)/devicefarm_configure.json" "${LAST_RUN_COMMITID}"


workflows:
  version: 2
  check_sdk_on_maven:
    triggers:
      - schedule:
        # run the job at 8AM PST every day
          cron: "0 15 * * *"
          filters:
            branches:
              only:
                - master      
    jobs:
      - check_sdk_on_maven  
  run_integrationtest_on_devicefarm:
    triggers:
      - schedule:
        # run the job at 8PM PST every day
          cron: "0 3 * * *"
          filters:
            branches:
              only:
                - master      
    jobs:
      - run_integrationtest_on_devicefarm  

  check_testresult_on_devicefarm:
    triggers:
      - schedule:
        # run the job at 8AM PST every day
          cron: "0 15 * * *"
          filters:
            branches:
              only:
                - master      
    jobs:
      - check_testresult_on_devicefarm    
  bump_sdk_version:
    jobs:
      - bump_sdk_version:
          filters:
            branches:
              only: bump_sdk_version          
  build_test:
    jobs:
      - build:
          filters:
            branches:
              ignore: bump_sdk_version     
      - build_api10:
          filters:
            branches:
              ignore: bump_sdk_version
      - build_api18:
          filters:
            branches:
              ignore: bump_sdk_version                     
      - unittest:
          filters:
            branches:
              ignore: bump_sdk_version
      - create_pullrequest_for_modelupdate:
          filters:
            branches:
              only:
                - /^models-update-.+$/      
      - pre_integrationtest: 
           filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: apigateway
          testmodule: aws-android-sdk-apigateway-test
          requires:
            - pre_integrationtest          
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: autoscaling
          testmodule: aws-android-sdk-autoscaling-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: cloudwatch
          testmodule: aws-android-sdk-cloudwatch-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: comprehend
          testmodule: aws-android-sdk-comprehend-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: ddb-mapper
          testmodule: aws-android-sdk-ddb-mapper-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: ddb
          testmodule: aws-android-sdk-ddb-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: elb
          testmodule: aws-android-sdk-elb-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: iot
          testmodule: aws-android-sdk-iot
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: kinesis
          testmodule: aws-android-sdk-kinesis-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: lambda
          testmodule: aws-android-sdk-lambda-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: polly
          testmodule: aws-android-sdk-polly-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: rekognition
          testmodule: aws-android-sdk-rekognition-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: s3
          testmodule: aws-android-sdk-s3-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: sdb
          testmodule: aws-android-sdk-sdb-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: ses
          testmodule: aws-android-sdk-ses-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: sns
          testmodule: aws-android-sdk-sns-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: sqs
          testmodule: aws-android-sdk-sqs-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: transcribe
          testmodule: aws-android-sdk-transcribe-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: translate
          testmodule: aws-android-sdk-translate-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: textract
          testmodule: aws-android-sdk-textract-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: mobile-client
          testmodule: aws-android-sdk-mobile-client
          requires:
            - pre_integrationtest    
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: CognitoIdentityProvider
          testmodule: aws-android-sdk-cognitoidentityprovider-test
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: Core
          testmodule: aws-android-sdk-core-test
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: CognitoAuth
          testmodule: aws-android-sdk-cognitoauth
          requires:
            - pre_integrationtest
          filters:
            branches:
              only:
                - master
                - develop
      - integrationtest:
          name: sagemakerruntime
          testmodule: aws-android-sdk-sagemaker-runtime-test
          requires:
          - pre_integrationtest
          filters:
            branches:
              only:
              - master
              - develop
      # - integrationtest:
      #     name: kinesisvideo
      #     testmodule: aws-android-sdk-kinesisvideo
      #     requires:
      #       - pre_integrationtest    
      #     filters:
      #       branches:
      #         only:
      #           - master
      #           - develop   
      # - integrationtest:
      #     name: machinelearning
      #     testmodule: aws-android-sdk-machinelearning
      #     requires:
      #       - pre_integrationtest    
      #     filters:
      #       branches:
      #         only:
      #           - master
      #           - develop
      # - integrationtest:
      #     name: kinesisvideo-archivedmedia
      #     testmodule: aws-android-sdk-kinesisvideo-archivedmedia
      #     requires:
      #       - pre_integrationtest    
      #     filters:
      #       branches:
      #         only:
      #           - master
      #           - develop
      - post_integrationtest:
          requires:
            # - kinesisvideo-archivedmedia
            # - kinesisvideo
            - mobile-client
            - textract
            - translate
            - transcribe
            - sqs 
            - sns
            - ses
            - sdb
            - s3
            - rekognition
            - polly
            # - machinelearning
            - lambda
            - kinesis
            - iot
            - elb
            - ddb
            - ddb-mapper
            - comprehend
            - cloudwatch
            - autoscaling
            - apigateway
            - CognitoAuth
            - Core
            - CognitoIdentityProvider
            - sagemakerruntime
      - uitest:
          requires:
            - build
            - pre_integrationtest
          filters:
            branches:
              only:
                - master
                - develop
      - merge_to_master:
          requires:
            - build_api10
            - build_api18
            - build       
            - unittest
            - post_integrationtest
          filters:
            branches:
              only:
                - develop        
      - prepare_release_sdk:
          requires:
            - build_api10
            - build_api18
            - build       
            - unittest
            - post_integrationtest
          filters:
            branches:
              only:
                - master         
  release_sdk:
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - build_api10:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - build_api18:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/                
      - unittest:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - pre_integrationtest:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:  
          name: apigateway
          testmodule: aws-android-sdk-apigateway-test
          requires:
            - pre_integrationtest          
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: autoscaling
          testmodule: aws-android-sdk-autoscaling-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: cloudwatch
          testmodule: aws-android-sdk-cloudwatch-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: comprehend
          testmodule: aws-android-sdk-comprehend-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: ddb-mapper
          testmodule: aws-android-sdk-ddb-mapper-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/ 
      - integrationtest:
          name: ddb
          testmodule: aws-android-sdk-ddb-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/  
      - integrationtest:
          name: elb
          testmodule: aws-android-sdk-elb-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/  
      - integrationtest:
          name: iot
          testmodule: aws-android-sdk-iot
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/  
 
      - integrationtest:
          name: kinesis
          testmodule: aws-android-sdk-kinesis-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/  
      - integrationtest:
          name: lambda
          testmodule: aws-android-sdk-lambda-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/  
      - integrationtest:
          name: polly
          testmodule: aws-android-sdk-polly-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/  
      - integrationtest:
          name: rekognition
          testmodule: aws-android-sdk-rekognition-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/  
      - integrationtest:
          name: s3
          testmodule: aws-android-sdk-s3-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/  
      - integrationtest:
          name: sdb
          testmodule: aws-android-sdk-sdb-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/                                
      - integrationtest:
          name: ses
          testmodule: aws-android-sdk-ses-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/                                
      - integrationtest:
          name: sns
          testmodule: aws-android-sdk-sns-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: sqs
          testmodule: aws-android-sdk-sqs-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: transcribe
          testmodule: aws-android-sdk-transcribe-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: textract
          testmodule: aws-android-sdk-textract-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: translate
          testmodule: aws-android-sdk-translate-test
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: mobile-client
          testmodule: aws-android-sdk-mobile-client
          requires:
            - pre_integrationtest    
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: CognitoIdentityProvider
          testmodule: aws-android-sdk-cognitoidentityprovider-test
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: Core
          testmodule: aws-android-sdk-core-test
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: CognitoAuth
          testmodule: aws-android-sdk-cognitoauth
          requires:
            - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - integrationtest:
          name: sagemakerruntime
          testmodule: aws-android-sdk-sagemaker-runtime-test
          requires:
          - pre_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      # - integrationtest:
      #     name: kinesisvideo
      #     testmodule: aws-android-sdk-kinesisvideo
      #     requires:
      #       - pre_integrationtest    
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/   
      # - integrationtest:
      #     name: machinelearning
      #     testmodule: aws-android-sdk-machinelearning 
      #     requires:
      #       - pre_integrationtest    
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/         
      # - integrationtest:
      #     name: kinesisvideo-archivedmedia
      #     testmodule: aws-android-sdk-kinesisvideo-archivedmedia
      #     requires:
      #       - pre_integrationtest    
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/                         
      - post_integrationtest:
          requires:
            # - kinesisvideo-archivedmedia
            # - kinesisvideo
            - mobile-client
            - textract
            - translate
            - transcribe
            - sqs 
            - sns
            - ses
            - sdb
            - s3
            - rekognition
            - polly
            # - machinelearning
            - lambda
            - kinesis
            - iot
            - elb
            - ddb
            - ddb-mapper
            - comprehend
            - cloudwatch
            - autoscaling
            - apigateway
            - CognitoAuth
            - Core
            - CognitoIdentityProvider
            - sagemakerruntime
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/

      - release_maven:
          requires:
            - unittest
            - post_integrationtest
            - build_api10
            - build_api18
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - release_javadoc:
          requires:
            - unittest
            - post_integrationtest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - release_s3:
          requires:
            - build
            - release_javadoc
            - release_maven
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - release_tag:
          requires:
            - release_s3
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - bump_sampleapp_version:
          requires:
            - release_tag
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - bump_applifydocs_version:
          requires:
            - release_tag
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
