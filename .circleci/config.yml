# Android CircleCI 2.0 configuration file
#
version: 2.1
commands:
  quit_for_nominorversion:
    description: >-
      If current release is not a minor version bump, stop executing the current job and return success.
    steps:
      - run:
          name: skip left steps and return immediately from current job if current release is not a minor version bump
          command: |
            echo $release_version            
            maintenance=$(echo $release_version | sed "s/[0-9]*.[0-9]*.\([0-9]*\)/\1/")
            echo $maintenance
            if [ "$maintenance" != "0" ]; then
              echo "This is not minor version bump release, so marking this step successful"
              circleci step halt
            fi

  generate_gradle_wrapper:
    description: >-
      Downloads and install gradle 4.10.2
    steps:
      - run:
          name: Download gradle zip
          command: |
            cd ~
            wget https://services.gradle.org/distributions/gradle-4.10.2-bin.zip
            unzip gradle-4.10.2-bin.zip
      - run:
          name: Generate wrapper
          command: |
            cd ~/code # This is a pre-defined location
            ~/gradle-4.10.2/bin/gradle wrapper

  configure_aws:
    description: >-
      install aws cli and configure android aws release profile
    steps:
      - run:
          name: install aws cli
          command: |
            sudo pip install awscli
      - run:
          name: configure aws profile
          command: |
            aws configure --profile android_sdk_release set region us-east-1
            echo -e "[android_sdk_release]\naws_access_key_id=${AWS_ACCESS_KEY_ID_ANDROID}\naws_secret_access_key=${AWS_SECRET_ACCESS_KEY_ANDROID}\n" >> ~/.aws/credentials

  set_enviroment_variables:
    description: >-
      set environment variables
    steps:
      - run:
          name: set environment variables
          command: |
            sdkName=aws-android-sdk
            echo "export sdkName=$sdkName" >> $BASH_ENV

            release_bucket=${RELEASE_BUCKET}
            echo "export release_bucket=$release_bucket" >> $BASH_ENV

            release_tag=${CIRCLE_TAG}
            echo "export release_tag=$release_tag" >> $BASH_ENV

            release_version=$(echo "$release_tag" | sed 's|.*v\([0-9\.]*\).*|\1|')
            echo "export release_version=$release_version" >> $BASH_ENV

            sdkNameWithVersion="$sdkName-$release_version"
            echo "export sdkNameWithVersion=$sdkNameWithVersion" >> $BASH_ENV

            release_type=$(echo "$release_tag" | sed 's|\(.*\)_v\([0-9\.]*\).*|\1|')
            echo "export release_type=$release_type" >> $BASH_ENV

  setup_emulator:
    description: >-
      setup emulator
    steps:
      - run:
          name: Setup emulator
          command: |
            echo y | sdkmanager "system-images;android-24;default;armeabi-v7a" && echo "no" | avdmanager create avd -n test -k "system-images;android-24;default;armeabi-v7a"
      - run:
          name: Launch emulator
          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -no-boot-anim -no-window -accel auto -verbose
          background: true
      - run:
          name: Launch logcat
          command: 
            adb logcat > logcat.log
          background: true
      - run:
          name: Wait emulator
          command: |
            echo "wait for emulator to have booted"
            circle-android wait-for-boot
            python3 CircleciScripts/unlock_emulatorscreen.py 


  bump_version_pre:
    description: >-
      prepare bump version
    steps:
      - run:
          name: checkout repository for bump version
          command: |
            git config --local user.name "${GITHUB_BUMPVERSION_USER}"
            git clone "https://github.com/${GITHUB_BUMPVERSION_USER}/${bumpversion_repo_name}.git"
            cd ${bumpversion_repo_name}
            git fetch
            branches=$(git branch)
            if [[ $branches == *"bump_version"* ]]; then    
              echo "the branch is already pesent"
              git checkout bump_version          
            else
              echo "create new branch bump_version"
              git checkout -b bump_version                 
            fi  
            git remote add upstream https://github.com/${bumpversion_repo_user}/${bumpversion_repo_name}
            git remote -v
            git fetch upstream
            git reset --hard upstream/master  
            echo "push update the branch"
            git push  --force   -q https://${GITHUB_BUMPVERSION_TOKEN}@github.com/${GITHUB_BUMPVERSION_USER}/${bumpversion_repo_name}.git

  bump_version_post:
    description: >-
      check in bump version change
    steps:
      - run: 
          name: stage changes
          command: |
            cd ${bumpversion_repo_name}
            git config --local user.name "${GITHUB_BUMPVERSION_USER}"
            gitstatus=$(git status)
            echo $gitstatus
            if [[ $gitstatus == *"Changes not staged for commit:"* ]]; then              
              git add .
            else
              echo "No changes for bump version"
              circleci step halt             
            fi                 
      - run:
          name: check in changes
          command: |
            cd ${bumpversion_repo_name}
            git status
            git config --local user.name "${GITHUB_BUMPVERSION_USER}"
            git commit -m "${bump_version_message}"            
            git push  --force   -q https://${GITHUB_BUMPVERSION_TOKEN}@github.com/${GITHUB_BUMPVERSION_USER}/${bumpversion_repo_name}.git
            title="${bump_version_pr_title}"
            content="${bump_version_message}" 
            echo "title:$title"
            echo "content:$content"
            python3 ../CircleciScripts/create_pullrequest.py  "${GITHUB_BUMPVERSION_USER}" "${GITHUB_BUMPVERSION_TOKEN}" "$title" "$content" "master" "${GITHUB_BUMPVERSION_USER}:bump_version" ${bumpversion_repo_user} ${bumpversion_repo_name}


jobs:
  build:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - generate_gradle_wrapper
      - run:
          name: build the whole project
          command: |
            bash gradlew build -x test
      - run:
          name: copy libs
          command: |
             rootfolder=$(pwd)
             python3 CircleciScripts/copy_libs.py  "$(pwd)" "$(pwd)/lib"
      - save_cache:
          key: Libs-{{ .Revision }}
          paths:
            - lib

  unittest:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - checkout
      - generate_gradle_wrapper
      - run:
          name: run unit tests
          command: |
            python3 CircleciScripts/run_unittest.py "~/test_results" "$(pwd)"
      - run:
          name : check unit test result
          command : |
            echo "testresult=$testresult"
            if [ "$testresult" == "0" ]
            then
                echo "test succeed!"
            else
                echo "There are test failures"
                exit 1
            fi
      - store_artifacts:
          path: "~/test_results"

  release_tag:
    working_directory: ~/code
    docker:
      - image:  circleci/golang:1.11
    steps:
      - checkout
      - set_enviroment_variables
      - run:
          name: install github-release
          command: go get github.com/aktau/github-release
      - run:
          name: release the tag
          command: |
            tagname="AWS SDK for Android $release_version"
            tagdescription=$(sed -n "/## \[Release $release_version\]/,/## \[Release [0-9]*\.[0-9]*\.[0-9]\]/p"  CHANGELOG.md | sed '1d' | sed '$d')
            echo "$tagdescription" | github-release release  -s ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME}  -t $release_tag   --name  "$tagname" -d -

  release_javadoc:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - set_enviroment_variables
      - run:
          name: install python3-pip
          command: |
            sudo apt-get update
            sudo apt-get -y install python3-pip
      - run:
          name: install json parser
          command: sudo pip3 install demjson
      - run:
          name: install aws cli
          command: |
            sudo pip install awscli
      - run:
          name: download third party libraries
          command: |
            aws s3 cp  s3://android-circleci-payload/third-party/third-party.zip third-party.zip
            unzip third-party.zip
            cp "$ANDROID_HOME/platforms/android-27/android.jar"  third-party/android.jar
      - run:
          name: generate documents
          command: |
            currentfolder=$(pwd)
            python3 CircleciScripts/generate_javadoc.py CircleciScripts/ReleaseConfiguration.json "$currentfolder" build/javadoc third-party "$release_version"
      - run:
          name: check out gh-pages and preserve old document
          command: |
            git config --local user.name "${GITHUB_USER}"
            git checkout  gh-pages
            git checkout master CircleciScripts/preserve_olddocument.sh
            bash CircleciScripts/preserve_olddocument.sh
      - run:
          name: copy new document
          command: |
            rm -rf docs/reference
            mkdir -p docs/reference
            cp -R build/javadoc/* docs/reference/
      - run:
          name: check in documents
          command: |
            git add docs/reference
            git rm --cached  CircleciScripts/preserve_olddocument.sh
            git commit -m "AWS SDK for Android $release_version"
            if [ "$release_type" == "release" ]
            then
                git push -q https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
            else
                echo "skip checkin API reference"
                zip -r docs.zip docs
            fi
      - store_artifacts:
          path: "docs.zip"
      - save_cache:
          key: API-Reference-{{ .Revision }}
          paths:
            - docs/reference/
      - run:
          name: Add documentation tags to gh-pages
          command: |
            git config --local user.name "${GITHUB_USER}"
            git checkout  gh-pages

            if [ "$release_type" == "release" ]
            then
                git tag -a "docs_v$release_version"  -m "Add documentation tags to version $release_version"
            else
                git tag -a "beta_docs_v$release_version"  -m "Add documentation tags to version $release_version"
            fi

            git push --tags -q https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git

  release_maven:
    macos:
      xcode: "10.1.0"  # Xcode version number does not matter here, we just need a MacOS image
    steps:
      - checkout
      - configure_aws
      - set_enviroment_variables
      - run:
          name: Install Android SDK tools
          command: |
            HOMEBREW_LOGS=~/homebrew-logs
            HOMEBREW_TEMP=~/homebrew-temp
            brew update
            brew doctor
            brew tap caskroom/cask
            brew cask install android-sdk
      - run:
          name: Install Android build tools
          command: |
            sudo yes | /usr/local/bin/sdkmanager "platforms;android-21" "platforms;android-27" "build-tools;27.0.1"  "extras;google;m2repository" "extras;android;m2repository"
            /usr/local/bin/sdkmanager --update
      - run:
          name: Install GPG
          command: |
            brew install gnupg
      - run:
         name: Install Maven
         command: |
            brew install maven
      - run:
          name: Set environment variables
          command: |
            echo ~
            ls /usr/local/share/android-sdk
            ANDROID_HOME="/usr/local/share/android-sdk"
            echo 'export ANDROID_HOME="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo "Home: ${HOME}"
            echo "JAVA_HOME: $JAVA_HOME"
            echo "ANDROID_HOME: $ANDROID_HOME"
            echo "PATH: $PATH"
            echo 'export ANDROID_PLATFORM="27"' >> $BASH_ENV
            echo 'export ANDROID_BUILDTOOL_VERSION="27.0.1"' >> $BASH_ENV
      - run:
          name: Download gpghome
          command: |
            aws s3 cp s3://android-circleci-payload/gpghome/gpghome.zip gpghome.zip
            unzip -a gpghome.zip
      - run:
          name: publish to maven
          command: |
            echo "${HOME}"
            echo "$ANDROID_HOME"
            bash CircleciScripts/maven_release.sh
            mkdir m2
            cp -r ${HOME}/.m2/com/amazonaws/* m2
      - store_artifacts:
          path: m2
      # - run:
      #     name: upload to maven
      #     command: |
      #       python3 CircleciScripts/s3_maven.py "$(pwd)" $release_version android_sdk_release  "$release_bucket/com/amazonaws"

  release_s3:
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx1024m
    steps:
      - checkout
      - configure_aws
      - set_enviroment_variables
      - run:
          name: Copy SDK resource files
          command: |
            mkdir -p "$sdkNameWithVersion"
            python3 CircleciScripts/copy_resourcefiles.py "$(pwd)"  "$(pwd)/$sdkNameWithVersion"
      - restore_cache:
          key: Libs-{{ .Revision }}
      - run:
          name: Copy libs
          command: |
            mkdir -p "$sdkNameWithVersion/lib"
            cp -R  /home/circleci/code/lib/*  "$sdkNameWithVersion/lib"
      - restore_cache:
          key: API-Reference-{{ .Revision }}
      - run:
          name: Copy API reference
          command: |
            mkdir -p "$sdkNameWithVersion/documentation/javadoc"
            cp -R docs/reference/*  "$sdkNameWithVersion/documentation/javadoc"
      - run:
          name: copy third party
          command: |
            aws s3 cp  s3://android-circleci-payload/third-party/third-party.zip third-party.zip
            unzip third-party.zip
            mv third-party  "$sdkNameWithVersion/third-party"

      - run:
          name: zip sdk folder
          command: |
            zip -r "$sdkNameWithVersion.zip" "$sdkNameWithVersion"

      - run:
          name: copy zip file
          command: |
            mkdir -p sdkfiles
            cp "$sdkNameWithVersion.zip" "sdkfiles/$sdkNameWithVersion.zip"
      - store_artifacts:
          path: sdkfiles
      - run:
          name: check current release release_type
          command: |
            if [ "$release_type" != "release" ]
            then
                echo "skip upload to s3 because this is not a release"
                circleci step halt
            fi
      - run:
          name: upload to s3
          command: |
            aws s3api put-object --bucket "$release_bucket" --key "$sdkNameWithVersion.zip" --body "$sdkNameWithVersion.zip" --content-disposition "attachment;filename=$sdkNameWithVersion.zip" --acl public-read  --profile android_sdk_release
            aws s3api put-object --bucket "$release_bucket" --key "latest/$sdkName.zip" --body "$sdkNameWithVersion.zip" --content-disposition "attachment;filename=$sdkNameWithVersion.zip" --acl public-read  --profile android_sdk_release
      - run:
          name: invalidate cloudfront
          command: |
            python3 CircleciScripts/cloudfront_invalidate.py android_sdk_release  "${android_distribution_id}" "latest/$sdkName.zip"

  integrationtest:
    working_directory: ~/code
    docker:
      # Android the primary container
      - image: circleci/android@sha256:5cdc8626cc6f13efe5ed982cdcdb432b0472f8740fed8743a6461e025ad6cdfc
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - configure_aws
      - run: 
          name: install python3-pip
          command: |
            sudo apt-get update
            sudo apt-get -y install python3-pip     
      - run: 
          name: Install json parser
          command: sudo pip3 install demjson
      - run: 
          name: Install lxml
          command: sudo pip3 install lxml      
      - run:
          name: install sdk
          command: |
            sudo yes | sdkmanager "platforms;android-27"
      - setup_emulator         
      - run:
          name: Configure test information
          command: |
            aws s3 cp s3://android-circleci-payload/testconfiguration.json aws-android-sdk-testutils/src/main/res/raw/testconfiguration.json
      - run:
          name: run integration tests
          command: |
            aws s3 cp s3://android-circleci-payload/gradle-wrapper.jar gradle/wrapper/gradle-wrapper.jar
            echo "${ANDROID_TESTS_CREDENTIALS_JSON}"  | base64 -di   > awsconfiguration.json
            python3 CircleciScripts/run_integrationtest.py "~/test_results" "$(pwd)" "$(pwd)/awsconfiguration.json"
      - run:
          name : check integration test result 
          command : |
            echo "testresult=$testresult"
            if [ "$testresult" == "0" ] 
            then
                echo "test succeed!"
            else
                echo "There are test failures"
                exit 1
            fi
      - store_artifacts:
          path: "~/test_results"
  uitest:
    working_directory: ~/code
    docker:
      # Android the primary container
      - image: circleci/android@sha256:5cdc8626cc6f13efe5ed982cdcdb432b0472f8740fed8743a6461e025ad6cdfc
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - configure_aws     
      - run:
          name: checkout sample applications
          command: |
            git clone https://github.com/sunchunqiang/aws-sdk-android-samples.git
      - restore_cache:
          key: Libs-{{ .Revision }}
      - run:
          name: copy third party
          command: |
            aws s3 cp  s3://android-circleci-payload/third-party/third-party.zip third-party.zip
            unzip third-party.zip
            cp third-party/**/*.jar  lib/
      - run:
          name: create aws configure json file
          command :
            echo "${S3SAMPLE_JSON}"  | base64 -di   > aws-sdk-android-samples/S3TransferUtilitySample/res/raw/awsconfiguration.json           
      - run:
          name: configure aws dependencies
          command: |
            python3 CircleciScripts/replace_awsdependencies.py "$(pwd)/aws-sdk-android-samples/S3TransferUtilitySample/build.gradle" "implementation fileTree(dir: '$(pwd)/lib', include: ['*.jar', '*.aar'])"
      - setup_emulator         
      - run:
          name: run sample ui test
          command: |
            cd aws-sdk-android-samples/S3TransferUtilitySample
            aws s3 cp s3://android-circleci-payload/gradle-wrapper.jar gradle/wrapper/gradle-wrapper.jar
            bash gradlew connectedAndroidTest
      - store_artifacts:
          path: "aws-sdk-android-samples/S3TransferUtilitySample/build/outputs"
      - store_artifacts:
          path: "aws-sdk-android-samples/S3TransferUtilitySample/build.gradle"
      - store_artifacts:
          path: logcat.log

  bump_sampleapp_version:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - set_enviroment_variables
      - quit_for_nominorversion
      - checkout  
      - run:
          name: set_bumpversion_enviroment
          command: |
            bumpversion_repo_user=awslabs
            bumpversion_repo_name=aws-sdk-android-samples
            minorversion=$(echo $release_version | sed "s/\([0-9]*.[0-9]*\).[0-9]*/\1/")
            echo ${minorversion}
            bump_version_message="Update sample apps to use ${minorversion}.+ version of the SDK"
            bump_version_pr_title="Bump sample applications versions to ${minorversion}.+"
            echo "export bumpversion_repo_user=$bumpversion_repo_user" >> $BASH_ENV
            echo "export bumpversion_repo_name=$bumpversion_repo_name" >> $BASH_ENV
            echo "export minorversion=$minorversion" >> $BASH_ENV
            echo "export bump_version_message='${bump_version_message}'" >> $BASH_ENV
            echo "export bump_version_pr_title='${bump_version_pr_title}'" >> $BASH_ENV
            echo "bump_version_pr_title:$bump_version_pr_title"
      - bump_version_pre
      - run:
          name: bump version
          command:
            python3 CircleciScripts/bump_androidsample_version.py "$(pwd)/aws-sdk-android-samples" $release_version
      - bump_version_post

  bump_applifydocs_version:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - set_enviroment_variables
      - quit_for_nominorversion
      - checkout  
      - run:
          name: set_bumpversion_enviroment
          command: |
            bumpversion_repo_user=aws-amplify
            bumpversion_repo_name=docs
            minorversion=$(echo $release_version | sed "s/\([0-9]*.[0-9]*\).[0-9]*/\1/")
            echo ${minorversion}
            bump_version_message="Update Android docs to ${release_version}"
            bump_version_pr_title="Update Android docs to ${release_version}"
            echo "export bumpversion_repo_user=$bumpversion_repo_user" >> $BASH_ENV
            echo "export bumpversion_repo_name=$bumpversion_repo_name" >> $BASH_ENV
            echo "export minorversion=$minorversion" >> $BASH_ENV
            echo "export bump_version_message='${bump_version_message}'" >> $BASH_ENV
            echo "export bump_version_pr_title='${bump_version_pr_title}'" >> $BASH_ENV
            echo "bump_version_pr_title:$bump_version_pr_title"
      - bump_version_pre
      - run:
          name: bump version
          command:
            python3 CircleciScripts/bump_amplifydocs_version.py "$(pwd)/${bumpversion_repo_name}/android" $release_version
      - bump_version_post

workflows:
  version: 2
  build_test:
    jobs:
      - build
      - unittest
      - integrationtest:
          filters:
            branches:
              only:
                - master
                - develop

      - uitest:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - develop

  release_sdk:
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/

      - unittest:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/

      - integrationtest:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/

      - release_maven:
          requires:
            - unittest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/

      - release_javadoc:
          requires:
            - unittest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/

      - release_s3:
          requires:
            - build
            - release_javadoc
            - release_maven
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/

      - release_tag:
          requires:
            - release_s3
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - bump_sampleapp_version:
          requires:
            - release_tag
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
      - bump_applifydocs_version:
          requires:
            - release_tag
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|beta)_v[0-9]+.[0-9]+.[0-9]+$/
