/*
 * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amazonaws.services.cloudformation.model;

import java.io.Serializable;

import com.amazonaws.AmazonWebServiceRequest;

/**
 * <p>
 * Deletes a specified stack. Once the call completes successfully, stack
 * deletion starts. Deleted stacks do not show up in the <a>DescribeStacks</a>
 * API if the deletion has been completed successfully.
 * </p>
 */
public class DeleteStackRequest extends AmazonWebServiceRequest implements Serializable {
    /**
     * <p>
     * The name or the unique stack ID that is associated with the stack.
     * </p>
     */
    private String stackName;

    /**
     * <p>
     * For stacks in the <code>DELETE_FAILED</code> state, a list of resource
     * logical IDs that are associated with the resources you want to retain.
     * During deletion, AWS CloudFormation deletes the stack but does not delete
     * the retained resources.
     * </p>
     * <p>
     * Retaining resources is useful when you cannot delete a resource, such as
     * a non-empty S3 bucket, but you want to delete the stack.
     * </p>
     */
    private java.util.List<String> retainResources;

    /**
     * <p>
     * The Amazon Resource Name (ARN) of an AWS Identity and Access Management
     * (IAM) role that AWS CloudFormation assumes to delete the stack. AWS
     * CloudFormation uses the role's credentials to make calls on your behalf.
     * </p>
     * <p>
     * If you don't specify a value, AWS CloudFormation uses the role that was
     * previously associated with the stack. If no role is available, AWS
     * CloudFormation uses a temporary session that is generated from your user
     * credentials.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>20 - 2048<br/>
     */
    private String roleARN;

    /**
     * <p>
     * A unique identifier for this <code>DeleteStack</code> request. Specify
     * this token if you plan to retry requests so that AWS CloudFormation knows
     * that you're not attempting to delete a stack with the same name. You
     * might retry <code>DeleteStack</code> requests to ensure that AWS
     * CloudFormation successfully received them.
     * </p>
     * <p>
     * All events triggered by a given stack operation are assigned the same
     * client request token, which you can use to track operations. For example,
     * if you execute a <code>CreateStack</code> operation with the token
     * <code>token1</code>, then all the <code>StackEvents</code> generated by
     * that operation will have <code>ClientRequestToken</code> set as
     * <code>token1</code>.
     * </p>
     * <p>
     * In the console, stack operations display the client request token on the
     * Events tab. Stack operations that are initiated from the console use the
     * token format <i>Console-StackOperation-ID</i>, which helps you easily
     * identify the stack operation . For example, if you create a stack using
     * the console, each stack event would be assigned the same token in the
     * following format:
     * <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 128<br/>
     * <b>Pattern: </b>[a-zA-Z0-9][-a-zA-Z0-9]*<br/>
     */
    private String clientRequestToken;

    /**
     * <p>
     * The name or the unique stack ID that is associated with the stack.
     * </p>
     *
     * @return <p>
     *         The name or the unique stack ID that is associated with the
     *         stack.
     *         </p>
     */
    public String getStackName() {
        return stackName;
    }

    /**
     * <p>
     * The name or the unique stack ID that is associated with the stack.
     * </p>
     *
     * @param stackName <p>
     *            The name or the unique stack ID that is associated with the
     *            stack.
     *            </p>
     */
    public void setStackName(String stackName) {
        this.stackName = stackName;
    }

    /**
     * <p>
     * The name or the unique stack ID that is associated with the stack.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param stackName <p>
     *            The name or the unique stack ID that is associated with the
     *            stack.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public DeleteStackRequest withStackName(String stackName) {
        this.stackName = stackName;
        return this;
    }

    /**
     * <p>
     * For stacks in the <code>DELETE_FAILED</code> state, a list of resource
     * logical IDs that are associated with the resources you want to retain.
     * During deletion, AWS CloudFormation deletes the stack but does not delete
     * the retained resources.
     * </p>
     * <p>
     * Retaining resources is useful when you cannot delete a resource, such as
     * a non-empty S3 bucket, but you want to delete the stack.
     * </p>
     *
     * @return <p>
     *         For stacks in the <code>DELETE_FAILED</code> state, a list of
     *         resource logical IDs that are associated with the resources you
     *         want to retain. During deletion, AWS CloudFormation deletes the
     *         stack but does not delete the retained resources.
     *         </p>
     *         <p>
     *         Retaining resources is useful when you cannot delete a resource,
     *         such as a non-empty S3 bucket, but you want to delete the stack.
     *         </p>
     */
    public java.util.List<String> getRetainResources() {
        return retainResources;
    }

    /**
     * <p>
     * For stacks in the <code>DELETE_FAILED</code> state, a list of resource
     * logical IDs that are associated with the resources you want to retain.
     * During deletion, AWS CloudFormation deletes the stack but does not delete
     * the retained resources.
     * </p>
     * <p>
     * Retaining resources is useful when you cannot delete a resource, such as
     * a non-empty S3 bucket, but you want to delete the stack.
     * </p>
     *
     * @param retainResources <p>
     *            For stacks in the <code>DELETE_FAILED</code> state, a list of
     *            resource logical IDs that are associated with the resources
     *            you want to retain. During deletion, AWS CloudFormation
     *            deletes the stack but does not delete the retained resources.
     *            </p>
     *            <p>
     *            Retaining resources is useful when you cannot delete a
     *            resource, such as a non-empty S3 bucket, but you want to
     *            delete the stack.
     *            </p>
     */
    public void setRetainResources(java.util.Collection<String> retainResources) {
        if (retainResources == null) {
            this.retainResources = null;
            return;
        }

        this.retainResources = new java.util.ArrayList<String>(retainResources);
    }

    /**
     * <p>
     * For stacks in the <code>DELETE_FAILED</code> state, a list of resource
     * logical IDs that are associated with the resources you want to retain.
     * During deletion, AWS CloudFormation deletes the stack but does not delete
     * the retained resources.
     * </p>
     * <p>
     * Retaining resources is useful when you cannot delete a resource, such as
     * a non-empty S3 bucket, but you want to delete the stack.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param retainResources <p>
     *            For stacks in the <code>DELETE_FAILED</code> state, a list of
     *            resource logical IDs that are associated with the resources
     *            you want to retain. During deletion, AWS CloudFormation
     *            deletes the stack but does not delete the retained resources.
     *            </p>
     *            <p>
     *            Retaining resources is useful when you cannot delete a
     *            resource, such as a non-empty S3 bucket, but you want to
     *            delete the stack.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public DeleteStackRequest withRetainResources(String... retainResources) {
        if (getRetainResources() == null) {
            this.retainResources = new java.util.ArrayList<String>(retainResources.length);
        }
        for (String value : retainResources) {
            this.retainResources.add(value);
        }
        return this;
    }

    /**
     * <p>
     * For stacks in the <code>DELETE_FAILED</code> state, a list of resource
     * logical IDs that are associated with the resources you want to retain.
     * During deletion, AWS CloudFormation deletes the stack but does not delete
     * the retained resources.
     * </p>
     * <p>
     * Retaining resources is useful when you cannot delete a resource, such as
     * a non-empty S3 bucket, but you want to delete the stack.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     *
     * @param retainResources <p>
     *            For stacks in the <code>DELETE_FAILED</code> state, a list of
     *            resource logical IDs that are associated with the resources
     *            you want to retain. During deletion, AWS CloudFormation
     *            deletes the stack but does not delete the retained resources.
     *            </p>
     *            <p>
     *            Retaining resources is useful when you cannot delete a
     *            resource, such as a non-empty S3 bucket, but you want to
     *            delete the stack.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public DeleteStackRequest withRetainResources(java.util.Collection<String> retainResources) {
        setRetainResources(retainResources);
        return this;
    }

    /**
     * <p>
     * The Amazon Resource Name (ARN) of an AWS Identity and Access Management
     * (IAM) role that AWS CloudFormation assumes to delete the stack. AWS
     * CloudFormation uses the role's credentials to make calls on your behalf.
     * </p>
     * <p>
     * If you don't specify a value, AWS CloudFormation uses the role that was
     * previously associated with the stack. If no role is available, AWS
     * CloudFormation uses a temporary session that is generated from your user
     * credentials.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>20 - 2048<br/>
     *
     * @return <p>
     *         The Amazon Resource Name (ARN) of an AWS Identity and Access
     *         Management (IAM) role that AWS CloudFormation assumes to delete
     *         the stack. AWS CloudFormation uses the role's credentials to make
     *         calls on your behalf.
     *         </p>
     *         <p>
     *         If you don't specify a value, AWS CloudFormation uses the role
     *         that was previously associated with the stack. If no role is
     *         available, AWS CloudFormation uses a temporary session that is
     *         generated from your user credentials.
     *         </p>
     */
    public String getRoleARN() {
        return roleARN;
    }

    /**
     * <p>
     * The Amazon Resource Name (ARN) of an AWS Identity and Access Management
     * (IAM) role that AWS CloudFormation assumes to delete the stack. AWS
     * CloudFormation uses the role's credentials to make calls on your behalf.
     * </p>
     * <p>
     * If you don't specify a value, AWS CloudFormation uses the role that was
     * previously associated with the stack. If no role is available, AWS
     * CloudFormation uses a temporary session that is generated from your user
     * credentials.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>20 - 2048<br/>
     *
     * @param roleARN <p>
     *            The Amazon Resource Name (ARN) of an AWS Identity and Access
     *            Management (IAM) role that AWS CloudFormation assumes to
     *            delete the stack. AWS CloudFormation uses the role's
     *            credentials to make calls on your behalf.
     *            </p>
     *            <p>
     *            If you don't specify a value, AWS CloudFormation uses the role
     *            that was previously associated with the stack. If no role is
     *            available, AWS CloudFormation uses a temporary session that is
     *            generated from your user credentials.
     *            </p>
     */
    public void setRoleARN(String roleARN) {
        this.roleARN = roleARN;
    }

    /**
     * <p>
     * The Amazon Resource Name (ARN) of an AWS Identity and Access Management
     * (IAM) role that AWS CloudFormation assumes to delete the stack. AWS
     * CloudFormation uses the role's credentials to make calls on your behalf.
     * </p>
     * <p>
     * If you don't specify a value, AWS CloudFormation uses the role that was
     * previously associated with the stack. If no role is available, AWS
     * CloudFormation uses a temporary session that is generated from your user
     * credentials.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>20 - 2048<br/>
     *
     * @param roleARN <p>
     *            The Amazon Resource Name (ARN) of an AWS Identity and Access
     *            Management (IAM) role that AWS CloudFormation assumes to
     *            delete the stack. AWS CloudFormation uses the role's
     *            credentials to make calls on your behalf.
     *            </p>
     *            <p>
     *            If you don't specify a value, AWS CloudFormation uses the role
     *            that was previously associated with the stack. If no role is
     *            available, AWS CloudFormation uses a temporary session that is
     *            generated from your user credentials.
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public DeleteStackRequest withRoleARN(String roleARN) {
        this.roleARN = roleARN;
        return this;
    }

    /**
     * <p>
     * A unique identifier for this <code>DeleteStack</code> request. Specify
     * this token if you plan to retry requests so that AWS CloudFormation knows
     * that you're not attempting to delete a stack with the same name. You
     * might retry <code>DeleteStack</code> requests to ensure that AWS
     * CloudFormation successfully received them.
     * </p>
     * <p>
     * All events triggered by a given stack operation are assigned the same
     * client request token, which you can use to track operations. For example,
     * if you execute a <code>CreateStack</code> operation with the token
     * <code>token1</code>, then all the <code>StackEvents</code> generated by
     * that operation will have <code>ClientRequestToken</code> set as
     * <code>token1</code>.
     * </p>
     * <p>
     * In the console, stack operations display the client request token on the
     * Events tab. Stack operations that are initiated from the console use the
     * token format <i>Console-StackOperation-ID</i>, which helps you easily
     * identify the stack operation . For example, if you create a stack using
     * the console, each stack event would be assigned the same token in the
     * following format:
     * <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 128<br/>
     * <b>Pattern: </b>[a-zA-Z0-9][-a-zA-Z0-9]*<br/>
     *
     * @return <p>
     *         A unique identifier for this <code>DeleteStack</code> request.
     *         Specify this token if you plan to retry requests so that AWS
     *         CloudFormation knows that you're not attempting to delete a stack
     *         with the same name. You might retry <code>DeleteStack</code>
     *         requests to ensure that AWS CloudFormation successfully received
     *         them.
     *         </p>
     *         <p>
     *         All events triggered by a given stack operation are assigned the
     *         same client request token, which you can use to track operations.
     *         For example, if you execute a <code>CreateStack</code> operation
     *         with the token <code>token1</code>, then all the
     *         <code>StackEvents</code> generated by that operation will have
     *         <code>ClientRequestToken</code> set as <code>token1</code>.
     *         </p>
     *         <p>
     *         In the console, stack operations display the client request token
     *         on the Events tab. Stack operations that are initiated from the
     *         console use the token format <i>Console-StackOperation-ID</i>,
     *         which helps you easily identify the stack operation . For
     *         example, if you create a stack using the console, each stack
     *         event would be assigned the same token in the following format:
     *         <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>
     *         .
     *         </p>
     */
    public String getClientRequestToken() {
        return clientRequestToken;
    }

    /**
     * <p>
     * A unique identifier for this <code>DeleteStack</code> request. Specify
     * this token if you plan to retry requests so that AWS CloudFormation knows
     * that you're not attempting to delete a stack with the same name. You
     * might retry <code>DeleteStack</code> requests to ensure that AWS
     * CloudFormation successfully received them.
     * </p>
     * <p>
     * All events triggered by a given stack operation are assigned the same
     * client request token, which you can use to track operations. For example,
     * if you execute a <code>CreateStack</code> operation with the token
     * <code>token1</code>, then all the <code>StackEvents</code> generated by
     * that operation will have <code>ClientRequestToken</code> set as
     * <code>token1</code>.
     * </p>
     * <p>
     * In the console, stack operations display the client request token on the
     * Events tab. Stack operations that are initiated from the console use the
     * token format <i>Console-StackOperation-ID</i>, which helps you easily
     * identify the stack operation . For example, if you create a stack using
     * the console, each stack event would be assigned the same token in the
     * following format:
     * <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>.
     * </p>
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 128<br/>
     * <b>Pattern: </b>[a-zA-Z0-9][-a-zA-Z0-9]*<br/>
     *
     * @param clientRequestToken <p>
     *            A unique identifier for this <code>DeleteStack</code> request.
     *            Specify this token if you plan to retry requests so that AWS
     *            CloudFormation knows that you're not attempting to delete a
     *            stack with the same name. You might retry
     *            <code>DeleteStack</code> requests to ensure that AWS
     *            CloudFormation successfully received them.
     *            </p>
     *            <p>
     *            All events triggered by a given stack operation are assigned
     *            the same client request token, which you can use to track
     *            operations. For example, if you execute a
     *            <code>CreateStack</code> operation with the token
     *            <code>token1</code>, then all the <code>StackEvents</code>
     *            generated by that operation will have
     *            <code>ClientRequestToken</code> set as <code>token1</code>.
     *            </p>
     *            <p>
     *            In the console, stack operations display the client request
     *            token on the Events tab. Stack operations that are initiated
     *            from the console use the token format
     *            <i>Console-StackOperation-ID</i>, which helps you easily
     *            identify the stack operation . For example, if you create a
     *            stack using the console, each stack event would be assigned
     *            the same token in the following format:
     *            <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>
     *            .
     *            </p>
     */
    public void setClientRequestToken(String clientRequestToken) {
        this.clientRequestToken = clientRequestToken;
    }

    /**
     * <p>
     * A unique identifier for this <code>DeleteStack</code> request. Specify
     * this token if you plan to retry requests so that AWS CloudFormation knows
     * that you're not attempting to delete a stack with the same name. You
     * might retry <code>DeleteStack</code> requests to ensure that AWS
     * CloudFormation successfully received them.
     * </p>
     * <p>
     * All events triggered by a given stack operation are assigned the same
     * client request token, which you can use to track operations. For example,
     * if you execute a <code>CreateStack</code> operation with the token
     * <code>token1</code>, then all the <code>StackEvents</code> generated by
     * that operation will have <code>ClientRequestToken</code> set as
     * <code>token1</code>.
     * </p>
     * <p>
     * In the console, stack operations display the client request token on the
     * Events tab. Stack operations that are initiated from the console use the
     * token format <i>Console-StackOperation-ID</i>, which helps you easily
     * identify the stack operation . For example, if you create a stack using
     * the console, each stack event would be assigned the same token in the
     * following format:
     * <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>.
     * </p>
     * <p>
     * Returns a reference to this object so that method calls can be chained
     * together.
     * <p>
     * <b>Constraints:</b><br/>
     * <b>Length: </b>1 - 128<br/>
     * <b>Pattern: </b>[a-zA-Z0-9][-a-zA-Z0-9]*<br/>
     *
     * @param clientRequestToken <p>
     *            A unique identifier for this <code>DeleteStack</code> request.
     *            Specify this token if you plan to retry requests so that AWS
     *            CloudFormation knows that you're not attempting to delete a
     *            stack with the same name. You might retry
     *            <code>DeleteStack</code> requests to ensure that AWS
     *            CloudFormation successfully received them.
     *            </p>
     *            <p>
     *            All events triggered by a given stack operation are assigned
     *            the same client request token, which you can use to track
     *            operations. For example, if you execute a
     *            <code>CreateStack</code> operation with the token
     *            <code>token1</code>, then all the <code>StackEvents</code>
     *            generated by that operation will have
     *            <code>ClientRequestToken</code> set as <code>token1</code>.
     *            </p>
     *            <p>
     *            In the console, stack operations display the client request
     *            token on the Events tab. Stack operations that are initiated
     *            from the console use the token format
     *            <i>Console-StackOperation-ID</i>, which helps you easily
     *            identify the stack operation . For example, if you create a
     *            stack using the console, each stack event would be assigned
     *            the same token in the following format:
     *            <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>
     *            .
     *            </p>
     * @return A reference to this updated object so that method calls can be
     *         chained together.
     */
    public DeleteStackRequest withClientRequestToken(String clientRequestToken) {
        this.clientRequestToken = clientRequestToken;
        return this;
    }

    /**
     * Returns a string representation of this object; useful for testing and
     * debugging.
     *
     * @return A string representation of this object.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getStackName() != null)
            sb.append("StackName: " + getStackName() + ",");
        if (getRetainResources() != null)
            sb.append("RetainResources: " + getRetainResources() + ",");
        if (getRoleARN() != null)
            sb.append("RoleARN: " + getRoleARN() + ",");
        if (getClientRequestToken() != null)
            sb.append("ClientRequestToken: " + getClientRequestToken());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getStackName() == null) ? 0 : getStackName().hashCode());
        hashCode = prime * hashCode
                + ((getRetainResources() == null) ? 0 : getRetainResources().hashCode());
        hashCode = prime * hashCode + ((getRoleARN() == null) ? 0 : getRoleARN().hashCode());
        hashCode = prime * hashCode
                + ((getClientRequestToken() == null) ? 0 : getClientRequestToken().hashCode());
        return hashCode;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof DeleteStackRequest == false)
            return false;
        DeleteStackRequest other = (DeleteStackRequest) obj;

        if (other.getStackName() == null ^ this.getStackName() == null)
            return false;
        if (other.getStackName() != null
                && other.getStackName().equals(this.getStackName()) == false)
            return false;
        if (other.getRetainResources() == null ^ this.getRetainResources() == null)
            return false;
        if (other.getRetainResources() != null
                && other.getRetainResources().equals(this.getRetainResources()) == false)
            return false;
        if (other.getRoleARN() == null ^ this.getRoleARN() == null)
            return false;
        if (other.getRoleARN() != null && other.getRoleARN().equals(this.getRoleARN()) == false)
            return false;
        if (other.getClientRequestToken() == null ^ this.getClientRequestToken() == null)
            return false;
        if (other.getClientRequestToken() != null
                && other.getClientRequestToken().equals(this.getClientRequestToken()) == false)
            return false;
        return true;
    }
}
